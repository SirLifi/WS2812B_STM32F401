
led_c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004534  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080046d4  080046d4  000056d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c4  080047c4  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080047c4  080047c4  000057c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047cc  080047cc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047cc  080047cc  000057cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047d0  080047d0  000057d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080047d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000068  0800483c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  0800483c  00006230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d6c  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f9  00000000  00000000  0000ce04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000e500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000533  00000000  00000000  0000ebf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160fc  00000000  00000000  0000f12b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008eef  00000000  00000000  00025227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085fbb  00000000  00000000  0002e116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b40d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024b0  00000000  00000000  000b4114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  000b65c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046bc 	.word	0x080046bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080046bc 	.word	0x080046bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <sendData>:
#include "main.h"
#include "led_func.h"
#define LENSINPUT 1
#define DELAY 150

void sendData(SPI_HandleTypeDef hspix, uint8_t* data, uint8_t lenght){
 8000570:	b084      	sub	sp, #16
 8000572:	b580      	push	{r7, lr}
 8000574:	b088      	sub	sp, #32
 8000576:	af00      	add	r7, sp, #0
 8000578:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 800057c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for (int j = 0; j <lenght; j++) {
 8000580:	2300      	movs	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]
 8000584:	e043      	b.n	800060e <sendData+0x9e>
		uint8_t spi_data[3 * 8];
		for (uint16_t i = 0; i < 3; i++)
 8000586:	2300      	movs	r3, #0
 8000588:	837b      	strh	r3, [r7, #26]
 800058a:	e032      	b.n	80005f2 <sendData+0x82>
		{
			for (uint8_t bit = 0; bit < 8; bit++)
 800058c:	2300      	movs	r3, #0
 800058e:	767b      	strb	r3, [r7, #25]
 8000590:	e029      	b.n	80005e6 <sendData+0x76>
			{
				if (*((data+i)+j*3) & (1 << (7 - bit))) {
 8000592:	8b79      	ldrh	r1, [r7, #26]
 8000594:	69fa      	ldr	r2, [r7, #28]
 8000596:	4613      	mov	r3, r2
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	4413      	add	r3, r2
 800059c:	440b      	add	r3, r1
 800059e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80005a2:	4413      	add	r3, r2
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	461a      	mov	r2, r3
 80005a8:	7e7b      	ldrb	r3, [r7, #25]
 80005aa:	f1c3 0307 	rsb	r3, r3, #7
 80005ae:	fa42 f303 	asr.w	r3, r2, r3
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d009      	beq.n	80005ce <sendData+0x5e>
					spi_data[i * 8 + bit + 0] = 0b110; //1
 80005ba:	8b7b      	ldrh	r3, [r7, #26]
 80005bc:	00da      	lsls	r2, r3, #3
 80005be:	7e7b      	ldrb	r3, [r7, #25]
 80005c0:	4413      	add	r3, r2
 80005c2:	3320      	adds	r3, #32
 80005c4:	443b      	add	r3, r7
 80005c6:	2206      	movs	r2, #6
 80005c8:	f803 2c20 	strb.w	r2, [r3, #-32]
 80005cc:	e008      	b.n	80005e0 <sendData+0x70>
				}
				else {
					spi_data[i * 8 + bit + 0] = 0b100; //1
 80005ce:	8b7b      	ldrh	r3, [r7, #26]
 80005d0:	00da      	lsls	r2, r3, #3
 80005d2:	7e7b      	ldrb	r3, [r7, #25]
 80005d4:	4413      	add	r3, r2
 80005d6:	3320      	adds	r3, #32
 80005d8:	443b      	add	r3, r7
 80005da:	2204      	movs	r2, #4
 80005dc:	f803 2c20 	strb.w	r2, [r3, #-32]
			for (uint8_t bit = 0; bit < 8; bit++)
 80005e0:	7e7b      	ldrb	r3, [r7, #25]
 80005e2:	3301      	adds	r3, #1
 80005e4:	767b      	strb	r3, [r7, #25]
 80005e6:	7e7b      	ldrb	r3, [r7, #25]
 80005e8:	2b07      	cmp	r3, #7
 80005ea:	d9d2      	bls.n	8000592 <sendData+0x22>
		for (uint16_t i = 0; i < 3; i++)
 80005ec:	8b7b      	ldrh	r3, [r7, #26]
 80005ee:	3301      	adds	r3, #1
 80005f0:	837b      	strh	r3, [r7, #26]
 80005f2:	8b7b      	ldrh	r3, [r7, #26]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d9c9      	bls.n	800058c <sendData+0x1c>
				}
			}
		}

    HAL_SPI_Transmit(&hspix, spi_data, sizeof(spi_data), HAL_MAX_DELAY);
 80005f8:	4639      	mov	r1, r7
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	2218      	movs	r2, #24
 8000600:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000604:	f002 fe4f 	bl	80032a6 <HAL_SPI_Transmit>
	for (int j = 0; j <lenght; j++) {
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	3301      	adds	r3, #1
 800060c:	61fb      	str	r3, [r7, #28]
 800060e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8000612:	69fa      	ldr	r2, [r7, #28]
 8000614:	429a      	cmp	r2, r3
 8000616:	dbb6      	blt.n	8000586 <sendData+0x16>
	}
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <sendReverseData>:
void sendReverseData(SPI_HandleTypeDef hspix, uint8_t* data, uint8_t lenght){
 8000628:	b084      	sub	sp, #16
 800062a:	b580      	push	{r7, lr}
 800062c:	b088      	sub	sp, #32
 800062e:	af00      	add	r7, sp, #0
 8000630:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 8000634:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for (int j = lenght-1;; j--) {
 8000638:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800063c:	3b01      	subs	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
		uint8_t spi_data[3 * 8];
		for (uint16_t i = 0; i < 3; i++)
 8000640:	2300      	movs	r3, #0
 8000642:	837b      	strh	r3, [r7, #26]
 8000644:	e032      	b.n	80006ac <sendReverseData+0x84>
		{
			for (uint8_t bit = 0; bit < 8; bit++)
 8000646:	2300      	movs	r3, #0
 8000648:	767b      	strb	r3, [r7, #25]
 800064a:	e029      	b.n	80006a0 <sendReverseData+0x78>
			{
				if (*((data+i)+j*3) & (1 << (7 - bit))) {
 800064c:	8b79      	ldrh	r1, [r7, #26]
 800064e:	69fa      	ldr	r2, [r7, #28]
 8000650:	4613      	mov	r3, r2
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	4413      	add	r3, r2
 8000656:	440b      	add	r3, r1
 8000658:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800065c:	4413      	add	r3, r2
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	7e7b      	ldrb	r3, [r7, #25]
 8000664:	f1c3 0307 	rsb	r3, r3, #7
 8000668:	fa42 f303 	asr.w	r3, r2, r3
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d009      	beq.n	8000688 <sendReverseData+0x60>
					spi_data[i * 8 + bit + 0] = 0b110; //1
 8000674:	8b7b      	ldrh	r3, [r7, #26]
 8000676:	00da      	lsls	r2, r3, #3
 8000678:	7e7b      	ldrb	r3, [r7, #25]
 800067a:	4413      	add	r3, r2
 800067c:	3320      	adds	r3, #32
 800067e:	443b      	add	r3, r7
 8000680:	2206      	movs	r2, #6
 8000682:	f803 2c20 	strb.w	r2, [r3, #-32]
 8000686:	e008      	b.n	800069a <sendReverseData+0x72>
				}
				else {
					spi_data[i * 8 + bit + 0] = 0b100; //1
 8000688:	8b7b      	ldrh	r3, [r7, #26]
 800068a:	00da      	lsls	r2, r3, #3
 800068c:	7e7b      	ldrb	r3, [r7, #25]
 800068e:	4413      	add	r3, r2
 8000690:	3320      	adds	r3, #32
 8000692:	443b      	add	r3, r7
 8000694:	2204      	movs	r2, #4
 8000696:	f803 2c20 	strb.w	r2, [r3, #-32]
			for (uint8_t bit = 0; bit < 8; bit++)
 800069a:	7e7b      	ldrb	r3, [r7, #25]
 800069c:	3301      	adds	r3, #1
 800069e:	767b      	strb	r3, [r7, #25]
 80006a0:	7e7b      	ldrb	r3, [r7, #25]
 80006a2:	2b07      	cmp	r3, #7
 80006a4:	d9d2      	bls.n	800064c <sendReverseData+0x24>
		for (uint16_t i = 0; i < 3; i++)
 80006a6:	8b7b      	ldrh	r3, [r7, #26]
 80006a8:	3301      	adds	r3, #1
 80006aa:	837b      	strh	r3, [r7, #26]
 80006ac:	8b7b      	ldrh	r3, [r7, #26]
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d9c9      	bls.n	8000646 <sendReverseData+0x1e>
				}
			}
		}

	HAL_SPI_Transmit(&hspix, spi_data, sizeof(spi_data), HAL_MAX_DELAY);
 80006b2:	4639      	mov	r1, r7
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	2218      	movs	r2, #24
 80006ba:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80006be:	f002 fdf2 	bl	80032a6 <HAL_SPI_Transmit>
	if(j == 0)break;
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d003      	beq.n	80006d0 <sendReverseData+0xa8>
	for (int j = lenght-1;; j--) {
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	61fb      	str	r3, [r7, #28]
 80006ce:	e7b7      	b.n	8000640 <sendReverseData+0x18>
	}
}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006da:	b004      	add	sp, #16
 80006dc:	4770      	bx	lr

080006de <iterationRunRandomColor>:

void iterationRunRandomColor(SPI_HandleTypeDef hspix, uint8_t* buffer, uint8_t lenght, uint8_t LUX, uint8_t type_run)
{
 80006de:	b084      	sub	sp, #16
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b096      	sub	sp, #88	@ 0x58
 80006e4:	af14      	add	r7, sp, #80	@ 0x50
 80006e6:	f107 0c10 	add.w	ip, r7, #16
 80006ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(uint8_t i = 0; i < lenght; i++) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	e069      	b.n	80007c8 <iterationRunRandomColor+0xea>
		*((buffer+0)+i*3) = rand()%LUX;
 80006f4:	f002 fff6 	bl	80036e4 <rand>
 80006f8:	4602      	mov	r2, r0
 80006fa:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80006fe:	fb92 f1f3 	sdiv	r1, r2, r3
 8000702:	fb01 f303 	mul.w	r3, r1, r3
 8000706:	1ad1      	subs	r1, r2, r3
 8000708:	79fa      	ldrb	r2, [r7, #7]
 800070a:	4613      	mov	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	461a      	mov	r2, r3
 8000712:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000714:	4413      	add	r3, r2
 8000716:	b2ca      	uxtb	r2, r1
 8000718:	701a      	strb	r2, [r3, #0]
		*((buffer+1)+i*3) = rand()%LUX;
 800071a:	f002 ffe3 	bl	80036e4 <rand>
 800071e:	4602      	mov	r2, r0
 8000720:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000724:	fb92 f1f3 	sdiv	r1, r2, r3
 8000728:	fb01 f303 	mul.w	r3, r1, r3
 800072c:	1ad1      	subs	r1, r2, r3
 800072e:	79fa      	ldrb	r2, [r7, #7]
 8000730:	4613      	mov	r3, r2
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	4413      	add	r3, r2
 8000736:	3301      	adds	r3, #1
 8000738:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800073a:	4413      	add	r3, r2
 800073c:	b2ca      	uxtb	r2, r1
 800073e:	701a      	strb	r2, [r3, #0]
		*((buffer+2)+i*3) = rand()%LUX;
 8000740:	f002 ffd0 	bl	80036e4 <rand>
 8000744:	4602      	mov	r2, r0
 8000746:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800074a:	fb92 f1f3 	sdiv	r1, r2, r3
 800074e:	fb01 f303 	mul.w	r3, r1, r3
 8000752:	1ad1      	subs	r1, r2, r3
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	3302      	adds	r3, #2
 800075e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000760:	4413      	add	r3, r2
 8000762:	b2ca      	uxtb	r2, r1
 8000764:	701a      	strb	r2, [r3, #0]
		if(type_run == 0)
 8000766:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800076a:	2b00      	cmp	r3, #0
 800076c:	d111      	bne.n	8000792 <iterationRunRandomColor+0xb4>
			sendData(hspix,buffer, lenght);
 800076e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000772:	9313      	str	r3, [sp, #76]	@ 0x4c
 8000774:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000776:	9312      	str	r3, [sp, #72]	@ 0x48
 8000778:	4668      	mov	r0, sp
 800077a:	f107 0320 	add.w	r3, r7, #32
 800077e:	2248      	movs	r2, #72	@ 0x48
 8000780:	4619      	mov	r1, r3
 8000782:	f003 f96e 	bl	8003a62 <memcpy>
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800078c:	f7ff fef0 	bl	8000570 <sendData>
 8000790:	e014      	b.n	80007bc <iterationRunRandomColor+0xde>
		else if(type_run == 1)
 8000792:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000796:	2b01      	cmp	r3, #1
 8000798:	d110      	bne.n	80007bc <iterationRunRandomColor+0xde>
			sendReverseData(hspix,buffer, lenght);
 800079a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800079e:	9313      	str	r3, [sp, #76]	@ 0x4c
 80007a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80007a2:	9312      	str	r3, [sp, #72]	@ 0x48
 80007a4:	4668      	mov	r0, sp
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	2248      	movs	r2, #72	@ 0x48
 80007ac:	4619      	mov	r1, r3
 80007ae:	f003 f958 	bl	8003a62 <memcpy>
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007b8:	f7ff ff36 	bl	8000628 <sendReverseData>
		HAL_Delay(DELAY);
 80007bc:	2096      	movs	r0, #150	@ 0x96
 80007be:	f001 fe1f 	bl	8002400 <HAL_Delay>
	for(uint8_t i = 0; i < lenght; i++) {
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	3301      	adds	r3, #1
 80007c6:	71fb      	strb	r3, [r7, #7]
 80007c8:	79fa      	ldrb	r2, [r7, #7]
 80007ca:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d390      	bcc.n	80006f4 <iterationRunRandomColor+0x16>
		}
	memset(buffer, 0, lenght*3);
 80007d2:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80007d6:	4613      	mov	r3, r2
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	4413      	add	r3, r2
 80007dc:	461a      	mov	r2, r3
 80007de:	2100      	movs	r1, #0
 80007e0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80007e2:	f003 f8c2 	bl	800396a <memset>
	sendData(hspix,buffer, lenght);
 80007e6:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80007ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80007ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80007ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80007f0:	4668      	mov	r0, sp
 80007f2:	f107 0320 	add.w	r3, r7, #32
 80007f6:	2248      	movs	r2, #72	@ 0x48
 80007f8:	4619      	mov	r1, r3
 80007fa:	f003 f932 	bl	8003a62 <memcpy>
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000804:	f7ff feb4 	bl	8000570 <sendData>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000812:	b004      	add	sp, #16
 8000814:	4770      	bx	lr

08000816 <starfall>:

void starfall(SPI_HandleTypeDef hspix, uint8_t* buffer, uint8_t lenght, uint8_t LUX, int8_t type_run)
{
 8000816:	b084      	sub	sp, #16
 8000818:	b580      	push	{r7, lr}
 800081a:	b096      	sub	sp, #88	@ 0x58
 800081c:	af14      	add	r7, sp, #80	@ 0x50
 800081e:	f107 0c10 	add.w	ip, r7, #16
 8000822:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t data[]={
			rand()%LUX,
 8000826:	f002 ff5d 	bl	80036e4 <rand>
 800082a:	4602      	mov	r2, r0
 800082c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000830:	fb92 f1f3 	sdiv	r1, r2, r3
 8000834:	fb01 f303 	mul.w	r3, r1, r3
 8000838:	1ad3      	subs	r3, r2, r3
	uint8_t data[]={
 800083a:	b2db      	uxtb	r3, r3
 800083c:	713b      	strb	r3, [r7, #4]
			rand()%LUX,
 800083e:	f002 ff51 	bl	80036e4 <rand>
 8000842:	4602      	mov	r2, r0
 8000844:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000848:	fb92 f1f3 	sdiv	r1, r2, r3
 800084c:	fb01 f303 	mul.w	r3, r1, r3
 8000850:	1ad3      	subs	r3, r2, r3
	uint8_t data[]={
 8000852:	b2db      	uxtb	r3, r3
 8000854:	717b      	strb	r3, [r7, #5]
			rand()%LUX,
 8000856:	f002 ff45 	bl	80036e4 <rand>
 800085a:	4602      	mov	r2, r0
 800085c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000860:	fb92 f1f3 	sdiv	r1, r2, r3
 8000864:	fb01 f303 	mul.w	r3, r1, r3
 8000868:	1ad3      	subs	r3, r2, r3
	uint8_t data[]={
 800086a:	b2db      	uxtb	r3, r3
 800086c:	71bb      	strb	r3, [r7, #6]
			};
	for(uint8_t i = 0; i < lenght+3; i++) {
 800086e:	2300      	movs	r3, #0
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	e0f9      	b.n	8000a68 <starfall+0x252>
		HAL_Delay(DELAY);
 8000874:	2096      	movs	r0, #150	@ 0x96
 8000876:	f001 fdc3 	bl	8002400 <HAL_Delay>
		if(i<(lenght)){
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000880:	429a      	cmp	r2, r3
 8000882:	d21a      	bcs.n	80008ba <starfall+0xa4>
			*((buffer+0)+i*3) = data[0];
 8000884:	79fa      	ldrb	r2, [r7, #7]
 8000886:	4613      	mov	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	4413      	add	r3, r2
 800088c:	461a      	mov	r2, r3
 800088e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000890:	4413      	add	r3, r2
 8000892:	793a      	ldrb	r2, [r7, #4]
 8000894:	701a      	strb	r2, [r3, #0]
			*((buffer+1)+i*3) = data[1];
 8000896:	79fa      	ldrb	r2, [r7, #7]
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	3301      	adds	r3, #1
 80008a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80008a2:	4413      	add	r3, r2
 80008a4:	797a      	ldrb	r2, [r7, #5]
 80008a6:	701a      	strb	r2, [r3, #0]
			*((buffer+2)+i*3) = data[2];
 80008a8:	79fa      	ldrb	r2, [r7, #7]
 80008aa:	4613      	mov	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4413      	add	r3, r2
 80008b0:	3302      	adds	r3, #2
 80008b2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80008b4:	4413      	add	r3, r2
 80008b6:	79ba      	ldrb	r2, [r7, #6]
 80008b8:	701a      	strb	r2, [r3, #0]
		}

		if(i<(lenght+1) && i>0){
 80008ba:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d33e      	bcc.n	8000942 <starfall+0x12c>
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d03b      	beq.n	8000942 <starfall+0x12c>
			*((buffer+0)+(i-1)*3) /= 2;
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	1e5a      	subs	r2, r3, #1
 80008ce:	4613      	mov	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	461a      	mov	r2, r3
 80008d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008d8:	4413      	add	r3, r2
 80008da:	7819      	ldrb	r1, [r3, #0]
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	1e5a      	subs	r2, r3, #1
 80008e0:	4613      	mov	r3, r2
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	4413      	add	r3, r2
 80008e6:	461a      	mov	r2, r3
 80008e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008ea:	4413      	add	r3, r2
 80008ec:	084a      	lsrs	r2, r1, #1
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	701a      	strb	r2, [r3, #0]
			*((buffer+1)+(i-1)*3) /= 2;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	1e5a      	subs	r2, r3, #1
 80008f6:	4613      	mov	r3, r2
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	4413      	add	r3, r2
 80008fc:	3301      	adds	r3, #1
 80008fe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000900:	4413      	add	r3, r2
 8000902:	7819      	ldrb	r1, [r3, #0]
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	1e5a      	subs	r2, r3, #1
 8000908:	4613      	mov	r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	4413      	add	r3, r2
 800090e:	3301      	adds	r3, #1
 8000910:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000912:	4413      	add	r3, r2
 8000914:	084a      	lsrs	r2, r1, #1
 8000916:	b2d2      	uxtb	r2, r2
 8000918:	701a      	strb	r2, [r3, #0]
			*((buffer+2)+(i-1)*3) /= 2;
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	1e5a      	subs	r2, r3, #1
 800091e:	4613      	mov	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	3302      	adds	r3, #2
 8000926:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000928:	4413      	add	r3, r2
 800092a:	7819      	ldrb	r1, [r3, #0]
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	1e5a      	subs	r2, r3, #1
 8000930:	4613      	mov	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	4413      	add	r3, r2
 8000936:	3302      	adds	r3, #2
 8000938:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800093a:	4413      	add	r3, r2
 800093c:	084a      	lsrs	r2, r1, #1
 800093e:	b2d2      	uxtb	r2, r2
 8000940:	701a      	strb	r2, [r3, #0]
		}

		if(i<(lenght+2) && i>1){
 8000942:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	429a      	cmp	r2, r3
 800094c:	db3e      	blt.n	80009cc <starfall+0x1b6>
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d93b      	bls.n	80009cc <starfall+0x1b6>
			*((buffer+0)+(i-2)*3) /= 2;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	1e9a      	subs	r2, r3, #2
 8000958:	4613      	mov	r3, r2
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	4413      	add	r3, r2
 800095e:	461a      	mov	r2, r3
 8000960:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000962:	4413      	add	r3, r2
 8000964:	7819      	ldrb	r1, [r3, #0]
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	1e9a      	subs	r2, r3, #2
 800096a:	4613      	mov	r3, r2
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	4413      	add	r3, r2
 8000970:	461a      	mov	r2, r3
 8000972:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000974:	4413      	add	r3, r2
 8000976:	084a      	lsrs	r2, r1, #1
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	701a      	strb	r2, [r3, #0]
			*((buffer+1)+(i-2)*3) /= 2;
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	1e9a      	subs	r2, r3, #2
 8000980:	4613      	mov	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	3301      	adds	r3, #1
 8000988:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800098a:	4413      	add	r3, r2
 800098c:	7819      	ldrb	r1, [r3, #0]
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	1e9a      	subs	r2, r3, #2
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	3301      	adds	r3, #1
 800099a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800099c:	4413      	add	r3, r2
 800099e:	084a      	lsrs	r2, r1, #1
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	701a      	strb	r2, [r3, #0]
			*((buffer+2)+(i-2)*3) /= 2;
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	1e9a      	subs	r2, r3, #2
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	3302      	adds	r3, #2
 80009b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80009b2:	4413      	add	r3, r2
 80009b4:	7819      	ldrb	r1, [r3, #0]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	1e9a      	subs	r2, r3, #2
 80009ba:	4613      	mov	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4413      	add	r3, r2
 80009c0:	3302      	adds	r3, #2
 80009c2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80009c4:	4413      	add	r3, r2
 80009c6:	084a      	lsrs	r2, r1, #1
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	701a      	strb	r2, [r3, #0]
		}
		if(i>2){
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d91d      	bls.n	8000a0e <starfall+0x1f8>
			*((buffer+0)+(i-3)*3) = 0;
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	1eda      	subs	r2, r3, #3
 80009d6:	4613      	mov	r3, r2
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4413      	add	r3, r2
 80009dc:	461a      	mov	r2, r3
 80009de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80009e0:	4413      	add	r3, r2
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
			*((buffer+1)+(i-3)*3) = 0;
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	1eda      	subs	r2, r3, #3
 80009ea:	4613      	mov	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	4413      	add	r3, r2
 80009f0:	3301      	adds	r3, #1
 80009f2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80009f4:	4413      	add	r3, r2
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
			*((buffer+2)+(i-3)*3) = 0;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	1eda      	subs	r2, r3, #3
 80009fe:	4613      	mov	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4413      	add	r3, r2
 8000a04:	3302      	adds	r3, #2
 8000a06:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000a08:	4413      	add	r3, r2
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
		}

		if(type_run == 0){
 8000a0e:	f997 3074 	ldrsb.w	r3, [r7, #116]	@ 0x74
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d110      	bne.n	8000a38 <starfall+0x222>
			sendData(hspix,buffer, lenght);
 8000a16:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000a1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8000a1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a1e:	9312      	str	r3, [sp, #72]	@ 0x48
 8000a20:	4668      	mov	r0, sp
 8000a22:	f107 0320 	add.w	r3, r7, #32
 8000a26:	2248      	movs	r2, #72	@ 0x48
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f003 f81a 	bl	8003a62 <memcpy>
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a34:	f7ff fd9c 	bl	8000570 <sendData>
		}
		if(type_run == 1){
 8000a38:	f997 3074 	ldrsb.w	r3, [r7, #116]	@ 0x74
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d110      	bne.n	8000a62 <starfall+0x24c>
			sendReverseData(hspix,buffer, lenght);
 8000a40:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000a44:	9313      	str	r3, [sp, #76]	@ 0x4c
 8000a46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a48:	9312      	str	r3, [sp, #72]	@ 0x48
 8000a4a:	4668      	mov	r0, sp
 8000a4c:	f107 0320 	add.w	r3, r7, #32
 8000a50:	2248      	movs	r2, #72	@ 0x48
 8000a52:	4619      	mov	r1, r3
 8000a54:	f003 f805 	bl	8003a62 <memcpy>
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a5e:	f7ff fde3 	bl	8000628 <sendReverseData>
	for(uint8_t i = 0; i < lenght+3; i++) {
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	3301      	adds	r3, #1
 8000a66:	71fb      	strb	r3, [r7, #7]
 8000a68:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000a6c:	1c9a      	adds	r2, r3, #2
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	f6bf aeff 	bge.w	8000874 <starfall+0x5e>
		}

	}
	HAL_Delay(DELAY);
 8000a76:	2096      	movs	r0, #150	@ 0x96
 8000a78:	f001 fcc2 	bl	8002400 <HAL_Delay>
	memset(buffer, 0, lenght*3);
 8000a7c:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	461a      	mov	r2, r3
 8000a88:	2100      	movs	r1, #0
 8000a8a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000a8c:	f002 ff6d 	bl	800396a <memset>
	sendData(hspix,buffer, lenght);
 8000a90:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000a94:	9313      	str	r3, [sp, #76]	@ 0x4c
 8000a96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a98:	9312      	str	r3, [sp, #72]	@ 0x48
 8000a9a:	4668      	mov	r0, sp
 8000a9c:	f107 0320 	add.w	r3, r7, #32
 8000aa0:	2248      	movs	r2, #72	@ 0x48
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f002 ffdd 	bl	8003a62 <memcpy>
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aae:	f7ff fd5f 	bl	8000570 <sendData>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000abc:	b004      	add	sp, #16
 8000abe:	4770      	bx	lr

08000ac0 <focusLens>:

void focusLens(SPI_HandleTypeDef hspix, uint8_t* buffer, uint8_t lenght, uint8_t LUX, uint8_t lens_point, int8_t type_run){
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b096      	sub	sp, #88	@ 0x58
 8000ac6:	af14      	add	r7, sp, #80	@ 0x50
 8000ac8:	f107 0c10 	add.w	ip, r7, #16
 8000acc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// 	smooth accumulation on the lens_point  followed by soft overfeeding
	uint8_t data[]={
				rand()%LUX,
 8000ad0:	f002 fe08 	bl	80036e4 <rand>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000ada:	fb92 f1f3 	sdiv	r1, r2, r3
 8000ade:	fb01 f303 	mul.w	r3, r1, r3
 8000ae2:	1ad3      	subs	r3, r2, r3
	uint8_t data[]={
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	703b      	strb	r3, [r7, #0]
				rand()%LUX,
 8000ae8:	f002 fdfc 	bl	80036e4 <rand>
 8000aec:	4602      	mov	r2, r0
 8000aee:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000af2:	fb92 f1f3 	sdiv	r1, r2, r3
 8000af6:	fb01 f303 	mul.w	r3, r1, r3
 8000afa:	1ad3      	subs	r3, r2, r3
	uint8_t data[]={
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	707b      	strb	r3, [r7, #1]
				rand()%LUX,
 8000b00:	f002 fdf0 	bl	80036e4 <rand>
 8000b04:	4602      	mov	r2, r0
 8000b06:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000b0a:	fb92 f1f3 	sdiv	r1, r2, r3
 8000b0e:	fb01 f303 	mul.w	r3, r1, r3
 8000b12:	1ad3      	subs	r3, r2, r3
	uint8_t data[]={
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	70bb      	strb	r3, [r7, #2]
				};

	for(uint8_t j = 0 ; j<LENSINPUT ; j++){
 8000b18:	2300      	movs	r3, #0
 8000b1a:	71fb      	strb	r3, [r7, #7]
 8000b1c:	e0e9      	b.n	8000cf2 <focusLens+0x232>
		for(uint8_t i = 0 ; i < lens_point -1; i++){
 8000b1e:	2300      	movs	r3, #0
 8000b20:	71bb      	strb	r3, [r7, #6]
 8000b22:	e06b      	b.n	8000bfc <focusLens+0x13c>
			*((buffer+0)+i*3)=data[0]/LENSINPUT*2;
 8000b24:	7839      	ldrb	r1, [r7, #0]
 8000b26:	79ba      	ldrb	r2, [r7, #6]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4413      	add	r3, r2
 8000b2e:	461a      	mov	r2, r3
 8000b30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000b32:	4413      	add	r3, r2
 8000b34:	004a      	lsls	r2, r1, #1
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	701a      	strb	r2, [r3, #0]
			*((buffer+1)+i*3)=data[1]/LENSINPUT*2;
 8000b3a:	7879      	ldrb	r1, [r7, #1]
 8000b3c:	79ba      	ldrb	r2, [r7, #6]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	4413      	add	r3, r2
 8000b44:	3301      	adds	r3, #1
 8000b46:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000b48:	4413      	add	r3, r2
 8000b4a:	004a      	lsls	r2, r1, #1
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	701a      	strb	r2, [r3, #0]
			*((buffer+2)+i*3)=data[2]/LENSINPUT*2;
 8000b50:	78b9      	ldrb	r1, [r7, #2]
 8000b52:	79ba      	ldrb	r2, [r7, #6]
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000b5e:	4413      	add	r3, r2
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	701a      	strb	r2, [r3, #0]
			if(type_run == 0){
 8000b66:	f997 3078 	ldrsb.w	r3, [r7, #120]	@ 0x78
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d110      	bne.n	8000b90 <focusLens+0xd0>
				sendData(hspix,buffer, lenght);
 8000b6e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000b72:	9313      	str	r3, [sp, #76]	@ 0x4c
 8000b74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000b76:	9312      	str	r3, [sp, #72]	@ 0x48
 8000b78:	4668      	mov	r0, sp
 8000b7a:	f107 0320 	add.w	r3, r7, #32
 8000b7e:	2248      	movs	r2, #72	@ 0x48
 8000b80:	4619      	mov	r1, r3
 8000b82:	f002 ff6e 	bl	8003a62 <memcpy>
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b8c:	f7ff fcf0 	bl	8000570 <sendData>
			}
			if(type_run == 1){
 8000b90:	f997 3078 	ldrsb.w	r3, [r7, #120]	@ 0x78
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d110      	bne.n	8000bba <focusLens+0xfa>
				sendReverseData(hspix,buffer, lenght);
 8000b98:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000b9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8000b9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000ba0:	9312      	str	r3, [sp, #72]	@ 0x48
 8000ba2:	4668      	mov	r0, sp
 8000ba4:	f107 0320 	add.w	r3, r7, #32
 8000ba8:	2248      	movs	r2, #72	@ 0x48
 8000baa:	4619      	mov	r1, r3
 8000bac:	f002 ff59 	bl	8003a62 <memcpy>
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bb6:	f7ff fd37 	bl	8000628 <sendReverseData>
			}
			*((buffer+0)+i*3)=0;
 8000bba:	79ba      	ldrb	r2, [r7, #6]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	4413      	add	r3, r2
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000bc6:	4413      	add	r3, r2
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
			*((buffer+1)+i*3)=0;
 8000bcc:	79ba      	ldrb	r2, [r7, #6]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000bd8:	4413      	add	r3, r2
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
			*((buffer+2)+i*3)=0;
 8000bde:	79ba      	ldrb	r2, [r7, #6]
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000bea:	4413      	add	r3, r2
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
			HAL_Delay(DELAY/2);
 8000bf0:	204b      	movs	r0, #75	@ 0x4b
 8000bf2:	f001 fc05 	bl	8002400 <HAL_Delay>
		for(uint8_t i = 0 ; i < lens_point -1; i++){
 8000bf6:	79bb      	ldrb	r3, [r7, #6]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	71bb      	strb	r3, [r7, #6]
 8000bfc:	79ba      	ldrb	r2, [r7, #6]
 8000bfe:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000c02:	3b01      	subs	r3, #1
 8000c04:	429a      	cmp	r2, r3
 8000c06:	db8d      	blt.n	8000b24 <focusLens+0x64>
		}
		*((buffer+0)+(lens_point-1)*3)+=data[0]/LENSINPUT;
 8000c08:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000c0c:	1e5a      	subs	r2, r3, #1
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	461a      	mov	r2, r3
 8000c16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000c18:	4413      	add	r3, r2
 8000c1a:	7818      	ldrb	r0, [r3, #0]
 8000c1c:	7839      	ldrb	r1, [r7, #0]
 8000c1e:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000c22:	1e5a      	subs	r2, r3, #1
 8000c24:	4613      	mov	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4413      	add	r3, r2
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000c2e:	4413      	add	r3, r2
 8000c30:	1842      	adds	r2, r0, r1
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	701a      	strb	r2, [r3, #0]
		*((buffer+1)+(lens_point-1)*3)+=data[1]/LENSINPUT;
 8000c36:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000c3a:	1e5a      	subs	r2, r3, #1
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	3301      	adds	r3, #1
 8000c44:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000c46:	4413      	add	r3, r2
 8000c48:	7818      	ldrb	r0, [r3, #0]
 8000c4a:	7879      	ldrb	r1, [r7, #1]
 8000c4c:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000c50:	1e5a      	subs	r2, r3, #1
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	3301      	adds	r3, #1
 8000c5a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000c5c:	4413      	add	r3, r2
 8000c5e:	1842      	adds	r2, r0, r1
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	701a      	strb	r2, [r3, #0]
		*((buffer+2)+(lens_point-1)*3)+=data[2]/LENSINPUT;
 8000c64:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000c68:	1e5a      	subs	r2, r3, #1
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	3302      	adds	r3, #2
 8000c72:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000c74:	4413      	add	r3, r2
 8000c76:	7818      	ldrb	r0, [r3, #0]
 8000c78:	78b9      	ldrb	r1, [r7, #2]
 8000c7a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000c7e:	1e5a      	subs	r2, r3, #1
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	3302      	adds	r3, #2
 8000c88:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000c8a:	4413      	add	r3, r2
 8000c8c:	1842      	adds	r2, r0, r1
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	701a      	strb	r2, [r3, #0]
		if(type_run == 0){
 8000c92:	f997 3078 	ldrsb.w	r3, [r7, #120]	@ 0x78
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d110      	bne.n	8000cbc <focusLens+0x1fc>
			sendData(hspix,buffer, lenght);
 8000c9a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000c9e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8000ca0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000ca2:	9312      	str	r3, [sp, #72]	@ 0x48
 8000ca4:	4668      	mov	r0, sp
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	2248      	movs	r2, #72	@ 0x48
 8000cac:	4619      	mov	r1, r3
 8000cae:	f002 fed8 	bl	8003a62 <memcpy>
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cb8:	f7ff fc5a 	bl	8000570 <sendData>
		}
		if(type_run == 1){
 8000cbc:	f997 3078 	ldrsb.w	r3, [r7, #120]	@ 0x78
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d110      	bne.n	8000ce6 <focusLens+0x226>
			sendReverseData(hspix,buffer, lenght);
 8000cc4:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000cc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8000cca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000ccc:	9312      	str	r3, [sp, #72]	@ 0x48
 8000cce:	4668      	mov	r0, sp
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	2248      	movs	r2, #72	@ 0x48
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f002 fec3 	bl	8003a62 <memcpy>
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce2:	f7ff fca1 	bl	8000628 <sendReverseData>
		}
		HAL_Delay(DELAY);
 8000ce6:	2096      	movs	r0, #150	@ 0x96
 8000ce8:	f001 fb8a 	bl	8002400 <HAL_Delay>
	for(uint8_t j = 0 ; j<LENSINPUT ; j++){
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	71fb      	strb	r3, [r7, #7]
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f43f af12 	beq.w	8000b1e <focusLens+0x5e>
	}

	for(uint8_t j=0; j<lenght; j++){
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	717b      	strb	r3, [r7, #5]
 8000cfe:	e141      	b.n	8000f84 <focusLens+0x4c4>
		for(uint8_t i = lens_point; i<lenght ; i++){
 8000d00:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000d04:	713b      	strb	r3, [r7, #4]
 8000d06:	e092      	b.n	8000e2e <focusLens+0x36e>
			if(*((buffer+0)+i*3)<*((buffer+0)+(i-1)*3))
 8000d08:	793a      	ldrb	r2, [r7, #4]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	461a      	mov	r2, r3
 8000d12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d14:	4413      	add	r3, r2
 8000d16:	7819      	ldrb	r1, [r3, #0]
 8000d18:	793b      	ldrb	r3, [r7, #4]
 8000d1a:	1e5a      	subs	r2, r3, #1
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	461a      	mov	r2, r3
 8000d24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d26:	4413      	add	r3, r2
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4299      	cmp	r1, r3
 8000d2c:	d21c      	bcs.n	8000d68 <focusLens+0x2a8>
				*((buffer+0)+i*3)+=*((buffer+0)+(i-1)*3)/2;
 8000d2e:	793a      	ldrb	r2, [r7, #4]
 8000d30:	4613      	mov	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	461a      	mov	r2, r3
 8000d38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d3a:	4413      	add	r3, r2
 8000d3c:	7818      	ldrb	r0, [r3, #0]
 8000d3e:	793b      	ldrb	r3, [r7, #4]
 8000d40:	1e5a      	subs	r2, r3, #1
 8000d42:	4613      	mov	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	4413      	add	r3, r2
 8000d48:	461a      	mov	r2, r3
 8000d4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d4c:	4413      	add	r3, r2
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	085b      	lsrs	r3, r3, #1
 8000d52:	b2d9      	uxtb	r1, r3
 8000d54:	793a      	ldrb	r2, [r7, #4]
 8000d56:	4613      	mov	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	4413      	add	r3, r2
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d60:	4413      	add	r3, r2
 8000d62:	1842      	adds	r2, r0, r1
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	701a      	strb	r2, [r3, #0]
			if(*((buffer+1)+i*3)<*((buffer+1)+(i-1)*3))
 8000d68:	793a      	ldrb	r2, [r7, #4]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	3301      	adds	r3, #1
 8000d72:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000d74:	4413      	add	r3, r2
 8000d76:	7819      	ldrb	r1, [r3, #0]
 8000d78:	793b      	ldrb	r3, [r7, #4]
 8000d7a:	1e5a      	subs	r2, r3, #1
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4413      	add	r3, r2
 8000d82:	3301      	adds	r3, #1
 8000d84:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000d86:	4413      	add	r3, r2
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	d21c      	bcs.n	8000dc8 <focusLens+0x308>
				*((buffer+1)+i*3)+=*((buffer+1)+(i-1)*3)/2;
 8000d8e:	793a      	ldrb	r2, [r7, #4]
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	3301      	adds	r3, #1
 8000d98:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000d9a:	4413      	add	r3, r2
 8000d9c:	7818      	ldrb	r0, [r3, #0]
 8000d9e:	793b      	ldrb	r3, [r7, #4]
 8000da0:	1e5a      	subs	r2, r3, #1
 8000da2:	4613      	mov	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4413      	add	r3, r2
 8000da8:	3301      	adds	r3, #1
 8000daa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000dac:	4413      	add	r3, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	085b      	lsrs	r3, r3, #1
 8000db2:	b2d9      	uxtb	r1, r3
 8000db4:	793a      	ldrb	r2, [r7, #4]
 8000db6:	4613      	mov	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	4413      	add	r3, r2
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000dc0:	4413      	add	r3, r2
 8000dc2:	1842      	adds	r2, r0, r1
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	701a      	strb	r2, [r3, #0]
			if(*((buffer+2)+i*3)<*((buffer+2)+(i-1)*3))
 8000dc8:	793a      	ldrb	r2, [r7, #4]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4413      	add	r3, r2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000dd4:	4413      	add	r3, r2
 8000dd6:	7819      	ldrb	r1, [r3, #0]
 8000dd8:	793b      	ldrb	r3, [r7, #4]
 8000dda:	1e5a      	subs	r2, r3, #1
 8000ddc:	4613      	mov	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4413      	add	r3, r2
 8000de2:	3302      	adds	r3, #2
 8000de4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000de6:	4413      	add	r3, r2
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4299      	cmp	r1, r3
 8000dec:	d21c      	bcs.n	8000e28 <focusLens+0x368>
				*((buffer+2)+i*3)+=*((buffer+2)+(i-1)*3)/2;
 8000dee:	793a      	ldrb	r2, [r7, #4]
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	3302      	adds	r3, #2
 8000df8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000dfa:	4413      	add	r3, r2
 8000dfc:	7818      	ldrb	r0, [r3, #0]
 8000dfe:	793b      	ldrb	r3, [r7, #4]
 8000e00:	1e5a      	subs	r2, r3, #1
 8000e02:	4613      	mov	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4413      	add	r3, r2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000e0c:	4413      	add	r3, r2
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	085b      	lsrs	r3, r3, #1
 8000e12:	b2d9      	uxtb	r1, r3
 8000e14:	793a      	ldrb	r2, [r7, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000e20:	4413      	add	r3, r2
 8000e22:	1842      	adds	r2, r0, r1
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = lens_point; i<lenght ; i++){
 8000e28:	793b      	ldrb	r3, [r7, #4]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	713b      	strb	r3, [r7, #4]
 8000e2e:	793a      	ldrb	r2, [r7, #4]
 8000e30:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000e34:	429a      	cmp	r2, r3
 8000e36:	f4ff af67 	bcc.w	8000d08 <focusLens+0x248>
		}

		if(type_run == 0){
 8000e3a:	f997 3078 	ldrsb.w	r3, [r7, #120]	@ 0x78
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d110      	bne.n	8000e64 <focusLens+0x3a4>
			sendData(hspix,buffer, lenght);
 8000e42:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000e46:	9313      	str	r3, [sp, #76]	@ 0x4c
 8000e48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e4a:	9312      	str	r3, [sp, #72]	@ 0x48
 8000e4c:	4668      	mov	r0, sp
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	2248      	movs	r2, #72	@ 0x48
 8000e54:	4619      	mov	r1, r3
 8000e56:	f002 fe04 	bl	8003a62 <memcpy>
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e60:	f7ff fb86 	bl	8000570 <sendData>
		}
		if(type_run == 1){
 8000e64:	f997 3078 	ldrsb.w	r3, [r7, #120]	@ 0x78
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d110      	bne.n	8000e8e <focusLens+0x3ce>
			sendReverseData(hspix,buffer, lenght);
 8000e6c:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000e70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8000e72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e74:	9312      	str	r3, [sp, #72]	@ 0x48
 8000e76:	4668      	mov	r0, sp
 8000e78:	f107 0320 	add.w	r3, r7, #32
 8000e7c:	2248      	movs	r2, #72	@ 0x48
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f002 fdef 	bl	8003a62 <memcpy>
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e8a:	f7ff fbcd 	bl	8000628 <sendReverseData>
		}
		HAL_Delay(DELAY/5);
 8000e8e:	201e      	movs	r0, #30
 8000e90:	f001 fab6 	bl	8002400 <HAL_Delay>
		for(uint8_t i=lens_point-1; i<=j; i++){
 8000e94:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	70fb      	strb	r3, [r7, #3]
 8000e9c:	e03e      	b.n	8000f1c <focusLens+0x45c>
			*((buffer+0)+(i-1)*3)/=4;
 8000e9e:	78fb      	ldrb	r3, [r7, #3]
 8000ea0:	1e5a      	subs	r2, r3, #1
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000eac:	4413      	add	r3, r2
 8000eae:	7819      	ldrb	r1, [r3, #0]
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	1e5a      	subs	r2, r3, #1
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	461a      	mov	r2, r3
 8000ebc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000ebe:	4413      	add	r3, r2
 8000ec0:	088a      	lsrs	r2, r1, #2
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	701a      	strb	r2, [r3, #0]
			*((buffer+1)+(i-1)*3)/=4;
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	1e5a      	subs	r2, r3, #1
 8000eca:	4613      	mov	r3, r2
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	4413      	add	r3, r2
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000ed4:	4413      	add	r3, r2
 8000ed6:	7819      	ldrb	r1, [r3, #0]
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	1e5a      	subs	r2, r3, #1
 8000edc:	4613      	mov	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000ee6:	4413      	add	r3, r2
 8000ee8:	088a      	lsrs	r2, r1, #2
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
			*((buffer+2)+(i-1)*3)/=4;
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	1e5a      	subs	r2, r3, #1
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000efc:	4413      	add	r3, r2
 8000efe:	7819      	ldrb	r1, [r3, #0]
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	1e5a      	subs	r2, r3, #1
 8000f04:	4613      	mov	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000f0e:	4413      	add	r3, r2
 8000f10:	088a      	lsrs	r2, r1, #2
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=lens_point-1; i<=j; i++){
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	70fb      	strb	r3, [r7, #3]
 8000f1c:	78fa      	ldrb	r2, [r7, #3]
 8000f1e:	797b      	ldrb	r3, [r7, #5]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d9bc      	bls.n	8000e9e <focusLens+0x3de>
		}
		if(type_run == 0){
 8000f24:	f997 3078 	ldrsb.w	r3, [r7, #120]	@ 0x78
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d110      	bne.n	8000f4e <focusLens+0x48e>
			sendData(hspix,buffer, lenght);
 8000f2c:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000f30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8000f32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f34:	9312      	str	r3, [sp, #72]	@ 0x48
 8000f36:	4668      	mov	r0, sp
 8000f38:	f107 0320 	add.w	r3, r7, #32
 8000f3c:	2248      	movs	r2, #72	@ 0x48
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f002 fd8f 	bl	8003a62 <memcpy>
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f4a:	f7ff fb11 	bl	8000570 <sendData>
		}
		if(type_run == 1){
 8000f4e:	f997 3078 	ldrsb.w	r3, [r7, #120]	@ 0x78
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d110      	bne.n	8000f78 <focusLens+0x4b8>
			sendReverseData(hspix,buffer, lenght);
 8000f56:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000f5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8000f5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8000f60:	4668      	mov	r0, sp
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	2248      	movs	r2, #72	@ 0x48
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f002 fd7a 	bl	8003a62 <memcpy>
 8000f6e:	f107 0310 	add.w	r3, r7, #16
 8000f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f74:	f7ff fb58 	bl	8000628 <sendReverseData>
		}
		HAL_Delay(DELAY/10);
 8000f78:	200f      	movs	r0, #15
 8000f7a:	f001 fa41 	bl	8002400 <HAL_Delay>
	for(uint8_t j=0; j<lenght; j++){
 8000f7e:	797b      	ldrb	r3, [r7, #5]
 8000f80:	3301      	adds	r3, #1
 8000f82:	717b      	strb	r3, [r7, #5]
 8000f84:	797a      	ldrb	r2, [r7, #5]
 8000f86:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	f4ff aeb8 	bcc.w	8000d00 <focusLens+0x240>
	}


		HAL_Delay(DELAY);
 8000f90:	2096      	movs	r0, #150	@ 0x96
 8000f92:	f001 fa35 	bl	8002400 <HAL_Delay>
		memset(buffer, 0, lenght*3);
 8000f96:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000fa6:	f002 fce0 	bl	800396a <memset>
		sendData(hspix,buffer, lenght);
 8000faa:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000fae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8000fb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fb2:	9312      	str	r3, [sp, #72]	@ 0x48
 8000fb4:	4668      	mov	r0, sp
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	2248      	movs	r2, #72	@ 0x48
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f002 fd50 	bl	8003a62 <memcpy>
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc8:	f7ff fad2 	bl	8000570 <sendData>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fd6:	b004      	add	sp, #16
 8000fd8:	4770      	bx	lr

08000fda <smoothAccumulation>:

void smoothAccumulation(SPI_HandleTypeDef hspix, uint8_t* buffer, uint8_t lenght, uint8_t LUX, int8_t type_run){
 8000fda:	b084      	sub	sp, #16
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b098      	sub	sp, #96	@ 0x60
 8000fe0:	af14      	add	r7, sp, #80	@ 0x50
 8000fe2:	f107 0c18 	add.w	ip, r7, #24
 8000fe6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//smooth accumulation until the end
	uint8_t data[]={
					rand()%LUX,
 8000fea:	f002 fb7b 	bl	80036e4 <rand>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000ff4:	fb92 f1f3 	sdiv	r1, r2, r3
 8000ff8:	fb01 f303 	mul.w	r3, r1, r3
 8000ffc:	1ad3      	subs	r3, r2, r3
	uint8_t data[]={
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	703b      	strb	r3, [r7, #0]
					rand()%LUX,
 8001002:	f002 fb6f 	bl	80036e4 <rand>
 8001006:	4602      	mov	r2, r0
 8001008:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800100c:	fb92 f1f3 	sdiv	r1, r2, r3
 8001010:	fb01 f303 	mul.w	r3, r1, r3
 8001014:	1ad3      	subs	r3, r2, r3
	uint8_t data[]={
 8001016:	b2db      	uxtb	r3, r3
 8001018:	707b      	strb	r3, [r7, #1]
					rand()%LUX,
 800101a:	f002 fb63 	bl	80036e4 <rand>
 800101e:	4602      	mov	r2, r0
 8001020:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001024:	fb92 f1f3 	sdiv	r1, r2, r3
 8001028:	fb01 f303 	mul.w	r3, r1, r3
 800102c:	1ad3      	subs	r3, r2, r3
	uint8_t data[]={
 800102e:	b2db      	uxtb	r3, r3
 8001030:	70bb      	strb	r3, [r7, #2]
					};

	for(uint8_t i = 0; i< lenght; i++){
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e0a1      	b.n	800117c <smoothAccumulation+0x1a2>
		for(uint8_t k=0;k<LENSINPUT;k++){
 8001038:	2300      	movs	r3, #0
 800103a:	73bb      	strb	r3, [r7, #14]
 800103c:	e097      	b.n	800116e <smoothAccumulation+0x194>
			for(uint8_t j=0; j<lenght-i; j++){
 800103e:	2300      	movs	r3, #0
 8001040:	737b      	strb	r3, [r7, #13]
 8001042:	e089      	b.n	8001158 <smoothAccumulation+0x17e>
				//set next LED, and remove last

				*((buffer+0)+j*3)+=data[0]/LENSINPUT;
 8001044:	7b7a      	ldrb	r2, [r7, #13]
 8001046:	4613      	mov	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4413      	add	r3, r2
 800104c:	461a      	mov	r2, r3
 800104e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001050:	4413      	add	r3, r2
 8001052:	7818      	ldrb	r0, [r3, #0]
 8001054:	7839      	ldrb	r1, [r7, #0]
 8001056:	7b7a      	ldrb	r2, [r7, #13]
 8001058:	4613      	mov	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	4413      	add	r3, r2
 800105e:	461a      	mov	r2, r3
 8001060:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001062:	4413      	add	r3, r2
 8001064:	1842      	adds	r2, r0, r1
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]
				*((buffer+1)+j*3)+=data[1]/LENSINPUT;
 800106a:	7b7a      	ldrb	r2, [r7, #13]
 800106c:	4613      	mov	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	3301      	adds	r3, #1
 8001074:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001076:	4413      	add	r3, r2
 8001078:	7818      	ldrb	r0, [r3, #0]
 800107a:	7879      	ldrb	r1, [r7, #1]
 800107c:	7b7a      	ldrb	r2, [r7, #13]
 800107e:	4613      	mov	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4413      	add	r3, r2
 8001084:	3301      	adds	r3, #1
 8001086:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001088:	4413      	add	r3, r2
 800108a:	1842      	adds	r2, r0, r1
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
				*((buffer+2)+j*3)+=data[2]/LENSINPUT;
 8001090:	7b7a      	ldrb	r2, [r7, #13]
 8001092:	4613      	mov	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	3302      	adds	r3, #2
 800109a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800109c:	4413      	add	r3, r2
 800109e:	7818      	ldrb	r0, [r3, #0]
 80010a0:	78b9      	ldrb	r1, [r7, #2]
 80010a2:	7b7a      	ldrb	r2, [r7, #13]
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	3302      	adds	r3, #2
 80010ac:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80010ae:	4413      	add	r3, r2
 80010b0:	1842      	adds	r2, r0, r1
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]
				if(j>0){
 80010b6:	7b7b      	ldrb	r3, [r7, #13]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d01d      	beq.n	80010f8 <smoothAccumulation+0x11e>
				*((buffer+0)+(j-1)*3)=0;
 80010bc:	7b7b      	ldrb	r3, [r7, #13]
 80010be:	1e5a      	subs	r2, r3, #1
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	461a      	mov	r2, r3
 80010c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010ca:	4413      	add	r3, r2
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
				*((buffer+1)+(j-1)*3)=0;
 80010d0:	7b7b      	ldrb	r3, [r7, #13]
 80010d2:	1e5a      	subs	r2, r3, #1
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	3301      	adds	r3, #1
 80010dc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80010de:	4413      	add	r3, r2
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
				*((buffer+2)+(j-1)*3)=0;
 80010e4:	7b7b      	ldrb	r3, [r7, #13]
 80010e6:	1e5a      	subs	r2, r3, #1
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	3302      	adds	r3, #2
 80010f0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80010f2:	4413      	add	r3, r2
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
				}
				if(type_run == 0){
 80010f8:	f997 307c 	ldrsb.w	r3, [r7, #124]	@ 0x7c
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d110      	bne.n	8001122 <smoothAccumulation+0x148>
					sendData(hspix, buffer, lenght);
 8001100:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001104:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001106:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001108:	9312      	str	r3, [sp, #72]	@ 0x48
 800110a:	4668      	mov	r0, sp
 800110c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001110:	2248      	movs	r2, #72	@ 0x48
 8001112:	4619      	mov	r1, r3
 8001114:	f002 fca5 	bl	8003a62 <memcpy>
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800111e:	f7ff fa27 	bl	8000570 <sendData>
				}
				if(type_run == 1){
 8001122:	f997 307c 	ldrsb.w	r3, [r7, #124]	@ 0x7c
 8001126:	2b01      	cmp	r3, #1
 8001128:	d110      	bne.n	800114c <smoothAccumulation+0x172>
					sendReverseData(hspix, buffer, lenght);
 800112a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800112e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001130:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001132:	9312      	str	r3, [sp, #72]	@ 0x48
 8001134:	4668      	mov	r0, sp
 8001136:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800113a:	2248      	movs	r2, #72	@ 0x48
 800113c:	4619      	mov	r1, r3
 800113e:	f002 fc90 	bl	8003a62 <memcpy>
 8001142:	f107 0318 	add.w	r3, r7, #24
 8001146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001148:	f7ff fa6e 	bl	8000628 <sendReverseData>
				}
				HAL_Delay(DELAY/10);
 800114c:	200f      	movs	r0, #15
 800114e:	f001 f957 	bl	8002400 <HAL_Delay>
			for(uint8_t j=0; j<lenght-i; j++){
 8001152:	7b7b      	ldrb	r3, [r7, #13]
 8001154:	3301      	adds	r3, #1
 8001156:	737b      	strb	r3, [r7, #13]
 8001158:	7b7a      	ldrb	r2, [r7, #13]
 800115a:	f897 1074 	ldrb.w	r1, [r7, #116]	@ 0x74
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	1acb      	subs	r3, r1, r3
 8001162:	429a      	cmp	r2, r3
 8001164:	f6ff af6e 	blt.w	8001044 <smoothAccumulation+0x6a>
		for(uint8_t k=0;k<LENSINPUT;k++){
 8001168:	7bbb      	ldrb	r3, [r7, #14]
 800116a:	3301      	adds	r3, #1
 800116c:	73bb      	strb	r3, [r7, #14]
 800116e:	7bbb      	ldrb	r3, [r7, #14]
 8001170:	2b00      	cmp	r3, #0
 8001172:	f43f af64 	beq.w	800103e <smoothAccumulation+0x64>
	for(uint8_t i = 0; i< lenght; i++){
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	3301      	adds	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001182:	429a      	cmp	r2, r3
 8001184:	f4ff af58 	bcc.w	8001038 <smoothAccumulation+0x5e>
			}
		}
	}
	//reverse action
	for(int i=lenght; i>0; i--){
 8001188:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	e0c2      	b.n	8001316 <smoothAccumulation+0x33c>
		for(uint8_t k=0;k<LENSINPUT;k++){
 8001190:	2300      	movs	r3, #0
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	e0b8      	b.n	8001308 <smoothAccumulation+0x32e>
				for(uint8_t j=i; j<=lenght; j++){
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	71bb      	strb	r3, [r7, #6]
 800119a:	e0ac      	b.n	80012f6 <smoothAccumulation+0x31c>
					if(j<lenght){
 800119c:	79ba      	ldrb	r2, [r7, #6]
 800119e:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d238      	bcs.n	8001218 <smoothAccumulation+0x23e>
						*((buffer+0)+j*3)+=data[0]/LENSINPUT;
 80011a6:	79ba      	ldrb	r2, [r7, #6]
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	461a      	mov	r2, r3
 80011b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011b2:	4413      	add	r3, r2
 80011b4:	7818      	ldrb	r0, [r3, #0]
 80011b6:	7839      	ldrb	r1, [r7, #0]
 80011b8:	79ba      	ldrb	r2, [r7, #6]
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011c4:	4413      	add	r3, r2
 80011c6:	1842      	adds	r2, r0, r1
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	701a      	strb	r2, [r3, #0]
					*((buffer+1)+j*3)+=data[1]/LENSINPUT;
 80011cc:	79ba      	ldrb	r2, [r7, #6]
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	3301      	adds	r3, #1
 80011d6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80011d8:	4413      	add	r3, r2
 80011da:	7818      	ldrb	r0, [r3, #0]
 80011dc:	7879      	ldrb	r1, [r7, #1]
 80011de:	79ba      	ldrb	r2, [r7, #6]
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	3301      	adds	r3, #1
 80011e8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80011ea:	4413      	add	r3, r2
 80011ec:	1842      	adds	r2, r0, r1
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	701a      	strb	r2, [r3, #0]
					*((buffer+2)+j*3)+=data[2]/LENSINPUT;}
 80011f2:	79ba      	ldrb	r2, [r7, #6]
 80011f4:	4613      	mov	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	3302      	adds	r3, #2
 80011fc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80011fe:	4413      	add	r3, r2
 8001200:	7818      	ldrb	r0, [r3, #0]
 8001202:	78b9      	ldrb	r1, [r7, #2]
 8001204:	79ba      	ldrb	r2, [r7, #6]
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	3302      	adds	r3, #2
 800120e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001210:	4413      	add	r3, r2
 8001212:	1842      	adds	r2, r0, r1
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	701a      	strb	r2, [r3, #0]
					*((buffer+0)+(j-1)*3)-=data[0]/LENSINPUT;
 8001218:	79bb      	ldrb	r3, [r7, #6]
 800121a:	1e5a      	subs	r2, r3, #1
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	461a      	mov	r2, r3
 8001224:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001226:	4413      	add	r3, r2
 8001228:	7818      	ldrb	r0, [r3, #0]
 800122a:	7839      	ldrb	r1, [r7, #0]
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	1e5a      	subs	r2, r3, #1
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	461a      	mov	r2, r3
 8001238:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800123a:	4413      	add	r3, r2
 800123c:	1a42      	subs	r2, r0, r1
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	701a      	strb	r2, [r3, #0]
					*((buffer+1)+(j-1)*3)-=data[1]/LENSINPUT;
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	3301      	adds	r3, #1
 800124e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001250:	4413      	add	r3, r2
 8001252:	7818      	ldrb	r0, [r3, #0]
 8001254:	7879      	ldrb	r1, [r7, #1]
 8001256:	79bb      	ldrb	r3, [r7, #6]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	3301      	adds	r3, #1
 8001262:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001264:	4413      	add	r3, r2
 8001266:	1a42      	subs	r2, r0, r1
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	701a      	strb	r2, [r3, #0]
					*((buffer+2)+(j-1)*3)-=data[2]/LENSINPUT;
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	1e5a      	subs	r2, r3, #1
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	3302      	adds	r3, #2
 8001278:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800127a:	4413      	add	r3, r2
 800127c:	7818      	ldrb	r0, [r3, #0]
 800127e:	78b9      	ldrb	r1, [r7, #2]
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	1e5a      	subs	r2, r3, #1
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	3302      	adds	r3, #2
 800128c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800128e:	4413      	add	r3, r2
 8001290:	1a42      	subs	r2, r0, r1
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	701a      	strb	r2, [r3, #0]
					if(type_run == 0){
 8001296:	f997 307c 	ldrsb.w	r3, [r7, #124]	@ 0x7c
 800129a:	2b00      	cmp	r3, #0
 800129c:	d110      	bne.n	80012c0 <smoothAccumulation+0x2e6>
						sendData(hspix, buffer, lenght);
 800129e:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80012a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80012a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80012a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80012a8:	4668      	mov	r0, sp
 80012aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ae:	2248      	movs	r2, #72	@ 0x48
 80012b0:	4619      	mov	r1, r3
 80012b2:	f002 fbd6 	bl	8003a62 <memcpy>
 80012b6:	f107 0318 	add.w	r3, r7, #24
 80012ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012bc:	f7ff f958 	bl	8000570 <sendData>
					}
					if(type_run == 1){
 80012c0:	f997 307c 	ldrsb.w	r3, [r7, #124]	@ 0x7c
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d110      	bne.n	80012ea <smoothAccumulation+0x310>
						sendReverseData(hspix, buffer, lenght);
 80012c8:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80012cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80012ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80012d0:	9312      	str	r3, [sp, #72]	@ 0x48
 80012d2:	4668      	mov	r0, sp
 80012d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012d8:	2248      	movs	r2, #72	@ 0x48
 80012da:	4619      	mov	r1, r3
 80012dc:	f002 fbc1 	bl	8003a62 <memcpy>
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e6:	f7ff f99f 	bl	8000628 <sendReverseData>
					}
					HAL_Delay(DELAY/10);
 80012ea:	200f      	movs	r0, #15
 80012ec:	f001 f888 	bl	8002400 <HAL_Delay>
				for(uint8_t j=i; j<=lenght; j++){
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	3301      	adds	r3, #1
 80012f4:	71bb      	strb	r3, [r7, #6]
 80012f6:	79ba      	ldrb	r2, [r7, #6]
 80012f8:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f67f af4d 	bls.w	800119c <smoothAccumulation+0x1c2>
		for(uint8_t k=0;k<LENSINPUT;k++){
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	3301      	adds	r3, #1
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f43f af43 	beq.w	8001196 <smoothAccumulation+0x1bc>
	for(int i=lenght; i>0; i--){
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3b01      	subs	r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	f73f af39 	bgt.w	8001190 <smoothAccumulation+0x1b6>

		}


	}
	HAL_Delay(DELAY);
 800131e:	2096      	movs	r0, #150	@ 0x96
 8001320:	f001 f86e 	bl	8002400 <HAL_Delay>
	memset(buffer, 0, lenght*3);
 8001324:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	461a      	mov	r2, r3
 8001330:	2100      	movs	r1, #0
 8001332:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001334:	f002 fb19 	bl	800396a <memset>
	sendData(hspix,buffer, lenght);
 8001338:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800133c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800133e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001340:	9312      	str	r3, [sp, #72]	@ 0x48
 8001342:	4668      	mov	r0, sp
 8001344:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001348:	2248      	movs	r2, #72	@ 0x48
 800134a:	4619      	mov	r1, r3
 800134c:	f002 fb89 	bl	8003a62 <memcpy>
 8001350:	f107 0318 	add.w	r3, r7, #24
 8001354:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001356:	f7ff f90b 	bl	8000570 <sendData>

}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001364:	b004      	add	sp, #16
 8001366:	4770      	bx	lr

08001368 <scannerKnightRider>:

void scannerKnightRider(SPI_HandleTypeDef hspix, uint8_t* buffer, uint8_t lenght, uint8_t LUX, uint8_t points, uint8_t reapets, int8_t type_run){
 8001368:	b084      	sub	sp, #16
 800136a:	b580      	push	{r7, lr}
 800136c:	b09c      	sub	sp, #112	@ 0x70
 800136e:	af14      	add	r7, sp, #80	@ 0x50
 8001370:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 8001374:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t data[]={
				rand()%LUX,
 8001378:	f002 f9b4 	bl	80036e4 <rand>
 800137c:	4602      	mov	r2, r0
 800137e:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8001382:	fb92 f1f3 	sdiv	r1, r2, r3
 8001386:	fb01 f303 	mul.w	r3, r1, r3
 800138a:	1ad3      	subs	r3, r2, r3
	uint8_t data[]={
 800138c:	b2db      	uxtb	r3, r3
 800138e:	733b      	strb	r3, [r7, #12]
				rand()%LUX,
 8001390:	f002 f9a8 	bl	80036e4 <rand>
 8001394:	4602      	mov	r2, r0
 8001396:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800139a:	fb92 f1f3 	sdiv	r1, r2, r3
 800139e:	fb01 f303 	mul.w	r3, r1, r3
 80013a2:	1ad3      	subs	r3, r2, r3
	uint8_t data[]={
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	737b      	strb	r3, [r7, #13]
				rand()%LUX,
 80013a8:	f002 f99c 	bl	80036e4 <rand>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 80013b2:	fb92 f1f3 	sdiv	r1, r2, r3
 80013b6:	fb01 f303 	mul.w	r3, r1, r3
 80013ba:	1ad3      	subs	r3, r2, r3
	uint8_t data[]={
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	73bb      	strb	r3, [r7, #14]
				};
	//start Left LED
	for(uint8_t i = 0; i < points; i++){
 80013c0:	2300      	movs	r3, #0
 80013c2:	77fb      	strb	r3, [r7, #31]
 80013c4:	e0b7      	b.n	8001536 <scannerKnightRider+0x1ce>
		HAL_Delay(DELAY);
 80013c6:	2096      	movs	r0, #150	@ 0x96
 80013c8:	f001 f81a 	bl	8002400 <HAL_Delay>
		*((buffer+0)+i*3) = data[0];
 80013cc:	7ffa      	ldrb	r2, [r7, #31]
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	461a      	mov	r2, r3
 80013d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013da:	4413      	add	r3, r2
 80013dc:	7b3a      	ldrb	r2, [r7, #12]
 80013de:	701a      	strb	r2, [r3, #0]
		*((buffer+1)+i*3) = data[1];
 80013e0:	7ffa      	ldrb	r2, [r7, #31]
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	3301      	adds	r3, #1
 80013ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80013ee:	4413      	add	r3, r2
 80013f0:	7b7a      	ldrb	r2, [r7, #13]
 80013f2:	701a      	strb	r2, [r3, #0]
		*((buffer+2)+i*3) = data[2];
 80013f4:	7ffa      	ldrb	r2, [r7, #31]
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	3302      	adds	r3, #2
 80013fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001402:	4413      	add	r3, r2
 8001404:	7bba      	ldrb	r2, [r7, #14]
 8001406:	701a      	strb	r2, [r3, #0]
		data[0] = *((buffer+0)+i*3);
 8001408:	7ffa      	ldrb	r2, [r7, #31]
 800140a:	4613      	mov	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	461a      	mov	r2, r3
 8001412:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	733b      	strb	r3, [r7, #12]
		data[1] = *((buffer+1)+i*3);
 800141c:	7ffa      	ldrb	r2, [r7, #31]
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	3301      	adds	r3, #1
 8001426:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	737b      	strb	r3, [r7, #13]
		data[2] = *((buffer+2)+i*3);
 8001430:	7ffa      	ldrb	r2, [r7, #31]
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	3302      	adds	r3, #2
 800143a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800143e:	4413      	add	r3, r2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	73bb      	strb	r3, [r7, #14]
		if(i>0)
 8001444:	7ffb      	ldrb	r3, [r7, #31]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d046      	beq.n	80014d8 <scannerKnightRider+0x170>
			for(uint8_t j=i-1;j>=0;j--){
 800144a:	7ffb      	ldrb	r3, [r7, #31]
 800144c:	3b01      	subs	r3, #1
 800144e:	77bb      	strb	r3, [r7, #30]
				*((buffer+0)+(j)*3) /= 2;
 8001450:	7fba      	ldrb	r2, [r7, #30]
 8001452:	4613      	mov	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	461a      	mov	r2, r3
 800145a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800145e:	4413      	add	r3, r2
 8001460:	7819      	ldrb	r1, [r3, #0]
 8001462:	7fba      	ldrb	r2, [r7, #30]
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	461a      	mov	r2, r3
 800146c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001470:	4413      	add	r3, r2
 8001472:	084a      	lsrs	r2, r1, #1
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	701a      	strb	r2, [r3, #0]
				*((buffer+1)+(j)*3) /= 2;
 8001478:	7fba      	ldrb	r2, [r7, #30]
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	3301      	adds	r3, #1
 8001482:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001486:	4413      	add	r3, r2
 8001488:	7819      	ldrb	r1, [r3, #0]
 800148a:	7fba      	ldrb	r2, [r7, #30]
 800148c:	4613      	mov	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	3301      	adds	r3, #1
 8001494:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001498:	4413      	add	r3, r2
 800149a:	084a      	lsrs	r2, r1, #1
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	701a      	strb	r2, [r3, #0]
				*((buffer+2)+(j)*3) /= 2;
 80014a0:	7fba      	ldrb	r2, [r7, #30]
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	3302      	adds	r3, #2
 80014aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80014ae:	4413      	add	r3, r2
 80014b0:	7819      	ldrb	r1, [r3, #0]
 80014b2:	7fba      	ldrb	r2, [r7, #30]
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	3302      	adds	r3, #2
 80014bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80014c0:	4413      	add	r3, r2
 80014c2:	084a      	lsrs	r2, r1, #1
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	701a      	strb	r2, [r3, #0]
				if(j==0)break;
 80014c8:	7fbb      	ldrb	r3, [r7, #30]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <scannerKnightRider+0x16e>
			for(uint8_t j=i-1;j>=0;j--){
 80014ce:	7fbb      	ldrb	r3, [r7, #30]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	77bb      	strb	r3, [r7, #30]
				*((buffer+0)+(j)*3) /= 2;
 80014d4:	e7bc      	b.n	8001450 <scannerKnightRider+0xe8>
				if(j==0)break;
 80014d6:	bf00      	nop
			}

		if(type_run == 0){
 80014d8:	f997 3094 	ldrsb.w	r3, [r7, #148]	@ 0x94
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d111      	bne.n	8001504 <scannerKnightRider+0x19c>
			sendData(hspix,buffer, lenght);
 80014e0:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80014e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80014e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014ea:	9312      	str	r3, [sp, #72]	@ 0x48
 80014ec:	4668      	mov	r0, sp
 80014ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014f2:	2248      	movs	r2, #72	@ 0x48
 80014f4:	4619      	mov	r1, r3
 80014f6:	f002 fab4 	bl	8003a62 <memcpy>
 80014fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001500:	f7ff f836 	bl	8000570 <sendData>
		}
		if(type_run == 1){
 8001504:	f997 3094 	ldrsb.w	r3, [r7, #148]	@ 0x94
 8001508:	2b01      	cmp	r3, #1
 800150a:	d111      	bne.n	8001530 <scannerKnightRider+0x1c8>
			sendReverseData(hspix,buffer, lenght);
 800150c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001510:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001512:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001516:	9312      	str	r3, [sp, #72]	@ 0x48
 8001518:	4668      	mov	r0, sp
 800151a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800151e:	2248      	movs	r2, #72	@ 0x48
 8001520:	4619      	mov	r1, r3
 8001522:	f002 fa9e 	bl	8003a62 <memcpy>
 8001526:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800152a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800152c:	f7ff f87c 	bl	8000628 <sendReverseData>
	for(uint8_t i = 0; i < points; i++){
 8001530:	7ffb      	ldrb	r3, [r7, #31]
 8001532:	3301      	adds	r3, #1
 8001534:	77fb      	strb	r3, [r7, #31]
 8001536:	7ffa      	ldrb	r2, [r7, #31]
 8001538:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800153c:	429a      	cmp	r2, r3
 800153e:	f4ff af42 	bcc.w	80013c6 <scannerKnightRider+0x5e>
		}
	}
	HAL_Delay(DELAY);
 8001542:	2096      	movs	r0, #150	@ 0x96
 8001544:	f000 ff5c 	bl	8002400 <HAL_Delay>

	//loop
	for(int k=0;k<reapets;k++){
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
 800154c:	e240      	b.n	80019d0 <scannerKnightRider+0x668>
		//left to right LED
		for(uint8_t i = points; i < lenght; i++) {
 800154e:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8001552:	75fb      	strb	r3, [r7, #23]
 8001554:	e0bc      	b.n	80016d0 <scannerKnightRider+0x368>
				for(uint8_t j=i;j>=i-points;j--){
 8001556:	7dfb      	ldrb	r3, [r7, #23]
 8001558:	75bb      	strb	r3, [r7, #22]
 800155a:	e07d      	b.n	8001658 <scannerKnightRider+0x2f0>
					uint8_t temp_data[3]={
							*((buffer+0)+(j)*3),
 800155c:	7dba      	ldrb	r2, [r7, #22]
 800155e:	4613      	mov	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	461a      	mov	r2, r3
 8001566:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800156a:	4413      	add	r3, r2
 800156c:	781b      	ldrb	r3, [r3, #0]
					uint8_t temp_data[3]={
 800156e:	723b      	strb	r3, [r7, #8]
							*((buffer+1)+(j)*3),
 8001570:	7dba      	ldrb	r2, [r7, #22]
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	3301      	adds	r3, #1
 800157a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800157e:	4413      	add	r3, r2
 8001580:	781b      	ldrb	r3, [r3, #0]
					uint8_t temp_data[3]={
 8001582:	727b      	strb	r3, [r7, #9]
							*((buffer+2)+(j)*3)
 8001584:	7dba      	ldrb	r2, [r7, #22]
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	3302      	adds	r3, #2
 800158e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001592:	4413      	add	r3, r2
 8001594:	781b      	ldrb	r3, [r3, #0]
					uint8_t temp_data[3]={
 8001596:	72bb      	strb	r3, [r7, #10]
									};
					*((buffer+0)+(j)*3)=*((buffer+0)+(j-1)*3);
 8001598:	7dbb      	ldrb	r3, [r7, #22]
 800159a:	1e5a      	subs	r2, r3, #1
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	461a      	mov	r2, r3
 80015a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015a8:	1899      	adds	r1, r3, r2
 80015aa:	7dba      	ldrb	r2, [r7, #22]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	461a      	mov	r2, r3
 80015b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015b8:	4413      	add	r3, r2
 80015ba:	780a      	ldrb	r2, [r1, #0]
 80015bc:	701a      	strb	r2, [r3, #0]
					*((buffer+1)+(j)*3)=*((buffer+1)+(j-1)*3);
 80015be:	7dbb      	ldrb	r3, [r7, #22]
 80015c0:	1e5a      	subs	r2, r3, #1
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	3301      	adds	r3, #1
 80015ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80015ce:	18d1      	adds	r1, r2, r3
 80015d0:	7dba      	ldrb	r2, [r7, #22]
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	3301      	adds	r3, #1
 80015da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80015de:	4413      	add	r3, r2
 80015e0:	780a      	ldrb	r2, [r1, #0]
 80015e2:	701a      	strb	r2, [r3, #0]
					*((buffer+2)+(j)*3)=*((buffer+2)+(j-1)*3);
 80015e4:	7dbb      	ldrb	r3, [r7, #22]
 80015e6:	1e5a      	subs	r2, r3, #1
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	3302      	adds	r3, #2
 80015f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80015f4:	18d1      	adds	r1, r2, r3
 80015f6:	7dba      	ldrb	r2, [r7, #22]
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	3302      	adds	r3, #2
 8001600:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001604:	4413      	add	r3, r2
 8001606:	780a      	ldrb	r2, [r1, #0]
 8001608:	701a      	strb	r2, [r3, #0]

					*((buffer+0)+(j-1)*3)=temp_data[0];
 800160a:	7dbb      	ldrb	r3, [r7, #22]
 800160c:	1e5a      	subs	r2, r3, #1
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	461a      	mov	r2, r3
 8001616:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800161a:	4413      	add	r3, r2
 800161c:	7a3a      	ldrb	r2, [r7, #8]
 800161e:	701a      	strb	r2, [r3, #0]
					*((buffer+1)+(j-1)*3)=temp_data[1];
 8001620:	7dbb      	ldrb	r3, [r7, #22]
 8001622:	1e5a      	subs	r2, r3, #1
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	3301      	adds	r3, #1
 800162c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001630:	4413      	add	r3, r2
 8001632:	7a7a      	ldrb	r2, [r7, #9]
 8001634:	701a      	strb	r2, [r3, #0]
					*((buffer+2)+(j-1)*3)=temp_data[2];
 8001636:	7dbb      	ldrb	r3, [r7, #22]
 8001638:	1e5a      	subs	r2, r3, #1
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	3302      	adds	r3, #2
 8001642:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001646:	4413      	add	r3, r2
 8001648:	7aba      	ldrb	r2, [r7, #10]
 800164a:	701a      	strb	r2, [r3, #0]
					if(j==0)break;
 800164c:	7dbb      	ldrb	r3, [r7, #22]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00b      	beq.n	800166a <scannerKnightRider+0x302>
				for(uint8_t j=i;j>=i-points;j--){
 8001652:	7dbb      	ldrb	r3, [r7, #22]
 8001654:	3b01      	subs	r3, #1
 8001656:	75bb      	strb	r3, [r7, #22]
 8001658:	7dba      	ldrb	r2, [r7, #22]
 800165a:	7df9      	ldrb	r1, [r7, #23]
 800165c:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8001660:	1acb      	subs	r3, r1, r3
 8001662:	429a      	cmp	r2, r3
 8001664:	f6bf af7a 	bge.w	800155c <scannerKnightRider+0x1f4>
 8001668:	e000      	b.n	800166c <scannerKnightRider+0x304>
					if(j==0)break;
 800166a:	bf00      	nop
				}
			if(type_run == 0){
 800166c:	f997 3094 	ldrsb.w	r3, [r7, #148]	@ 0x94
 8001670:	2b00      	cmp	r3, #0
 8001672:	d111      	bne.n	8001698 <scannerKnightRider+0x330>
				sendData(hspix,buffer, lenght);
 8001674:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001678:	9313      	str	r3, [sp, #76]	@ 0x4c
 800167a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800167e:	9312      	str	r3, [sp, #72]	@ 0x48
 8001680:	4668      	mov	r0, sp
 8001682:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001686:	2248      	movs	r2, #72	@ 0x48
 8001688:	4619      	mov	r1, r3
 800168a:	f002 f9ea 	bl	8003a62 <memcpy>
 800168e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001694:	f7fe ff6c 	bl	8000570 <sendData>
			}
			if(type_run == 1){
 8001698:	f997 3094 	ldrsb.w	r3, [r7, #148]	@ 0x94
 800169c:	2b01      	cmp	r3, #1
 800169e:	d111      	bne.n	80016c4 <scannerKnightRider+0x35c>
				sendReverseData(hspix,buffer, lenght);
 80016a0:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80016a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80016a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016aa:	9312      	str	r3, [sp, #72]	@ 0x48
 80016ac:	4668      	mov	r0, sp
 80016ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016b2:	2248      	movs	r2, #72	@ 0x48
 80016b4:	4619      	mov	r1, r3
 80016b6:	f002 f9d4 	bl	8003a62 <memcpy>
 80016ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c0:	f7fe ffb2 	bl	8000628 <sendReverseData>
			}
			HAL_Delay(DELAY);
 80016c4:	2096      	movs	r0, #150	@ 0x96
 80016c6:	f000 fe9b 	bl	8002400 <HAL_Delay>
		for(uint8_t i = points; i < lenght; i++) {
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
 80016cc:	3301      	adds	r3, #1
 80016ce:	75fb      	strb	r3, [r7, #23]
 80016d0:	7dfa      	ldrb	r2, [r7, #23]
 80016d2:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80016d6:	429a      	cmp	r2, r3
 80016d8:	f4ff af3d 	bcc.w	8001556 <scannerKnightRider+0x1ee>
		}

		//start back to left
		if(k+1<reapets){
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f280 8170 	bge.w	80019ca <scannerKnightRider+0x662>
			for(uint8_t i=lenght; i>lenght-points; i--){
 80016ea:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80016ee:	757b      	strb	r3, [r7, #21]
 80016f0:	e0b8      	b.n	8001864 <scannerKnightRider+0x4fc>
				for(uint8_t j=i;j<lenght;j++)
 80016f2:	7d7b      	ldrb	r3, [r7, #21]
 80016f4:	753b      	strb	r3, [r7, #20]
 80016f6:	e07a      	b.n	80017ee <scannerKnightRider+0x486>
					{
					uint8_t temp_data[3]={
										*((buffer+0)+(j)*3),
 80016f8:	7d3a      	ldrb	r2, [r7, #20]
 80016fa:	4613      	mov	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001706:	4413      	add	r3, r2
 8001708:	781b      	ldrb	r3, [r3, #0]
					uint8_t temp_data[3]={
 800170a:	713b      	strb	r3, [r7, #4]
										*((buffer+1)+(j)*3),
 800170c:	7d3a      	ldrb	r2, [r7, #20]
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	3301      	adds	r3, #1
 8001716:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800171a:	4413      	add	r3, r2
 800171c:	781b      	ldrb	r3, [r3, #0]
					uint8_t temp_data[3]={
 800171e:	717b      	strb	r3, [r7, #5]
										*((buffer+2)+(j)*3)
 8001720:	7d3a      	ldrb	r2, [r7, #20]
 8001722:	4613      	mov	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	3302      	adds	r3, #2
 800172a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800172e:	4413      	add	r3, r2
 8001730:	781b      	ldrb	r3, [r3, #0]
					uint8_t temp_data[3]={
 8001732:	71bb      	strb	r3, [r7, #6]
												};
					*((buffer+0)+(j)*3)=*((buffer+0)+(j-1)*3);
 8001734:	7d3b      	ldrb	r3, [r7, #20]
 8001736:	1e5a      	subs	r2, r3, #1
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	461a      	mov	r2, r3
 8001740:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001744:	1899      	adds	r1, r3, r2
 8001746:	7d3a      	ldrb	r2, [r7, #20]
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	461a      	mov	r2, r3
 8001750:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001754:	4413      	add	r3, r2
 8001756:	780a      	ldrb	r2, [r1, #0]
 8001758:	701a      	strb	r2, [r3, #0]
					*((buffer+1)+(j)*3)=*((buffer+1)+(j-1)*3);
 800175a:	7d3b      	ldrb	r3, [r7, #20]
 800175c:	1e5a      	subs	r2, r3, #1
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	3301      	adds	r3, #1
 8001766:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800176a:	18d1      	adds	r1, r2, r3
 800176c:	7d3a      	ldrb	r2, [r7, #20]
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	3301      	adds	r3, #1
 8001776:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800177a:	4413      	add	r3, r2
 800177c:	780a      	ldrb	r2, [r1, #0]
 800177e:	701a      	strb	r2, [r3, #0]
					*((buffer+2)+(j)*3)=*((buffer+2)+(j-1)*3);
 8001780:	7d3b      	ldrb	r3, [r7, #20]
 8001782:	1e5a      	subs	r2, r3, #1
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	3302      	adds	r3, #2
 800178c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001790:	18d1      	adds	r1, r2, r3
 8001792:	7d3a      	ldrb	r2, [r7, #20]
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	3302      	adds	r3, #2
 800179c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80017a0:	4413      	add	r3, r2
 80017a2:	780a      	ldrb	r2, [r1, #0]
 80017a4:	701a      	strb	r2, [r3, #0]

					*((buffer+0)+(j-1)*3)=temp_data[0];
 80017a6:	7d3b      	ldrb	r3, [r7, #20]
 80017a8:	1e5a      	subs	r2, r3, #1
 80017aa:	4613      	mov	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017b6:	4413      	add	r3, r2
 80017b8:	793a      	ldrb	r2, [r7, #4]
 80017ba:	701a      	strb	r2, [r3, #0]
					*((buffer+1)+(j-1)*3)=temp_data[1];
 80017bc:	7d3b      	ldrb	r3, [r7, #20]
 80017be:	1e5a      	subs	r2, r3, #1
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	3301      	adds	r3, #1
 80017c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80017cc:	4413      	add	r3, r2
 80017ce:	797a      	ldrb	r2, [r7, #5]
 80017d0:	701a      	strb	r2, [r3, #0]
					*((buffer+2)+(j-1)*3)=temp_data[2];
 80017d2:	7d3b      	ldrb	r3, [r7, #20]
 80017d4:	1e5a      	subs	r2, r3, #1
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	3302      	adds	r3, #2
 80017de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80017e2:	4413      	add	r3, r2
 80017e4:	79ba      	ldrb	r2, [r7, #6]
 80017e6:	701a      	strb	r2, [r3, #0]
				for(uint8_t j=i;j<lenght;j++)
 80017e8:	7d3b      	ldrb	r3, [r7, #20]
 80017ea:	3301      	adds	r3, #1
 80017ec:	753b      	strb	r3, [r7, #20]
 80017ee:	7d3a      	ldrb	r2, [r7, #20]
 80017f0:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80017f4:	429a      	cmp	r2, r3
 80017f6:	f4ff af7f 	bcc.w	80016f8 <scannerKnightRider+0x390>
					}

				if(type_run == 0){
 80017fa:	f997 3094 	ldrsb.w	r3, [r7, #148]	@ 0x94
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d111      	bne.n	8001826 <scannerKnightRider+0x4be>
					sendData(hspix,buffer, lenght);
 8001802:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001806:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001808:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800180c:	9312      	str	r3, [sp, #72]	@ 0x48
 800180e:	4668      	mov	r0, sp
 8001810:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001814:	2248      	movs	r2, #72	@ 0x48
 8001816:	4619      	mov	r1, r3
 8001818:	f002 f923 	bl	8003a62 <memcpy>
 800181c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001820:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001822:	f7fe fea5 	bl	8000570 <sendData>
				}
				if(type_run == 1){
 8001826:	f997 3094 	ldrsb.w	r3, [r7, #148]	@ 0x94
 800182a:	2b01      	cmp	r3, #1
 800182c:	d111      	bne.n	8001852 <scannerKnightRider+0x4ea>
					sendReverseData(hspix,buffer, lenght);
 800182e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001832:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001834:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001838:	9312      	str	r3, [sp, #72]	@ 0x48
 800183a:	4668      	mov	r0, sp
 800183c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001840:	2248      	movs	r2, #72	@ 0x48
 8001842:	4619      	mov	r1, r3
 8001844:	f002 f90d 	bl	8003a62 <memcpy>
 8001848:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800184c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800184e:	f7fe feeb 	bl	8000628 <sendReverseData>
				}
				HAL_Delay(DELAY);
 8001852:	2096      	movs	r0, #150	@ 0x96
 8001854:	f000 fdd4 	bl	8002400 <HAL_Delay>
				if(i==0)break;
 8001858:	7d7b      	ldrb	r3, [r7, #21]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00c      	beq.n	8001878 <scannerKnightRider+0x510>
			for(uint8_t i=lenght; i>lenght-points; i--){
 800185e:	7d7b      	ldrb	r3, [r7, #21]
 8001860:	3b01      	subs	r3, #1
 8001862:	757b      	strb	r3, [r7, #21]
 8001864:	7d7a      	ldrb	r2, [r7, #21]
 8001866:	f897 1084 	ldrb.w	r1, [r7, #132]	@ 0x84
 800186a:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800186e:	1acb      	subs	r3, r1, r3
 8001870:	429a      	cmp	r2, r3
 8001872:	f73f af3e 	bgt.w	80016f2 <scannerKnightRider+0x38a>
 8001876:	e000      	b.n	800187a <scannerKnightRider+0x512>
				if(i==0)break;
 8001878:	bf00      	nop
			}

			memset(buffer, 0, lenght*3);
 800187a:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 800187e:	4613      	mov	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	461a      	mov	r2, r3
 8001886:	2100      	movs	r1, #0
 8001888:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800188c:	f002 f86d 	bl	800396a <memset>
			for(uint8_t i = 0; i < points; i++){
 8001890:	2300      	movs	r3, #0
 8001892:	74fb      	strb	r3, [r7, #19]
 8001894:	e088      	b.n	80019a8 <scannerKnightRider+0x640>
					*((buffer+0)+i*3) = data[0];
 8001896:	7cfa      	ldrb	r2, [r7, #19]
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	461a      	mov	r2, r3
 80018a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018a4:	4413      	add	r3, r2
 80018a6:	7b3a      	ldrb	r2, [r7, #12]
 80018a8:	701a      	strb	r2, [r3, #0]
					*((buffer+1)+i*3) = data[1];
 80018aa:	7cfa      	ldrb	r2, [r7, #19]
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	3301      	adds	r3, #1
 80018b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80018b8:	4413      	add	r3, r2
 80018ba:	7b7a      	ldrb	r2, [r7, #13]
 80018bc:	701a      	strb	r2, [r3, #0]
					*((buffer+2)+i*3) = data[2];
 80018be:	7cfa      	ldrb	r2, [r7, #19]
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	3302      	adds	r3, #2
 80018c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80018cc:	4413      	add	r3, r2
 80018ce:	7bba      	ldrb	r2, [r7, #14]
 80018d0:	701a      	strb	r2, [r3, #0]
					data[0] = *((buffer+0)+i*3);
 80018d2:	7cfa      	ldrb	r2, [r7, #19]
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	461a      	mov	r2, r3
 80018dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018e0:	4413      	add	r3, r2
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	733b      	strb	r3, [r7, #12]
					data[1] = *((buffer+1)+i*3);
 80018e6:	7cfa      	ldrb	r2, [r7, #19]
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	3301      	adds	r3, #1
 80018f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80018f4:	4413      	add	r3, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	737b      	strb	r3, [r7, #13]
					data[2] = *((buffer+2)+i*3);
 80018fa:	7cfa      	ldrb	r2, [r7, #19]
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	3302      	adds	r3, #2
 8001904:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001908:	4413      	add	r3, r2
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	73bb      	strb	r3, [r7, #14]
					if(i>0)
 800190e:	7cfb      	ldrb	r3, [r7, #19]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d046      	beq.n	80019a2 <scannerKnightRider+0x63a>
						for(uint8_t j=i-1;j>=0;j--){
 8001914:	7cfb      	ldrb	r3, [r7, #19]
 8001916:	3b01      	subs	r3, #1
 8001918:	74bb      	strb	r3, [r7, #18]
							*((buffer+0)+(j)*3) /= 2;
 800191a:	7cba      	ldrb	r2, [r7, #18]
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	461a      	mov	r2, r3
 8001924:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001928:	4413      	add	r3, r2
 800192a:	7819      	ldrb	r1, [r3, #0]
 800192c:	7cba      	ldrb	r2, [r7, #18]
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	461a      	mov	r2, r3
 8001936:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800193a:	4413      	add	r3, r2
 800193c:	084a      	lsrs	r2, r1, #1
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]
							*((buffer+1)+(j)*3) /= 2;
 8001942:	7cba      	ldrb	r2, [r7, #18]
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	3301      	adds	r3, #1
 800194c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001950:	4413      	add	r3, r2
 8001952:	7819      	ldrb	r1, [r3, #0]
 8001954:	7cba      	ldrb	r2, [r7, #18]
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	3301      	adds	r3, #1
 800195e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001962:	4413      	add	r3, r2
 8001964:	084a      	lsrs	r2, r1, #1
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	701a      	strb	r2, [r3, #0]
							*((buffer+2)+(j)*3) /= 2;
 800196a:	7cba      	ldrb	r2, [r7, #18]
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	3302      	adds	r3, #2
 8001974:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001978:	4413      	add	r3, r2
 800197a:	7819      	ldrb	r1, [r3, #0]
 800197c:	7cba      	ldrb	r2, [r7, #18]
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	3302      	adds	r3, #2
 8001986:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800198a:	4413      	add	r3, r2
 800198c:	084a      	lsrs	r2, r1, #1
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]
							if(j==0)break;
 8001992:	7cbb      	ldrb	r3, [r7, #18]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <scannerKnightRider+0x638>
						for(uint8_t j=i-1;j>=0;j--){
 8001998:	7cbb      	ldrb	r3, [r7, #18]
 800199a:	3b01      	subs	r3, #1
 800199c:	74bb      	strb	r3, [r7, #18]
							*((buffer+0)+(j)*3) /= 2;
 800199e:	e7bc      	b.n	800191a <scannerKnightRider+0x5b2>
							if(j==0)break;
 80019a0:	bf00      	nop
			for(uint8_t i = 0; i < points; i++){
 80019a2:	7cfb      	ldrb	r3, [r7, #19]
 80019a4:	3301      	adds	r3, #1
 80019a6:	74fb      	strb	r3, [r7, #19]
 80019a8:	7cfa      	ldrb	r2, [r7, #19]
 80019aa:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 80019ae:	429a      	cmp	r2, r3
 80019b0:	f4ff af71 	bcc.w	8001896 <scannerKnightRider+0x52e>
						}
				}

			if(type_run)type_run=0;
 80019b4:	f997 3094 	ldrsb.w	r3, [r7, #148]	@ 0x94
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <scannerKnightRider+0x65c>
 80019bc:	2300      	movs	r3, #0
 80019be:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
 80019c2:	e002      	b.n	80019ca <scannerKnightRider+0x662>
			else type_run=1;
 80019c4:	2301      	movs	r3, #1
 80019c6:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
	for(int k=0;k<reapets;k++){
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	3301      	adds	r3, #1
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	f6ff adb9 	blt.w	800154e <scannerKnightRider+0x1e6>
		}
	}


	//end_right
	for(uint8_t i=lenght-points; i<lenght; i++){
 80019dc:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 80019e0:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	747b      	strb	r3, [r7, #17]
 80019e8:	e096      	b.n	8001b18 <scannerKnightRider+0x7b0>
		*((buffer+0)+i*3)=0;
 80019ea:	7c7a      	ldrb	r2, [r7, #17]
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	461a      	mov	r2, r3
 80019f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019f8:	4413      	add	r3, r2
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
		*((buffer+1)+i*3)=0;
 80019fe:	7c7a      	ldrb	r2, [r7, #17]
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	3301      	adds	r3, #1
 8001a08:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001a0c:	4413      	add	r3, r2
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
		*((buffer+2)+i*3)=0;
 8001a12:	7c7a      	ldrb	r2, [r7, #17]
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001a20:	4413      	add	r3, r2
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
		for(uint8_t j=i;j<lenght;j++){
 8001a26:	7c7b      	ldrb	r3, [r7, #17]
 8001a28:	743b      	strb	r3, [r7, #16]
 8001a2a:	e03e      	b.n	8001aaa <scannerKnightRider+0x742>
			*((buffer+0)+j*3)/=2;
 8001a2c:	7c3a      	ldrb	r2, [r7, #16]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	461a      	mov	r2, r3
 8001a36:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a3a:	4413      	add	r3, r2
 8001a3c:	7819      	ldrb	r1, [r3, #0]
 8001a3e:	7c3a      	ldrb	r2, [r7, #16]
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	461a      	mov	r2, r3
 8001a48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a4c:	4413      	add	r3, r2
 8001a4e:	084a      	lsrs	r2, r1, #1
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	701a      	strb	r2, [r3, #0]
			*((buffer+1)+j*3)/=2;
 8001a54:	7c3a      	ldrb	r2, [r7, #16]
 8001a56:	4613      	mov	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001a62:	4413      	add	r3, r2
 8001a64:	7819      	ldrb	r1, [r3, #0]
 8001a66:	7c3a      	ldrb	r2, [r7, #16]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001a74:	4413      	add	r3, r2
 8001a76:	084a      	lsrs	r2, r1, #1
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	701a      	strb	r2, [r3, #0]
			*((buffer+2)+j*3)/=2;
 8001a7c:	7c3a      	ldrb	r2, [r7, #16]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	3302      	adds	r3, #2
 8001a86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001a8a:	4413      	add	r3, r2
 8001a8c:	7819      	ldrb	r1, [r3, #0]
 8001a8e:	7c3a      	ldrb	r2, [r7, #16]
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	3302      	adds	r3, #2
 8001a98:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001a9c:	4413      	add	r3, r2
 8001a9e:	084a      	lsrs	r2, r1, #1
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	701a      	strb	r2, [r3, #0]
		for(uint8_t j=i;j<lenght;j++){
 8001aa4:	7c3b      	ldrb	r3, [r7, #16]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	743b      	strb	r3, [r7, #16]
 8001aaa:	7c3a      	ldrb	r2, [r7, #16]
 8001aac:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d3bb      	bcc.n	8001a2c <scannerKnightRider+0x6c4>
		}
		if(type_run == 0){
 8001ab4:	f997 3094 	ldrsb.w	r3, [r7, #148]	@ 0x94
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d111      	bne.n	8001ae0 <scannerKnightRider+0x778>
			sendData(hspix,buffer, lenght);
 8001abc:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001ac0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001ac2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ac6:	9312      	str	r3, [sp, #72]	@ 0x48
 8001ac8:	4668      	mov	r0, sp
 8001aca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ace:	2248      	movs	r2, #72	@ 0x48
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f001 ffc6 	bl	8003a62 <memcpy>
 8001ad6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001adc:	f7fe fd48 	bl	8000570 <sendData>
		}
		if(type_run == 1){
 8001ae0:	f997 3094 	ldrsb.w	r3, [r7, #148]	@ 0x94
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d111      	bne.n	8001b0c <scannerKnightRider+0x7a4>
			sendReverseData(hspix,buffer, lenght);
 8001ae8:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001aec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001aee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001af2:	9312      	str	r3, [sp, #72]	@ 0x48
 8001af4:	4668      	mov	r0, sp
 8001af6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001afa:	2248      	movs	r2, #72	@ 0x48
 8001afc:	4619      	mov	r1, r3
 8001afe:	f001 ffb0 	bl	8003a62 <memcpy>
 8001b02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b08:	f7fe fd8e 	bl	8000628 <sendReverseData>
		}
		HAL_Delay(DELAY);
 8001b0c:	2096      	movs	r0, #150	@ 0x96
 8001b0e:	f000 fc77 	bl	8002400 <HAL_Delay>
	for(uint8_t i=lenght-points; i<lenght; i++){
 8001b12:	7c7b      	ldrb	r3, [r7, #17]
 8001b14:	3301      	adds	r3, #1
 8001b16:	747b      	strb	r3, [r7, #17]
 8001b18:	7c7a      	ldrb	r2, [r7, #17]
 8001b1a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	f4ff af63 	bcc.w	80019ea <scannerKnightRider+0x682>
	}

	memset(buffer, 0, lenght*3);
 8001b24:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	461a      	mov	r2, r3
 8001b30:	2100      	movs	r1, #0
 8001b32:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8001b36:	f001 ff18 	bl	800396a <memset>
	sendData(hspix,buffer, lenght);
 8001b3a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001b3e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001b40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b44:	9312      	str	r3, [sp, #72]	@ 0x48
 8001b46:	4668      	mov	r0, sp
 8001b48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b4c:	2248      	movs	r2, #72	@ 0x48
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f001 ff87 	bl	8003a62 <memcpy>
 8001b54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b5a:	f7fe fd09 	bl	8000570 <sendData>
}
 8001b5e:	bf00      	nop
 8001b60:	3720      	adds	r7, #32
 8001b62:	46bd      	mov	sp, r7
 8001b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b68:	b004      	add	sp, #16
 8001b6a:	4770      	bx	lr

08001b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b0a5      	sub	sp, #148	@ 0x94
 8001b70:	af18      	add	r7, sp, #96	@ 0x60

  /* USER CODE BEGIN 1 */
	uint8_t buffer[LED_COUNT][3]={0};
 8001b72:	463b      	mov	r3, r7
 8001b74:	2230      	movs	r2, #48	@ 0x30
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 fef6 	bl	800396a <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b7e:	f000 fbcd 	bl	800231c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b82:	f000 f945 	bl	8001e10 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b86:	f000 f9e3 	bl	8001f50 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b8a:	f000 f9ab 	bl	8001ee4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sendData(hspi1,buffer, LED_COUNT);
 8001b8e:	4c9d      	ldr	r4, [pc, #628]	@ (8001e04 <main+0x298>)
 8001b90:	2310      	movs	r3, #16
 8001b92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001b94:	463b      	mov	r3, r7
 8001b96:	9312      	str	r3, [sp, #72]	@ 0x48
 8001b98:	4668      	mov	r0, sp
 8001b9a:	f104 0310 	add.w	r3, r4, #16
 8001b9e:	2248      	movs	r2, #72	@ 0x48
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f001 ff5e 	bl	8003a62 <memcpy>
 8001ba6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001baa:	f7fe fce1 	bl	8000570 <sendData>
  while(1){
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 8001bae:	2102      	movs	r1, #2
 8001bb0:	4895      	ldr	r0, [pc, #596]	@ (8001e08 <main+0x29c>)
 8001bb2:	f000 feb3 	bl	800291c <HAL_GPIO_ReadPin>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 808c 	beq.w	8001cd6 <main+0x16a>
		  switch(rand()%5){
 8001bbe:	f001 fd91 	bl	80036e4 <rand>
 8001bc2:	4601      	mov	r1, r0
 8001bc4:	4b91      	ldr	r3, [pc, #580]	@ (8001e0c <main+0x2a0>)
 8001bc6:	fb83 2301 	smull	r2, r3, r3, r1
 8001bca:	105a      	asrs	r2, r3, #1
 8001bcc:	17cb      	asrs	r3, r1, #31
 8001bce:	1ad2      	subs	r2, r2, r3
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	1aca      	subs	r2, r1, r3
 8001bd8:	2a04      	cmp	r2, #4
 8001bda:	d87c      	bhi.n	8001cd6 <main+0x16a>
 8001bdc:	a301      	add	r3, pc, #4	@ (adr r3, 8001be4 <main+0x78>)
 8001bde:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001be2:	bf00      	nop
 8001be4:	08001bf9 	.word	0x08001bf9
 8001be8:	08001c23 	.word	0x08001c23
 8001bec:	08001c4d 	.word	0x08001c4d
 8001bf0:	08001c7b 	.word	0x08001c7b
 8001bf4:	08001ca5 	.word	0x08001ca5
			case 0:{
				iterationRunRandomColor(hspi1,buffer,LED_COUNT,LUX,0);
 8001bf8:	4c82      	ldr	r4, [pc, #520]	@ (8001e04 <main+0x298>)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	9315      	str	r3, [sp, #84]	@ 0x54
 8001bfe:	2364      	movs	r3, #100	@ 0x64
 8001c00:	9314      	str	r3, [sp, #80]	@ 0x50
 8001c02:	2310      	movs	r3, #16
 8001c04:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001c06:	463b      	mov	r3, r7
 8001c08:	9312      	str	r3, [sp, #72]	@ 0x48
 8001c0a:	4668      	mov	r0, sp
 8001c0c:	f104 0310 	add.w	r3, r4, #16
 8001c10:	2248      	movs	r2, #72	@ 0x48
 8001c12:	4619      	mov	r1, r3
 8001c14:	f001 ff25 	bl	8003a62 <memcpy>
 8001c18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c1c:	f7fe fd5f 	bl	80006de <iterationRunRandomColor>
				break;
 8001c20:	e059      	b.n	8001cd6 <main+0x16a>
			}
			case 1:{
				starfall(hspi1, buffer, LED_COUNT, LUX, 0);
 8001c22:	4c78      	ldr	r4, [pc, #480]	@ (8001e04 <main+0x298>)
 8001c24:	2300      	movs	r3, #0
 8001c26:	9315      	str	r3, [sp, #84]	@ 0x54
 8001c28:	2364      	movs	r3, #100	@ 0x64
 8001c2a:	9314      	str	r3, [sp, #80]	@ 0x50
 8001c2c:	2310      	movs	r3, #16
 8001c2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001c30:	463b      	mov	r3, r7
 8001c32:	9312      	str	r3, [sp, #72]	@ 0x48
 8001c34:	4668      	mov	r0, sp
 8001c36:	f104 0310 	add.w	r3, r4, #16
 8001c3a:	2248      	movs	r2, #72	@ 0x48
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f001 ff10 	bl	8003a62 <memcpy>
 8001c42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c46:	f7fe fde6 	bl	8000816 <starfall>
				break;
 8001c4a:	e044      	b.n	8001cd6 <main+0x16a>
			}
			case 2:{
				focusLens(hspi1, buffer, LED_COUNT, LUX, 5, 0);
 8001c4c:	4c6d      	ldr	r4, [pc, #436]	@ (8001e04 <main+0x298>)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	9316      	str	r3, [sp, #88]	@ 0x58
 8001c52:	2305      	movs	r3, #5
 8001c54:	9315      	str	r3, [sp, #84]	@ 0x54
 8001c56:	2364      	movs	r3, #100	@ 0x64
 8001c58:	9314      	str	r3, [sp, #80]	@ 0x50
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001c5e:	463b      	mov	r3, r7
 8001c60:	9312      	str	r3, [sp, #72]	@ 0x48
 8001c62:	4668      	mov	r0, sp
 8001c64:	f104 0310 	add.w	r3, r4, #16
 8001c68:	2248      	movs	r2, #72	@ 0x48
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f001 fef9 	bl	8003a62 <memcpy>
 8001c70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c74:	f7fe ff24 	bl	8000ac0 <focusLens>
				break;
 8001c78:	e02d      	b.n	8001cd6 <main+0x16a>
			}
			case 3:{
				smoothAccumulation(hspi1, buffer, LED_COUNT, LUX, 0);
 8001c7a:	4c62      	ldr	r4, [pc, #392]	@ (8001e04 <main+0x298>)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9315      	str	r3, [sp, #84]	@ 0x54
 8001c80:	2364      	movs	r3, #100	@ 0x64
 8001c82:	9314      	str	r3, [sp, #80]	@ 0x50
 8001c84:	2310      	movs	r3, #16
 8001c86:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001c88:	463b      	mov	r3, r7
 8001c8a:	9312      	str	r3, [sp, #72]	@ 0x48
 8001c8c:	4668      	mov	r0, sp
 8001c8e:	f104 0310 	add.w	r3, r4, #16
 8001c92:	2248      	movs	r2, #72	@ 0x48
 8001c94:	4619      	mov	r1, r3
 8001c96:	f001 fee4 	bl	8003a62 <memcpy>
 8001c9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c9e:	f7ff f99c 	bl	8000fda <smoothAccumulation>
				break;
 8001ca2:	e018      	b.n	8001cd6 <main+0x16a>
			}
			case 4:{
				scannerKnightRider(hspi1, buffer, LED_COUNT, LUX, 5,5,0);
 8001ca4:	4c57      	ldr	r4, [pc, #348]	@ (8001e04 <main+0x298>)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	9317      	str	r3, [sp, #92]	@ 0x5c
 8001caa:	2305      	movs	r3, #5
 8001cac:	9316      	str	r3, [sp, #88]	@ 0x58
 8001cae:	2305      	movs	r3, #5
 8001cb0:	9315      	str	r3, [sp, #84]	@ 0x54
 8001cb2:	2364      	movs	r3, #100	@ 0x64
 8001cb4:	9314      	str	r3, [sp, #80]	@ 0x50
 8001cb6:	2310      	movs	r3, #16
 8001cb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001cba:	463b      	mov	r3, r7
 8001cbc:	9312      	str	r3, [sp, #72]	@ 0x48
 8001cbe:	4668      	mov	r0, sp
 8001cc0:	f104 0310 	add.w	r3, r4, #16
 8001cc4:	2248      	movs	r2, #72	@ 0x48
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f001 fecb 	bl	8003a62 <memcpy>
 8001ccc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cd0:	f7ff fb4a 	bl	8001368 <scannerKnightRider>
				break;
 8001cd4:	bf00      	nop
			}
		  }
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)){
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	484b      	ldr	r0, [pc, #300]	@ (8001e08 <main+0x29c>)
 8001cda:	f000 fe1f 	bl	800291c <HAL_GPIO_ReadPin>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f43f af64 	beq.w	8001bae <main+0x42>
	  //invers func
		  switch(rand()%5){
 8001ce6:	f001 fcfd 	bl	80036e4 <rand>
 8001cea:	4601      	mov	r1, r0
 8001cec:	4b47      	ldr	r3, [pc, #284]	@ (8001e0c <main+0x2a0>)
 8001cee:	fb83 2301 	smull	r2, r3, r3, r1
 8001cf2:	105a      	asrs	r2, r3, #1
 8001cf4:	17cb      	asrs	r3, r1, #31
 8001cf6:	1ad2      	subs	r2, r2, r3
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	1aca      	subs	r2, r1, r3
 8001d00:	2a04      	cmp	r2, #4
 8001d02:	f63f af54 	bhi.w	8001bae <main+0x42>
 8001d06:	a301      	add	r3, pc, #4	@ (adr r3, 8001d0c <main+0x1a0>)
 8001d08:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001d0c:	08001d21 	.word	0x08001d21
 8001d10:	08001d4b 	.word	0x08001d4b
 8001d14:	08001d75 	.word	0x08001d75
 8001d18:	08001da3 	.word	0x08001da3
 8001d1c:	08001dcd 	.word	0x08001dcd
			case 0:{
				iterationRunRandomColor(hspi1,buffer,LED_COUNT,LUX,1);
 8001d20:	4c38      	ldr	r4, [pc, #224]	@ (8001e04 <main+0x298>)
 8001d22:	2301      	movs	r3, #1
 8001d24:	9315      	str	r3, [sp, #84]	@ 0x54
 8001d26:	2364      	movs	r3, #100	@ 0x64
 8001d28:	9314      	str	r3, [sp, #80]	@ 0x50
 8001d2a:	2310      	movs	r3, #16
 8001d2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001d2e:	463b      	mov	r3, r7
 8001d30:	9312      	str	r3, [sp, #72]	@ 0x48
 8001d32:	4668      	mov	r0, sp
 8001d34:	f104 0310 	add.w	r3, r4, #16
 8001d38:	2248      	movs	r2, #72	@ 0x48
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f001 fe91 	bl	8003a62 <memcpy>
 8001d40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d44:	f7fe fccb 	bl	80006de <iterationRunRandomColor>
				break;
 8001d48:	e05a      	b.n	8001e00 <main+0x294>
			}
			case 1:{
				starfall(hspi1, buffer, LED_COUNT, LUX, 1);
 8001d4a:	4c2e      	ldr	r4, [pc, #184]	@ (8001e04 <main+0x298>)
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	9315      	str	r3, [sp, #84]	@ 0x54
 8001d50:	2364      	movs	r3, #100	@ 0x64
 8001d52:	9314      	str	r3, [sp, #80]	@ 0x50
 8001d54:	2310      	movs	r3, #16
 8001d56:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001d58:	463b      	mov	r3, r7
 8001d5a:	9312      	str	r3, [sp, #72]	@ 0x48
 8001d5c:	4668      	mov	r0, sp
 8001d5e:	f104 0310 	add.w	r3, r4, #16
 8001d62:	2248      	movs	r2, #72	@ 0x48
 8001d64:	4619      	mov	r1, r3
 8001d66:	f001 fe7c 	bl	8003a62 <memcpy>
 8001d6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d6e:	f7fe fd52 	bl	8000816 <starfall>
				break;
 8001d72:	e045      	b.n	8001e00 <main+0x294>
			}
			case 2:{
				focusLens(hspi1, buffer, LED_COUNT, LUX, 5, 1);
 8001d74:	4c23      	ldr	r4, [pc, #140]	@ (8001e04 <main+0x298>)
 8001d76:	2301      	movs	r3, #1
 8001d78:	9316      	str	r3, [sp, #88]	@ 0x58
 8001d7a:	2305      	movs	r3, #5
 8001d7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8001d7e:	2364      	movs	r3, #100	@ 0x64
 8001d80:	9314      	str	r3, [sp, #80]	@ 0x50
 8001d82:	2310      	movs	r3, #16
 8001d84:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001d86:	463b      	mov	r3, r7
 8001d88:	9312      	str	r3, [sp, #72]	@ 0x48
 8001d8a:	4668      	mov	r0, sp
 8001d8c:	f104 0310 	add.w	r3, r4, #16
 8001d90:	2248      	movs	r2, #72	@ 0x48
 8001d92:	4619      	mov	r1, r3
 8001d94:	f001 fe65 	bl	8003a62 <memcpy>
 8001d98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d9c:	f7fe fe90 	bl	8000ac0 <focusLens>
				break;
 8001da0:	e02e      	b.n	8001e00 <main+0x294>
			}
			case 3:{
				smoothAccumulation(hspi1, buffer, LED_COUNT, LUX, 1);
 8001da2:	4c18      	ldr	r4, [pc, #96]	@ (8001e04 <main+0x298>)
 8001da4:	2301      	movs	r3, #1
 8001da6:	9315      	str	r3, [sp, #84]	@ 0x54
 8001da8:	2364      	movs	r3, #100	@ 0x64
 8001daa:	9314      	str	r3, [sp, #80]	@ 0x50
 8001dac:	2310      	movs	r3, #16
 8001dae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001db0:	463b      	mov	r3, r7
 8001db2:	9312      	str	r3, [sp, #72]	@ 0x48
 8001db4:	4668      	mov	r0, sp
 8001db6:	f104 0310 	add.w	r3, r4, #16
 8001dba:	2248      	movs	r2, #72	@ 0x48
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f001 fe50 	bl	8003a62 <memcpy>
 8001dc2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dc6:	f7ff f908 	bl	8000fda <smoothAccumulation>
				break;
 8001dca:	e019      	b.n	8001e00 <main+0x294>
			}
			case 4:{
				scannerKnightRider(hspi1, buffer, LED_COUNT, LUX, 5,5,1);
 8001dcc:	4c0d      	ldr	r4, [pc, #52]	@ (8001e04 <main+0x298>)
 8001dce:	2301      	movs	r3, #1
 8001dd0:	9317      	str	r3, [sp, #92]	@ 0x5c
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	9316      	str	r3, [sp, #88]	@ 0x58
 8001dd6:	2305      	movs	r3, #5
 8001dd8:	9315      	str	r3, [sp, #84]	@ 0x54
 8001dda:	2364      	movs	r3, #100	@ 0x64
 8001ddc:	9314      	str	r3, [sp, #80]	@ 0x50
 8001dde:	2310      	movs	r3, #16
 8001de0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001de2:	463b      	mov	r3, r7
 8001de4:	9312      	str	r3, [sp, #72]	@ 0x48
 8001de6:	4668      	mov	r0, sp
 8001de8:	f104 0310 	add.w	r3, r4, #16
 8001dec:	2248      	movs	r2, #72	@ 0x48
 8001dee:	4619      	mov	r1, r3
 8001df0:	f001 fe37 	bl	8003a62 <memcpy>
 8001df4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001df8:	f7ff fab6 	bl	8001368 <scannerKnightRider>
				break;
 8001dfc:	bf00      	nop
 8001dfe:	e6d6      	b.n	8001bae <main+0x42>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 8001e00:	e6d5      	b.n	8001bae <main+0x42>
 8001e02:	bf00      	nop
 8001e04:	20000084 	.word	0x20000084
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	66666667 	.word	0x66666667

08001e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b094      	sub	sp, #80	@ 0x50
 8001e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e16:	f107 0320 	add.w	r3, r7, #32
 8001e1a:	2230      	movs	r2, #48	@ 0x30
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 fda3 	bl	800396a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	4b28      	ldr	r3, [pc, #160]	@ (8001edc <SystemClock_Config+0xcc>)
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	4a27      	ldr	r2, [pc, #156]	@ (8001edc <SystemClock_Config+0xcc>)
 8001e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e44:	4b25      	ldr	r3, [pc, #148]	@ (8001edc <SystemClock_Config+0xcc>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <SystemClock_Config+0xd0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e5c:	4a20      	ldr	r2, [pc, #128]	@ (8001ee0 <SystemClock_Config+0xd0>)
 8001e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <SystemClock_Config+0xd0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e70:	2301      	movs	r3, #1
 8001e72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e7e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e84:	2319      	movs	r3, #25
 8001e86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e88:	23a8      	movs	r3, #168	@ 0xa8
 8001e8a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e90:	2304      	movs	r3, #4
 8001e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e94:	f107 0320 	add.w	r3, r7, #32
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fd57 	bl	800294c <HAL_RCC_OscConfig>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ea4:	f000 f890 	bl	8001fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea8:	230f      	movs	r3, #15
 8001eaa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eac:	2302      	movs	r3, #2
 8001eae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	2102      	movs	r1, #2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 ffb9 	bl	8002e3c <HAL_RCC_ClockConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ed0:	f000 f87a 	bl	8001fc8 <Error_Handler>
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3750      	adds	r7, #80	@ 0x50
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40007000 	.word	0x40007000

08001ee4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	@ (8001f48 <MX_SPI1_Init+0x64>)
 8001eea:	4a18      	ldr	r2, [pc, #96]	@ (8001f4c <MX_SPI1_Init+0x68>)
 8001eec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eee:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <MX_SPI1_Init+0x64>)
 8001ef0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ef4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ef6:	4b14      	ldr	r3, [pc, #80]	@ (8001f48 <MX_SPI1_Init+0x64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001efc:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <MX_SPI1_Init+0x64>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001f02:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <MX_SPI1_Init+0x64>)
 8001f04:	2202      	movs	r2, #2
 8001f06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <MX_SPI1_Init+0x64>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f48 <MX_SPI1_Init+0x64>)
 8001f10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001f16:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <MX_SPI1_Init+0x64>)
 8001f18:	2220      	movs	r2, #32
 8001f1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <MX_SPI1_Init+0x64>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f22:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <MX_SPI1_Init+0x64>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f28:	4b07      	ldr	r3, [pc, #28]	@ (8001f48 <MX_SPI1_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f2e:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <MX_SPI1_Init+0x64>)
 8001f30:	220a      	movs	r2, #10
 8001f32:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f34:	4804      	ldr	r0, [pc, #16]	@ (8001f48 <MX_SPI1_Init+0x64>)
 8001f36:	f001 f92d 	bl	8003194 <HAL_SPI_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f40:	f000 f842 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000084 	.word	0x20000084
 8001f4c:	40013000 	.word	0x40013000

08001f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <MX_GPIO_Init+0x70>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a14      	ldr	r2, [pc, #80]	@ (8001fc0 <MX_GPIO_Init+0x70>)
 8001f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <MX_GPIO_Init+0x70>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <MX_GPIO_Init+0x70>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc0 <MX_GPIO_Init+0x70>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <MX_GPIO_Init+0x70>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001f9e:	2306      	movs	r3, #6
 8001fa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001faa:	f107 030c 	add.w	r3, r7, #12
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4804      	ldr	r0, [pc, #16]	@ (8001fc4 <MX_GPIO_Init+0x74>)
 8001fb2:	f000 fb2f 	bl	8002614 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fb6:	bf00      	nop
 8001fb8:	3720      	adds	r7, #32
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020000 	.word	0x40020000

08001fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	4b10      	ldr	r3, [pc, #64]	@ (8002024 <HAL_MspInit+0x4c>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8002024 <HAL_MspInit+0x4c>)
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fee:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <HAL_MspInit+0x4c>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <HAL_MspInit+0x4c>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	4a08      	ldr	r2, [pc, #32]	@ (8002024 <HAL_MspInit+0x4c>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002008:	6413      	str	r3, [r2, #64]	@ 0x40
 800200a:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <HAL_MspInit+0x4c>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800

08002028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	@ 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a19      	ldr	r2, [pc, #100]	@ (80020ac <HAL_SPI_MspInit+0x84>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d12b      	bne.n	80020a2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	4b18      	ldr	r3, [pc, #96]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	4a17      	ldr	r2, [pc, #92]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 8002054:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002058:	6453      	str	r3, [r2, #68]	@ 0x44
 800205a:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	4a10      	ldr	r2, [pc, #64]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6313      	str	r3, [r2, #48]	@ 0x30
 8002076:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002082:	23a0      	movs	r3, #160	@ 0xa0
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208e:	2303      	movs	r3, #3
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002092:	2305      	movs	r3, #5
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	4805      	ldr	r0, [pc, #20]	@ (80020b4 <HAL_SPI_MspInit+0x8c>)
 800209e:	f000 fab9 	bl	8002614 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020a2:	bf00      	nop
 80020a4:	3728      	adds	r7, #40	@ 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40013000 	.word	0x40013000
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40020000 	.word	0x40020000

080020b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <NMI_Handler+0x4>

080020c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <HardFault_Handler+0x4>

080020c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <MemManage_Handler+0x4>

080020d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <BusFault_Handler+0x4>

080020d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <UsageFault_Handler+0x4>

080020e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800210e:	f000 f957 	bl	80023c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}

08002116 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  return 1;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <_kill>:

int _kill(int pid, int sig)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002130:	f001 fc6a 	bl	8003a08 <__errno>
 8002134:	4603      	mov	r3, r0
 8002136:	2216      	movs	r2, #22
 8002138:	601a      	str	r2, [r3, #0]
  return -1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <_exit>:

void _exit (int status)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800214e:	f04f 31ff 	mov.w	r1, #4294967295
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffe7 	bl	8002126 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <_exit+0x12>

0800215c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	e00a      	b.n	8002184 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800216e:	f3af 8000 	nop.w
 8002172:	4601      	mov	r1, r0
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	60ba      	str	r2, [r7, #8]
 800217a:	b2ca      	uxtb	r2, r1
 800217c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	3301      	adds	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	429a      	cmp	r2, r3
 800218a:	dbf0      	blt.n	800216e <_read+0x12>
  }

  return len;
 800218c:	687b      	ldr	r3, [r7, #4]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	e009      	b.n	80021bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	60ba      	str	r2, [r7, #8]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	3301      	adds	r3, #1
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	dbf1      	blt.n	80021a8 <_write+0x12>
  }
  return len;
 80021c4:	687b      	ldr	r3, [r7, #4]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <_close>:

int _close(int file)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021f6:	605a      	str	r2, [r3, #4]
  return 0;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <_isatty>:

int _isatty(int file)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800220e:	2301      	movs	r3, #1
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002240:	4a14      	ldr	r2, [pc, #80]	@ (8002294 <_sbrk+0x5c>)
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <_sbrk+0x60>)
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800224c:	4b13      	ldr	r3, [pc, #76]	@ (800229c <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002254:	4b11      	ldr	r3, [pc, #68]	@ (800229c <_sbrk+0x64>)
 8002256:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <_sbrk+0x68>)
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800225a:	4b10      	ldr	r3, [pc, #64]	@ (800229c <_sbrk+0x64>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	429a      	cmp	r2, r3
 8002266:	d207      	bcs.n	8002278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002268:	f001 fbce 	bl	8003a08 <__errno>
 800226c:	4603      	mov	r3, r0
 800226e:	220c      	movs	r2, #12
 8002270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	e009      	b.n	800228c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002278:	4b08      	ldr	r3, [pc, #32]	@ (800229c <_sbrk+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227e:	4b07      	ldr	r3, [pc, #28]	@ (800229c <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	4a05      	ldr	r2, [pc, #20]	@ (800229c <_sbrk+0x64>)
 8002288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800228a:	68fb      	ldr	r3, [r7, #12]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20018000 	.word	0x20018000
 8002298:	00000400 	.word	0x00000400
 800229c:	200000dc 	.word	0x200000dc
 80022a0:	20000230 	.word	0x20000230

080022a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <SystemInit+0x20>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	4a05      	ldr	r2, [pc, #20]	@ (80022c4 <SystemInit+0x20>)
 80022b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002300 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
	  bl  SystemInit
 80022cc:	f7ff ffea 	bl	80022a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022d0:	480c      	ldr	r0, [pc, #48]	@ (8002304 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022d2:	490d      	ldr	r1, [pc, #52]	@ (8002308 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022d4:	4a0d      	ldr	r2, [pc, #52]	@ (800230c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d8:	e002      	b.n	80022e0 <LoopCopyDataInit>

080022da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022de:	3304      	adds	r3, #4

080022e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e4:	d3f9      	bcc.n	80022da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002310 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002314 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ec:	e001      	b.n	80022f2 <LoopFillZerobss>

080022ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f0:	3204      	adds	r2, #4

080022f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f4:	d3fb      	bcc.n	80022ee <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80022f6:	f001 fb8d 	bl	8003a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022fa:	f7ff fc37 	bl	8001b6c <main>
  bx  lr    
 80022fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002300:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002308:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800230c:	080047d4 	.word	0x080047d4
  ldr r2, =_sbss
 8002310:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002314:	20000230 	.word	0x20000230

08002318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002318:	e7fe      	b.n	8002318 <ADC_IRQHandler>
	...

0800231c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002320:	4b0e      	ldr	r3, [pc, #56]	@ (800235c <HAL_Init+0x40>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0d      	ldr	r2, [pc, #52]	@ (800235c <HAL_Init+0x40>)
 8002326:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800232a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800232c:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <HAL_Init+0x40>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <HAL_Init+0x40>)
 8002332:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002336:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002338:	4b08      	ldr	r3, [pc, #32]	@ (800235c <HAL_Init+0x40>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a07      	ldr	r2, [pc, #28]	@ (800235c <HAL_Init+0x40>)
 800233e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002342:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002344:	2003      	movs	r0, #3
 8002346:	f000 f931 	bl	80025ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800234a:	200f      	movs	r0, #15
 800234c:	f000 f808 	bl	8002360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002350:	f7ff fe42 	bl	8001fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023c00 	.word	0x40023c00

08002360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002368:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_InitTick+0x54>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <HAL_InitTick+0x58>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4619      	mov	r1, r3
 8002372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002376:	fbb3 f3f1 	udiv	r3, r3, r1
 800237a:	fbb2 f3f3 	udiv	r3, r2, r3
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f93b 	bl	80025fa <HAL_SYSTICK_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e00e      	b.n	80023ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b0f      	cmp	r3, #15
 8002392:	d80a      	bhi.n	80023aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002394:	2200      	movs	r2, #0
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	f04f 30ff 	mov.w	r0, #4294967295
 800239c:	f000 f911 	bl	80025c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a0:	4a06      	ldr	r2, [pc, #24]	@ (80023bc <HAL_InitTick+0x5c>)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e000      	b.n	80023ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000000 	.word	0x20000000
 80023b8:	20000008 	.word	0x20000008
 80023bc:	20000004 	.word	0x20000004

080023c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c4:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_IncTick+0x20>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_IncTick+0x24>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4413      	add	r3, r2
 80023d0:	4a04      	ldr	r2, [pc, #16]	@ (80023e4 <HAL_IncTick+0x24>)
 80023d2:	6013      	str	r3, [r2, #0]
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000008 	.word	0x20000008
 80023e4:	200000e0 	.word	0x200000e0

080023e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return uwTick;
 80023ec:	4b03      	ldr	r3, [pc, #12]	@ (80023fc <HAL_GetTick+0x14>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	200000e0 	.word	0x200000e0

08002400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002408:	f7ff ffee 	bl	80023e8 <HAL_GetTick>
 800240c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002418:	d005      	beq.n	8002426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800241a:	4b0a      	ldr	r3, [pc, #40]	@ (8002444 <HAL_Delay+0x44>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4413      	add	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002426:	bf00      	nop
 8002428:	f7ff ffde 	bl	80023e8 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	429a      	cmp	r2, r3
 8002436:	d8f7      	bhi.n	8002428 <HAL_Delay+0x28>
  {
  }
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000008 	.word	0x20000008

08002448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002458:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <__NVIC_SetPriorityGrouping+0x44>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002464:	4013      	ands	r3, r2
 8002466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002470:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800247a:	4a04      	ldr	r2, [pc, #16]	@ (800248c <__NVIC_SetPriorityGrouping+0x44>)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	60d3      	str	r3, [r2, #12]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002494:	4b04      	ldr	r3, [pc, #16]	@ (80024a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	f003 0307 	and.w	r3, r3, #7
}
 800249e:	4618      	mov	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	db0a      	blt.n	80024d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	490c      	ldr	r1, [pc, #48]	@ (80024f8 <__NVIC_SetPriority+0x4c>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	440b      	add	r3, r1
 80024d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d4:	e00a      	b.n	80024ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4908      	ldr	r1, [pc, #32]	@ (80024fc <__NVIC_SetPriority+0x50>)
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	3b04      	subs	r3, #4
 80024e4:	0112      	lsls	r2, r2, #4
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	440b      	add	r3, r1
 80024ea:	761a      	strb	r2, [r3, #24]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000e100 	.word	0xe000e100
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	@ 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f1c3 0307 	rsb	r3, r3, #7
 800251a:	2b04      	cmp	r3, #4
 800251c:	bf28      	it	cs
 800251e:	2304      	movcs	r3, #4
 8002520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3304      	adds	r3, #4
 8002526:	2b06      	cmp	r3, #6
 8002528:	d902      	bls.n	8002530 <NVIC_EncodePriority+0x30>
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3b03      	subs	r3, #3
 800252e:	e000      	b.n	8002532 <NVIC_EncodePriority+0x32>
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	f04f 32ff 	mov.w	r2, #4294967295
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43da      	mvns	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	401a      	ands	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002548:	f04f 31ff 	mov.w	r1, #4294967295
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43d9      	mvns	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	4313      	orrs	r3, r2
         );
}
 800255a:	4618      	mov	r0, r3
 800255c:	3724      	adds	r7, #36	@ 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002578:	d301      	bcc.n	800257e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257a:	2301      	movs	r3, #1
 800257c:	e00f      	b.n	800259e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257e:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <SysTick_Config+0x40>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002586:	210f      	movs	r1, #15
 8002588:	f04f 30ff 	mov.w	r0, #4294967295
 800258c:	f7ff ff8e 	bl	80024ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002590:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <SysTick_Config+0x40>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002596:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <SysTick_Config+0x40>)
 8002598:	2207      	movs	r2, #7
 800259a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	e000e010 	.word	0xe000e010

080025ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff47 	bl	8002448 <__NVIC_SetPriorityGrouping>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d4:	f7ff ff5c 	bl	8002490 <__NVIC_GetPriorityGrouping>
 80025d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	6978      	ldr	r0, [r7, #20]
 80025e0:	f7ff ff8e 	bl	8002500 <NVIC_EncodePriority>
 80025e4:	4602      	mov	r2, r0
 80025e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff5d 	bl	80024ac <__NVIC_SetPriority>
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ffb0 	bl	8002568 <SysTick_Config>
 8002608:	4603      	mov	r3, r0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	@ 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	e159      	b.n	80028e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002630:	2201      	movs	r2, #1
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	429a      	cmp	r2, r3
 800264a:	f040 8148 	bne.w	80028de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b01      	cmp	r3, #1
 8002658:	d005      	beq.n	8002666 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002662:	2b02      	cmp	r3, #2
 8002664:	d130      	bne.n	80026c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	2203      	movs	r2, #3
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800269c:	2201      	movs	r2, #1
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 0201 	and.w	r2, r3, #1
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d017      	beq.n	8002704 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	2203      	movs	r2, #3
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d123      	bne.n	8002758 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	08da      	lsrs	r2, r3, #3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3208      	adds	r2, #8
 8002718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	220f      	movs	r2, #15
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	08da      	lsrs	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3208      	adds	r2, #8
 8002752:	69b9      	ldr	r1, [r7, #24]
 8002754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	2203      	movs	r2, #3
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0203 	and.w	r2, r3, #3
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80a2 	beq.w	80028de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b57      	ldr	r3, [pc, #348]	@ (80028fc <HAL_GPIO_Init+0x2e8>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a2:	4a56      	ldr	r2, [pc, #344]	@ (80028fc <HAL_GPIO_Init+0x2e8>)
 80027a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027aa:	4b54      	ldr	r3, [pc, #336]	@ (80028fc <HAL_GPIO_Init+0x2e8>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027b6:	4a52      	ldr	r2, [pc, #328]	@ (8002900 <HAL_GPIO_Init+0x2ec>)
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	089b      	lsrs	r3, r3, #2
 80027bc:	3302      	adds	r3, #2
 80027be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	220f      	movs	r2, #15
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a49      	ldr	r2, [pc, #292]	@ (8002904 <HAL_GPIO_Init+0x2f0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d019      	beq.n	8002816 <HAL_GPIO_Init+0x202>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a48      	ldr	r2, [pc, #288]	@ (8002908 <HAL_GPIO_Init+0x2f4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <HAL_GPIO_Init+0x1fe>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a47      	ldr	r2, [pc, #284]	@ (800290c <HAL_GPIO_Init+0x2f8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00d      	beq.n	800280e <HAL_GPIO_Init+0x1fa>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a46      	ldr	r2, [pc, #280]	@ (8002910 <HAL_GPIO_Init+0x2fc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d007      	beq.n	800280a <HAL_GPIO_Init+0x1f6>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a45      	ldr	r2, [pc, #276]	@ (8002914 <HAL_GPIO_Init+0x300>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d101      	bne.n	8002806 <HAL_GPIO_Init+0x1f2>
 8002802:	2304      	movs	r3, #4
 8002804:	e008      	b.n	8002818 <HAL_GPIO_Init+0x204>
 8002806:	2307      	movs	r3, #7
 8002808:	e006      	b.n	8002818 <HAL_GPIO_Init+0x204>
 800280a:	2303      	movs	r3, #3
 800280c:	e004      	b.n	8002818 <HAL_GPIO_Init+0x204>
 800280e:	2302      	movs	r3, #2
 8002810:	e002      	b.n	8002818 <HAL_GPIO_Init+0x204>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <HAL_GPIO_Init+0x204>
 8002816:	2300      	movs	r3, #0
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	f002 0203 	and.w	r2, r2, #3
 800281e:	0092      	lsls	r2, r2, #2
 8002820:	4093      	lsls	r3, r2
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002828:	4935      	ldr	r1, [pc, #212]	@ (8002900 <HAL_GPIO_Init+0x2ec>)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002836:	4b38      	ldr	r3, [pc, #224]	@ (8002918 <HAL_GPIO_Init+0x304>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800285a:	4a2f      	ldr	r2, [pc, #188]	@ (8002918 <HAL_GPIO_Init+0x304>)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002860:	4b2d      	ldr	r3, [pc, #180]	@ (8002918 <HAL_GPIO_Init+0x304>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002884:	4a24      	ldr	r2, [pc, #144]	@ (8002918 <HAL_GPIO_Init+0x304>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800288a:	4b23      	ldr	r3, [pc, #140]	@ (8002918 <HAL_GPIO_Init+0x304>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002918 <HAL_GPIO_Init+0x304>)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b4:	4b18      	ldr	r3, [pc, #96]	@ (8002918 <HAL_GPIO_Init+0x304>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002918 <HAL_GPIO_Init+0x304>)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3301      	adds	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b0f      	cmp	r3, #15
 80028e8:	f67f aea2 	bls.w	8002630 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3724      	adds	r7, #36	@ 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800
 8002900:	40013800 	.word	0x40013800
 8002904:	40020000 	.word	0x40020000
 8002908:	40020400 	.word	0x40020400
 800290c:	40020800 	.word	0x40020800
 8002910:	40020c00 	.word	0x40020c00
 8002914:	40021000 	.word	0x40021000
 8002918:	40013c00 	.word	0x40013c00

0800291c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	887b      	ldrh	r3, [r7, #2]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	e001      	b.n	800293e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e267      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d075      	beq.n	8002a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800296a:	4b88      	ldr	r3, [pc, #544]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b04      	cmp	r3, #4
 8002974:	d00c      	beq.n	8002990 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002976:	4b85      	ldr	r3, [pc, #532]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800297e:	2b08      	cmp	r3, #8
 8002980:	d112      	bne.n	80029a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002982:	4b82      	ldr	r3, [pc, #520]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800298a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800298e:	d10b      	bne.n	80029a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002990:	4b7e      	ldr	r3, [pc, #504]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d05b      	beq.n	8002a54 <HAL_RCC_OscConfig+0x108>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d157      	bne.n	8002a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e242      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b0:	d106      	bne.n	80029c0 <HAL_RCC_OscConfig+0x74>
 80029b2:	4b76      	ldr	r3, [pc, #472]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a75      	ldr	r2, [pc, #468]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e01d      	b.n	80029fc <HAL_RCC_OscConfig+0xb0>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x98>
 80029ca:	4b70      	ldr	r3, [pc, #448]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6f      	ldr	r2, [pc, #444]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a6c      	ldr	r2, [pc, #432]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e00b      	b.n	80029fc <HAL_RCC_OscConfig+0xb0>
 80029e4:	4b69      	ldr	r3, [pc, #420]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a68      	ldr	r2, [pc, #416]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	4b66      	ldr	r3, [pc, #408]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a65      	ldr	r2, [pc, #404]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d013      	beq.n	8002a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7ff fcf0 	bl	80023e8 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7ff fcec 	bl	80023e8 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	@ 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e207      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b5b      	ldr	r3, [pc, #364]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0xc0>
 8002a2a:	e014      	b.n	8002a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7ff fcdc 	bl	80023e8 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a34:	f7ff fcd8 	bl	80023e8 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	@ 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e1f3      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a46:	4b51      	ldr	r3, [pc, #324]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0xe8>
 8002a52:	e000      	b.n	8002a56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d063      	beq.n	8002b2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a62:	4b4a      	ldr	r3, [pc, #296]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6e:	4b47      	ldr	r3, [pc, #284]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d11c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7a:	4b44      	ldr	r3, [pc, #272]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d116      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a86:	4b41      	ldr	r3, [pc, #260]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_RCC_OscConfig+0x152>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e1c7      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4937      	ldr	r1, [pc, #220]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab2:	e03a      	b.n	8002b2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d020      	beq.n	8002afe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002abc:	4b34      	ldr	r3, [pc, #208]	@ (8002b90 <HAL_RCC_OscConfig+0x244>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac2:	f7ff fc91 	bl	80023e8 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aca:	f7ff fc8d 	bl	80023e8 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e1a8      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002adc:	4b2b      	ldr	r3, [pc, #172]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae8:	4b28      	ldr	r3, [pc, #160]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4925      	ldr	r1, [pc, #148]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]
 8002afc:	e015      	b.n	8002b2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afe:	4b24      	ldr	r3, [pc, #144]	@ (8002b90 <HAL_RCC_OscConfig+0x244>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7ff fc70 	bl	80023e8 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0c:	f7ff fc6c 	bl	80023e8 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e187      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d036      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d016      	beq.n	8002b6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3e:	4b15      	ldr	r3, [pc, #84]	@ (8002b94 <HAL_RCC_OscConfig+0x248>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b44:	f7ff fc50 	bl	80023e8 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b4c:	f7ff fc4c 	bl	80023e8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e167      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x200>
 8002b6a:	e01b      	b.n	8002ba4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b6c:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <HAL_RCC_OscConfig+0x248>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b72:	f7ff fc39 	bl	80023e8 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b78:	e00e      	b.n	8002b98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b7a:	f7ff fc35 	bl	80023e8 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d907      	bls.n	8002b98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e150      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	42470000 	.word	0x42470000
 8002b94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b98:	4b88      	ldr	r3, [pc, #544]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002b9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ea      	bne.n	8002b7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8097 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb6:	4b81      	ldr	r3, [pc, #516]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10f      	bne.n	8002be2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	4b7d      	ldr	r3, [pc, #500]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	4a7c      	ldr	r2, [pc, #496]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd2:	4b7a      	ldr	r3, [pc, #488]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bde:	2301      	movs	r3, #1
 8002be0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be2:	4b77      	ldr	r3, [pc, #476]	@ (8002dc0 <HAL_RCC_OscConfig+0x474>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d118      	bne.n	8002c20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bee:	4b74      	ldr	r3, [pc, #464]	@ (8002dc0 <HAL_RCC_OscConfig+0x474>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a73      	ldr	r2, [pc, #460]	@ (8002dc0 <HAL_RCC_OscConfig+0x474>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfa:	f7ff fbf5 	bl	80023e8 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c02:	f7ff fbf1 	bl	80023e8 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e10c      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	4b6a      	ldr	r3, [pc, #424]	@ (8002dc0 <HAL_RCC_OscConfig+0x474>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x2ea>
 8002c28:	4b64      	ldr	r3, [pc, #400]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2c:	4a63      	ldr	r2, [pc, #396]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c34:	e01c      	b.n	8002c70 <HAL_RCC_OscConfig+0x324>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b05      	cmp	r3, #5
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x30c>
 8002c3e:	4b5f      	ldr	r3, [pc, #380]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c42:	4a5e      	ldr	r2, [pc, #376]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c44:	f043 0304 	orr.w	r3, r3, #4
 8002c48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c4a:	4b5c      	ldr	r3, [pc, #368]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4e:	4a5b      	ldr	r2, [pc, #364]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c56:	e00b      	b.n	8002c70 <HAL_RCC_OscConfig+0x324>
 8002c58:	4b58      	ldr	r3, [pc, #352]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5c:	4a57      	ldr	r2, [pc, #348]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c64:	4b55      	ldr	r3, [pc, #340]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c68:	4a54      	ldr	r2, [pc, #336]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c6a:	f023 0304 	bic.w	r3, r3, #4
 8002c6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d015      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7ff fbb6 	bl	80023e8 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c80:	f7ff fbb2 	bl	80023e8 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e0cb      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c96:	4b49      	ldr	r3, [pc, #292]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0ee      	beq.n	8002c80 <HAL_RCC_OscConfig+0x334>
 8002ca2:	e014      	b.n	8002cce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca4:	f7ff fba0 	bl	80023e8 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cac:	f7ff fb9c 	bl	80023e8 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e0b5      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1ee      	bne.n	8002cac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d105      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd4:	4b39      	ldr	r3, [pc, #228]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd8:	4a38      	ldr	r2, [pc, #224]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002cda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80a1 	beq.w	8002e2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cea:	4b34      	ldr	r3, [pc, #208]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d05c      	beq.n	8002db0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d141      	bne.n	8002d82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b31      	ldr	r3, [pc, #196]	@ (8002dc4 <HAL_RCC_OscConfig+0x478>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7ff fb70 	bl	80023e8 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7ff fb6c 	bl	80023e8 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e087      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	4b27      	ldr	r3, [pc, #156]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	019b      	lsls	r3, r3, #6
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	3b01      	subs	r3, #1
 8002d44:	041b      	lsls	r3, r3, #16
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	491b      	ldr	r1, [pc, #108]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d54:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc4 <HAL_RCC_OscConfig+0x478>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5a:	f7ff fb45 	bl	80023e8 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d62:	f7ff fb41 	bl	80023e8 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e05c      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d74:	4b11      	ldr	r3, [pc, #68]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x416>
 8002d80:	e054      	b.n	8002e2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d82:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <HAL_RCC_OscConfig+0x478>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7ff fb2e 	bl	80023e8 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d90:	f7ff fb2a 	bl	80023e8 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e045      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da2:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x444>
 8002dae:	e03d      	b.n	8002e2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e038      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e38 <HAL_RCC_OscConfig+0x4ec>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d028      	beq.n	8002e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d121      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d11a      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002df8:	4013      	ands	r3, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d111      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0e:	085b      	lsrs	r3, r3, #1
 8002e10:	3b01      	subs	r3, #1
 8002e12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800

08002e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0cc      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e50:	4b68      	ldr	r3, [pc, #416]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d90c      	bls.n	8002e78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b65      	ldr	r3, [pc, #404]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b63      	ldr	r3, [pc, #396]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0b8      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d020      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e90:	4b59      	ldr	r3, [pc, #356]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4a58      	ldr	r2, [pc, #352]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea8:	4b53      	ldr	r3, [pc, #332]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4a52      	ldr	r2, [pc, #328]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002eb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb4:	4b50      	ldr	r3, [pc, #320]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	494d      	ldr	r1, [pc, #308]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d044      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d107      	bne.n	8002eea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	4b47      	ldr	r3, [pc, #284]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d119      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e07f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	4b3f      	ldr	r3, [pc, #252]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e06f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e067      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f1a:	4b37      	ldr	r3, [pc, #220]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f023 0203 	bic.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4934      	ldr	r1, [pc, #208]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f2c:	f7ff fa5c 	bl	80023e8 <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f34:	f7ff fa58 	bl	80023e8 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e04f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 020c 	and.w	r2, r3, #12
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d1eb      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b25      	ldr	r3, [pc, #148]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d20c      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b22      	ldr	r3, [pc, #136]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b20      	ldr	r3, [pc, #128]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e032      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f90:	4b19      	ldr	r3, [pc, #100]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4916      	ldr	r1, [pc, #88]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fae:	4b12      	ldr	r3, [pc, #72]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	490e      	ldr	r1, [pc, #56]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fc2:	f000 f821 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	490a      	ldr	r1, [pc, #40]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002fd4:	5ccb      	ldrb	r3, [r1, r3]
 8002fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fda:	4a09      	ldr	r2, [pc, #36]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fde:	4b09      	ldr	r3, [pc, #36]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff f9bc 	bl	8002360 <HAL_InitTick>

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023c00 	.word	0x40023c00
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	080046d4 	.word	0x080046d4
 8003000:	20000000 	.word	0x20000000
 8003004:	20000004 	.word	0x20000004

08003008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800300c:	b090      	sub	sp, #64	@ 0x40
 800300e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	637b      	str	r3, [r7, #52]	@ 0x34
 8003014:	2300      	movs	r3, #0
 8003016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003018:	2300      	movs	r3, #0
 800301a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003020:	4b59      	ldr	r3, [pc, #356]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b08      	cmp	r3, #8
 800302a:	d00d      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x40>
 800302c:	2b08      	cmp	r3, #8
 800302e:	f200 80a1 	bhi.w	8003174 <HAL_RCC_GetSysClockFreq+0x16c>
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x34>
 8003036:	2b04      	cmp	r3, #4
 8003038:	d003      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x3a>
 800303a:	e09b      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b53      	ldr	r3, [pc, #332]	@ (800318c <HAL_RCC_GetSysClockFreq+0x184>)
 800303e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003040:	e09b      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003042:	4b53      	ldr	r3, [pc, #332]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x188>)
 8003044:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003046:	e098      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003048:	4b4f      	ldr	r3, [pc, #316]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003050:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003052:	4b4d      	ldr	r3, [pc, #308]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d028      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305e:	4b4a      	ldr	r3, [pc, #296]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	099b      	lsrs	r3, r3, #6
 8003064:	2200      	movs	r2, #0
 8003066:	623b      	str	r3, [r7, #32]
 8003068:	627a      	str	r2, [r7, #36]	@ 0x24
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003070:	2100      	movs	r1, #0
 8003072:	4b47      	ldr	r3, [pc, #284]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x188>)
 8003074:	fb03 f201 	mul.w	r2, r3, r1
 8003078:	2300      	movs	r3, #0
 800307a:	fb00 f303 	mul.w	r3, r0, r3
 800307e:	4413      	add	r3, r2
 8003080:	4a43      	ldr	r2, [pc, #268]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x188>)
 8003082:	fba0 1202 	umull	r1, r2, r0, r2
 8003086:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003088:	460a      	mov	r2, r1
 800308a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800308c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800308e:	4413      	add	r3, r2
 8003090:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003094:	2200      	movs	r2, #0
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	61fa      	str	r2, [r7, #28]
 800309a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800309e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80030a2:	f7fd f8ed 	bl	8000280 <__aeabi_uldivmod>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4613      	mov	r3, r2
 80030ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030ae:	e053      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b0:	4b35      	ldr	r3, [pc, #212]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	099b      	lsrs	r3, r3, #6
 80030b6:	2200      	movs	r2, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	617a      	str	r2, [r7, #20]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030c2:	f04f 0b00 	mov.w	fp, #0
 80030c6:	4652      	mov	r2, sl
 80030c8:	465b      	mov	r3, fp
 80030ca:	f04f 0000 	mov.w	r0, #0
 80030ce:	f04f 0100 	mov.w	r1, #0
 80030d2:	0159      	lsls	r1, r3, #5
 80030d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d8:	0150      	lsls	r0, r2, #5
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	ebb2 080a 	subs.w	r8, r2, sl
 80030e2:	eb63 090b 	sbc.w	r9, r3, fp
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030fa:	ebb2 0408 	subs.w	r4, r2, r8
 80030fe:	eb63 0509 	sbc.w	r5, r3, r9
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	00eb      	lsls	r3, r5, #3
 800310c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003110:	00e2      	lsls	r2, r4, #3
 8003112:	4614      	mov	r4, r2
 8003114:	461d      	mov	r5, r3
 8003116:	eb14 030a 	adds.w	r3, r4, sl
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	eb45 030b 	adc.w	r3, r5, fp
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800312e:	4629      	mov	r1, r5
 8003130:	028b      	lsls	r3, r1, #10
 8003132:	4621      	mov	r1, r4
 8003134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003138:	4621      	mov	r1, r4
 800313a:	028a      	lsls	r2, r1, #10
 800313c:	4610      	mov	r0, r2
 800313e:	4619      	mov	r1, r3
 8003140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003142:	2200      	movs	r2, #0
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	60fa      	str	r2, [r7, #12]
 8003148:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800314c:	f7fd f898 	bl	8000280 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003158:	4b0b      	ldr	r3, [pc, #44]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	3301      	adds	r3, #1
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003168:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800316a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003172:	e002      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003174:	4b05      	ldr	r3, [pc, #20]	@ (800318c <HAL_RCC_GetSysClockFreq+0x184>)
 8003176:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800317a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800317c:	4618      	mov	r0, r3
 800317e:	3740      	adds	r7, #64	@ 0x40
 8003180:	46bd      	mov	sp, r7
 8003182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800
 800318c:	00f42400 	.word	0x00f42400
 8003190:	017d7840 	.word	0x017d7840

08003194 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e07b      	b.n	800329e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d108      	bne.n	80031c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031b6:	d009      	beq.n	80031cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	61da      	str	r2, [r3, #28]
 80031be:	e005      	b.n	80031cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fe ff1e 	bl	8002028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003202:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003250:	ea42 0103 	orr.w	r1, r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	0c1b      	lsrs	r3, r3, #16
 800326a:	f003 0104 	and.w	r1, r3, #4
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	f003 0210 	and.w	r2, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800328c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b088      	sub	sp, #32
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	4613      	mov	r3, r2
 80032b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_SPI_Transmit+0x22>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e12d      	b.n	8003524 <HAL_SPI_Transmit+0x27e>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032d0:	f7ff f88a 	bl	80023e8 <HAL_GetTick>
 80032d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d002      	beq.n	80032ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032e6:	2302      	movs	r3, #2
 80032e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032ea:	e116      	b.n	800351a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_SPI_Transmit+0x52>
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032fc:	e10d      	b.n	800351a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2203      	movs	r2, #3
 8003302:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	88fa      	ldrh	r2, [r7, #6]
 8003316:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	88fa      	ldrh	r2, [r7, #6]
 800331c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003344:	d10f      	bne.n	8003366 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003354:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003364:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003370:	2b40      	cmp	r3, #64	@ 0x40
 8003372:	d007      	beq.n	8003384 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003382:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800338c:	d14f      	bne.n	800342e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_SPI_Transmit+0xf6>
 8003396:	8afb      	ldrh	r3, [r7, #22]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d142      	bne.n	8003422 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a0:	881a      	ldrh	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	1c9a      	adds	r2, r3, #2
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033c0:	e02f      	b.n	8003422 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d112      	bne.n	80033f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	881a      	ldrh	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e0:	1c9a      	adds	r2, r3, #2
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80033f4:	e015      	b.n	8003422 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033f6:	f7fe fff7 	bl	80023e8 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d803      	bhi.n	800340e <HAL_SPI_Transmit+0x168>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d102      	bne.n	8003414 <HAL_SPI_Transmit+0x16e>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d106      	bne.n	8003422 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003420:	e07b      	b.n	800351a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1ca      	bne.n	80033c2 <HAL_SPI_Transmit+0x11c>
 800342c:	e050      	b.n	80034d0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <HAL_SPI_Transmit+0x196>
 8003436:	8afb      	ldrh	r3, [r7, #22]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d144      	bne.n	80034c6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	330c      	adds	r3, #12
 8003446:	7812      	ldrb	r2, [r2, #0]
 8003448:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003462:	e030      	b.n	80034c6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b02      	cmp	r3, #2
 8003470:	d113      	bne.n	800349a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	330c      	adds	r3, #12
 800347c:	7812      	ldrb	r2, [r2, #0]
 800347e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800348e:	b29b      	uxth	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003498:	e015      	b.n	80034c6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800349a:	f7fe ffa5 	bl	80023e8 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d803      	bhi.n	80034b2 <HAL_SPI_Transmit+0x20c>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b0:	d102      	bne.n	80034b8 <HAL_SPI_Transmit+0x212>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d106      	bne.n	80034c6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80034c4:	e029      	b.n	800351a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1c9      	bne.n	8003464 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	6839      	ldr	r1, [r7, #0]
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f8b1 	bl	800363c <SPI_EndRxTxTransaction>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e003      	b.n	800351a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003522:	7ffb      	ldrb	r3, [r7, #31]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3720      	adds	r7, #32
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800353c:	f7fe ff54 	bl	80023e8 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	4413      	add	r3, r2
 800354a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800354c:	f7fe ff4c 	bl	80023e8 <HAL_GetTick>
 8003550:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003552:	4b39      	ldr	r3, [pc, #228]	@ (8003638 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	015b      	lsls	r3, r3, #5
 8003558:	0d1b      	lsrs	r3, r3, #20
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003562:	e054      	b.n	800360e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356a:	d050      	beq.n	800360e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800356c:	f7fe ff3c 	bl	80023e8 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	429a      	cmp	r2, r3
 800357a:	d902      	bls.n	8003582 <SPI_WaitFlagStateUntilTimeout+0x56>
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d13d      	bne.n	80035fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003590:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800359a:	d111      	bne.n	80035c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035a4:	d004      	beq.n	80035b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ae:	d107      	bne.n	80035c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035c8:	d10f      	bne.n	80035ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e017      	b.n	800362e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	3b01      	subs	r3, #1
 800360c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4013      	ands	r3, r2
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	429a      	cmp	r2, r3
 800362a:	d19b      	bne.n	8003564 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000000 	.word	0x20000000

0800363c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2201      	movs	r2, #1
 8003650:	2102      	movs	r1, #2
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f7ff ff6a 	bl	800352c <SPI_WaitFlagStateUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003662:	f043 0220 	orr.w	r2, r3, #32
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e032      	b.n	80036d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800366e:	4b1b      	ldr	r3, [pc, #108]	@ (80036dc <SPI_EndRxTxTransaction+0xa0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1b      	ldr	r2, [pc, #108]	@ (80036e0 <SPI_EndRxTxTransaction+0xa4>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	0d5b      	lsrs	r3, r3, #21
 800367a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800368c:	d112      	bne.n	80036b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2200      	movs	r2, #0
 8003696:	2180      	movs	r1, #128	@ 0x80
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f7ff ff47 	bl	800352c <SPI_WaitFlagStateUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d016      	beq.n	80036d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a8:	f043 0220 	orr.w	r2, r3, #32
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e00f      	b.n	80036d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	3b01      	subs	r3, #1
 80036be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ca:	2b80      	cmp	r3, #128	@ 0x80
 80036cc:	d0f2      	beq.n	80036b4 <SPI_EndRxTxTransaction+0x78>
 80036ce:	e000      	b.n	80036d2 <SPI_EndRxTxTransaction+0x96>
        break;
 80036d0:	bf00      	nop
  }

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	20000000 	.word	0x20000000
 80036e0:	165e9f81 	.word	0x165e9f81

080036e4 <rand>:
 80036e4:	4b16      	ldr	r3, [pc, #88]	@ (8003740 <rand+0x5c>)
 80036e6:	b510      	push	{r4, lr}
 80036e8:	681c      	ldr	r4, [r3, #0]
 80036ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80036ec:	b9b3      	cbnz	r3, 800371c <rand+0x38>
 80036ee:	2018      	movs	r0, #24
 80036f0:	f000 fa2e 	bl	8003b50 <malloc>
 80036f4:	4602      	mov	r2, r0
 80036f6:	6320      	str	r0, [r4, #48]	@ 0x30
 80036f8:	b920      	cbnz	r0, 8003704 <rand+0x20>
 80036fa:	4b12      	ldr	r3, [pc, #72]	@ (8003744 <rand+0x60>)
 80036fc:	4812      	ldr	r0, [pc, #72]	@ (8003748 <rand+0x64>)
 80036fe:	2152      	movs	r1, #82	@ 0x52
 8003700:	f000 f9be 	bl	8003a80 <__assert_func>
 8003704:	4911      	ldr	r1, [pc, #68]	@ (800374c <rand+0x68>)
 8003706:	4b12      	ldr	r3, [pc, #72]	@ (8003750 <rand+0x6c>)
 8003708:	e9c0 1300 	strd	r1, r3, [r0]
 800370c:	4b11      	ldr	r3, [pc, #68]	@ (8003754 <rand+0x70>)
 800370e:	6083      	str	r3, [r0, #8]
 8003710:	230b      	movs	r3, #11
 8003712:	8183      	strh	r3, [r0, #12]
 8003714:	2100      	movs	r1, #0
 8003716:	2001      	movs	r0, #1
 8003718:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800371c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800371e:	480e      	ldr	r0, [pc, #56]	@ (8003758 <rand+0x74>)
 8003720:	690b      	ldr	r3, [r1, #16]
 8003722:	694c      	ldr	r4, [r1, #20]
 8003724:	4a0d      	ldr	r2, [pc, #52]	@ (800375c <rand+0x78>)
 8003726:	4358      	muls	r0, r3
 8003728:	fb02 0004 	mla	r0, r2, r4, r0
 800372c:	fba3 3202 	umull	r3, r2, r3, r2
 8003730:	3301      	adds	r3, #1
 8003732:	eb40 0002 	adc.w	r0, r0, r2
 8003736:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800373a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800373e:	bd10      	pop	{r4, pc}
 8003740:	20000018 	.word	0x20000018
 8003744:	080046e4 	.word	0x080046e4
 8003748:	080046fb 	.word	0x080046fb
 800374c:	abcd330e 	.word	0xabcd330e
 8003750:	e66d1234 	.word	0xe66d1234
 8003754:	0005deec 	.word	0x0005deec
 8003758:	5851f42d 	.word	0x5851f42d
 800375c:	4c957f2d 	.word	0x4c957f2d

08003760 <std>:
 8003760:	2300      	movs	r3, #0
 8003762:	b510      	push	{r4, lr}
 8003764:	4604      	mov	r4, r0
 8003766:	e9c0 3300 	strd	r3, r3, [r0]
 800376a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800376e:	6083      	str	r3, [r0, #8]
 8003770:	8181      	strh	r1, [r0, #12]
 8003772:	6643      	str	r3, [r0, #100]	@ 0x64
 8003774:	81c2      	strh	r2, [r0, #14]
 8003776:	6183      	str	r3, [r0, #24]
 8003778:	4619      	mov	r1, r3
 800377a:	2208      	movs	r2, #8
 800377c:	305c      	adds	r0, #92	@ 0x5c
 800377e:	f000 f8f4 	bl	800396a <memset>
 8003782:	4b0d      	ldr	r3, [pc, #52]	@ (80037b8 <std+0x58>)
 8003784:	6263      	str	r3, [r4, #36]	@ 0x24
 8003786:	4b0d      	ldr	r3, [pc, #52]	@ (80037bc <std+0x5c>)
 8003788:	62a3      	str	r3, [r4, #40]	@ 0x28
 800378a:	4b0d      	ldr	r3, [pc, #52]	@ (80037c0 <std+0x60>)
 800378c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800378e:	4b0d      	ldr	r3, [pc, #52]	@ (80037c4 <std+0x64>)
 8003790:	6323      	str	r3, [r4, #48]	@ 0x30
 8003792:	4b0d      	ldr	r3, [pc, #52]	@ (80037c8 <std+0x68>)
 8003794:	6224      	str	r4, [r4, #32]
 8003796:	429c      	cmp	r4, r3
 8003798:	d006      	beq.n	80037a8 <std+0x48>
 800379a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800379e:	4294      	cmp	r4, r2
 80037a0:	d002      	beq.n	80037a8 <std+0x48>
 80037a2:	33d0      	adds	r3, #208	@ 0xd0
 80037a4:	429c      	cmp	r4, r3
 80037a6:	d105      	bne.n	80037b4 <std+0x54>
 80037a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80037ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037b0:	f000 b954 	b.w	8003a5c <__retarget_lock_init_recursive>
 80037b4:	bd10      	pop	{r4, pc}
 80037b6:	bf00      	nop
 80037b8:	080038e5 	.word	0x080038e5
 80037bc:	08003907 	.word	0x08003907
 80037c0:	0800393f 	.word	0x0800393f
 80037c4:	08003963 	.word	0x08003963
 80037c8:	200000e4 	.word	0x200000e4

080037cc <stdio_exit_handler>:
 80037cc:	4a02      	ldr	r2, [pc, #8]	@ (80037d8 <stdio_exit_handler+0xc>)
 80037ce:	4903      	ldr	r1, [pc, #12]	@ (80037dc <stdio_exit_handler+0x10>)
 80037d0:	4803      	ldr	r0, [pc, #12]	@ (80037e0 <stdio_exit_handler+0x14>)
 80037d2:	f000 b869 	b.w	80038a8 <_fwalk_sglue>
 80037d6:	bf00      	nop
 80037d8:	2000000c 	.word	0x2000000c
 80037dc:	08003dc5 	.word	0x08003dc5
 80037e0:	2000001c 	.word	0x2000001c

080037e4 <cleanup_stdio>:
 80037e4:	6841      	ldr	r1, [r0, #4]
 80037e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003818 <cleanup_stdio+0x34>)
 80037e8:	4299      	cmp	r1, r3
 80037ea:	b510      	push	{r4, lr}
 80037ec:	4604      	mov	r4, r0
 80037ee:	d001      	beq.n	80037f4 <cleanup_stdio+0x10>
 80037f0:	f000 fae8 	bl	8003dc4 <_fflush_r>
 80037f4:	68a1      	ldr	r1, [r4, #8]
 80037f6:	4b09      	ldr	r3, [pc, #36]	@ (800381c <cleanup_stdio+0x38>)
 80037f8:	4299      	cmp	r1, r3
 80037fa:	d002      	beq.n	8003802 <cleanup_stdio+0x1e>
 80037fc:	4620      	mov	r0, r4
 80037fe:	f000 fae1 	bl	8003dc4 <_fflush_r>
 8003802:	68e1      	ldr	r1, [r4, #12]
 8003804:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <cleanup_stdio+0x3c>)
 8003806:	4299      	cmp	r1, r3
 8003808:	d004      	beq.n	8003814 <cleanup_stdio+0x30>
 800380a:	4620      	mov	r0, r4
 800380c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003810:	f000 bad8 	b.w	8003dc4 <_fflush_r>
 8003814:	bd10      	pop	{r4, pc}
 8003816:	bf00      	nop
 8003818:	200000e4 	.word	0x200000e4
 800381c:	2000014c 	.word	0x2000014c
 8003820:	200001b4 	.word	0x200001b4

08003824 <global_stdio_init.part.0>:
 8003824:	b510      	push	{r4, lr}
 8003826:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <global_stdio_init.part.0+0x30>)
 8003828:	4c0b      	ldr	r4, [pc, #44]	@ (8003858 <global_stdio_init.part.0+0x34>)
 800382a:	4a0c      	ldr	r2, [pc, #48]	@ (800385c <global_stdio_init.part.0+0x38>)
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	4620      	mov	r0, r4
 8003830:	2200      	movs	r2, #0
 8003832:	2104      	movs	r1, #4
 8003834:	f7ff ff94 	bl	8003760 <std>
 8003838:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800383c:	2201      	movs	r2, #1
 800383e:	2109      	movs	r1, #9
 8003840:	f7ff ff8e 	bl	8003760 <std>
 8003844:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003848:	2202      	movs	r2, #2
 800384a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800384e:	2112      	movs	r1, #18
 8003850:	f7ff bf86 	b.w	8003760 <std>
 8003854:	2000021c 	.word	0x2000021c
 8003858:	200000e4 	.word	0x200000e4
 800385c:	080037cd 	.word	0x080037cd

08003860 <__sfp_lock_acquire>:
 8003860:	4801      	ldr	r0, [pc, #4]	@ (8003868 <__sfp_lock_acquire+0x8>)
 8003862:	f000 b8fc 	b.w	8003a5e <__retarget_lock_acquire_recursive>
 8003866:	bf00      	nop
 8003868:	20000225 	.word	0x20000225

0800386c <__sfp_lock_release>:
 800386c:	4801      	ldr	r0, [pc, #4]	@ (8003874 <__sfp_lock_release+0x8>)
 800386e:	f000 b8f7 	b.w	8003a60 <__retarget_lock_release_recursive>
 8003872:	bf00      	nop
 8003874:	20000225 	.word	0x20000225

08003878 <__sinit>:
 8003878:	b510      	push	{r4, lr}
 800387a:	4604      	mov	r4, r0
 800387c:	f7ff fff0 	bl	8003860 <__sfp_lock_acquire>
 8003880:	6a23      	ldr	r3, [r4, #32]
 8003882:	b11b      	cbz	r3, 800388c <__sinit+0x14>
 8003884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003888:	f7ff bff0 	b.w	800386c <__sfp_lock_release>
 800388c:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <__sinit+0x28>)
 800388e:	6223      	str	r3, [r4, #32]
 8003890:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <__sinit+0x2c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1f5      	bne.n	8003884 <__sinit+0xc>
 8003898:	f7ff ffc4 	bl	8003824 <global_stdio_init.part.0>
 800389c:	e7f2      	b.n	8003884 <__sinit+0xc>
 800389e:	bf00      	nop
 80038a0:	080037e5 	.word	0x080037e5
 80038a4:	2000021c 	.word	0x2000021c

080038a8 <_fwalk_sglue>:
 80038a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038ac:	4607      	mov	r7, r0
 80038ae:	4688      	mov	r8, r1
 80038b0:	4614      	mov	r4, r2
 80038b2:	2600      	movs	r6, #0
 80038b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038b8:	f1b9 0901 	subs.w	r9, r9, #1
 80038bc:	d505      	bpl.n	80038ca <_fwalk_sglue+0x22>
 80038be:	6824      	ldr	r4, [r4, #0]
 80038c0:	2c00      	cmp	r4, #0
 80038c2:	d1f7      	bne.n	80038b4 <_fwalk_sglue+0xc>
 80038c4:	4630      	mov	r0, r6
 80038c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ca:	89ab      	ldrh	r3, [r5, #12]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d907      	bls.n	80038e0 <_fwalk_sglue+0x38>
 80038d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038d4:	3301      	adds	r3, #1
 80038d6:	d003      	beq.n	80038e0 <_fwalk_sglue+0x38>
 80038d8:	4629      	mov	r1, r5
 80038da:	4638      	mov	r0, r7
 80038dc:	47c0      	blx	r8
 80038de:	4306      	orrs	r6, r0
 80038e0:	3568      	adds	r5, #104	@ 0x68
 80038e2:	e7e9      	b.n	80038b8 <_fwalk_sglue+0x10>

080038e4 <__sread>:
 80038e4:	b510      	push	{r4, lr}
 80038e6:	460c      	mov	r4, r1
 80038e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038ec:	f000 f868 	bl	80039c0 <_read_r>
 80038f0:	2800      	cmp	r0, #0
 80038f2:	bfab      	itete	ge
 80038f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80038f6:	89a3      	ldrhlt	r3, [r4, #12]
 80038f8:	181b      	addge	r3, r3, r0
 80038fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80038fe:	bfac      	ite	ge
 8003900:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003902:	81a3      	strhlt	r3, [r4, #12]
 8003904:	bd10      	pop	{r4, pc}

08003906 <__swrite>:
 8003906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800390a:	461f      	mov	r7, r3
 800390c:	898b      	ldrh	r3, [r1, #12]
 800390e:	05db      	lsls	r3, r3, #23
 8003910:	4605      	mov	r5, r0
 8003912:	460c      	mov	r4, r1
 8003914:	4616      	mov	r6, r2
 8003916:	d505      	bpl.n	8003924 <__swrite+0x1e>
 8003918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800391c:	2302      	movs	r3, #2
 800391e:	2200      	movs	r2, #0
 8003920:	f000 f83c 	bl	800399c <_lseek_r>
 8003924:	89a3      	ldrh	r3, [r4, #12]
 8003926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800392a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800392e:	81a3      	strh	r3, [r4, #12]
 8003930:	4632      	mov	r2, r6
 8003932:	463b      	mov	r3, r7
 8003934:	4628      	mov	r0, r5
 8003936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800393a:	f000 b853 	b.w	80039e4 <_write_r>

0800393e <__sseek>:
 800393e:	b510      	push	{r4, lr}
 8003940:	460c      	mov	r4, r1
 8003942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003946:	f000 f829 	bl	800399c <_lseek_r>
 800394a:	1c43      	adds	r3, r0, #1
 800394c:	89a3      	ldrh	r3, [r4, #12]
 800394e:	bf15      	itete	ne
 8003950:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003952:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003956:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800395a:	81a3      	strheq	r3, [r4, #12]
 800395c:	bf18      	it	ne
 800395e:	81a3      	strhne	r3, [r4, #12]
 8003960:	bd10      	pop	{r4, pc}

08003962 <__sclose>:
 8003962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003966:	f000 b809 	b.w	800397c <_close_r>

0800396a <memset>:
 800396a:	4402      	add	r2, r0
 800396c:	4603      	mov	r3, r0
 800396e:	4293      	cmp	r3, r2
 8003970:	d100      	bne.n	8003974 <memset+0xa>
 8003972:	4770      	bx	lr
 8003974:	f803 1b01 	strb.w	r1, [r3], #1
 8003978:	e7f9      	b.n	800396e <memset+0x4>
	...

0800397c <_close_r>:
 800397c:	b538      	push	{r3, r4, r5, lr}
 800397e:	4d06      	ldr	r5, [pc, #24]	@ (8003998 <_close_r+0x1c>)
 8003980:	2300      	movs	r3, #0
 8003982:	4604      	mov	r4, r0
 8003984:	4608      	mov	r0, r1
 8003986:	602b      	str	r3, [r5, #0]
 8003988:	f7fe fc21 	bl	80021ce <_close>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d102      	bne.n	8003996 <_close_r+0x1a>
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	b103      	cbz	r3, 8003996 <_close_r+0x1a>
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	20000220 	.word	0x20000220

0800399c <_lseek_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	4d07      	ldr	r5, [pc, #28]	@ (80039bc <_lseek_r+0x20>)
 80039a0:	4604      	mov	r4, r0
 80039a2:	4608      	mov	r0, r1
 80039a4:	4611      	mov	r1, r2
 80039a6:	2200      	movs	r2, #0
 80039a8:	602a      	str	r2, [r5, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	f7fe fc36 	bl	800221c <_lseek>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d102      	bne.n	80039ba <_lseek_r+0x1e>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	b103      	cbz	r3, 80039ba <_lseek_r+0x1e>
 80039b8:	6023      	str	r3, [r4, #0]
 80039ba:	bd38      	pop	{r3, r4, r5, pc}
 80039bc:	20000220 	.word	0x20000220

080039c0 <_read_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4d07      	ldr	r5, [pc, #28]	@ (80039e0 <_read_r+0x20>)
 80039c4:	4604      	mov	r4, r0
 80039c6:	4608      	mov	r0, r1
 80039c8:	4611      	mov	r1, r2
 80039ca:	2200      	movs	r2, #0
 80039cc:	602a      	str	r2, [r5, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f7fe fbc4 	bl	800215c <_read>
 80039d4:	1c43      	adds	r3, r0, #1
 80039d6:	d102      	bne.n	80039de <_read_r+0x1e>
 80039d8:	682b      	ldr	r3, [r5, #0]
 80039da:	b103      	cbz	r3, 80039de <_read_r+0x1e>
 80039dc:	6023      	str	r3, [r4, #0]
 80039de:	bd38      	pop	{r3, r4, r5, pc}
 80039e0:	20000220 	.word	0x20000220

080039e4 <_write_r>:
 80039e4:	b538      	push	{r3, r4, r5, lr}
 80039e6:	4d07      	ldr	r5, [pc, #28]	@ (8003a04 <_write_r+0x20>)
 80039e8:	4604      	mov	r4, r0
 80039ea:	4608      	mov	r0, r1
 80039ec:	4611      	mov	r1, r2
 80039ee:	2200      	movs	r2, #0
 80039f0:	602a      	str	r2, [r5, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	f7fe fbcf 	bl	8002196 <_write>
 80039f8:	1c43      	adds	r3, r0, #1
 80039fa:	d102      	bne.n	8003a02 <_write_r+0x1e>
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	b103      	cbz	r3, 8003a02 <_write_r+0x1e>
 8003a00:	6023      	str	r3, [r4, #0]
 8003a02:	bd38      	pop	{r3, r4, r5, pc}
 8003a04:	20000220 	.word	0x20000220

08003a08 <__errno>:
 8003a08:	4b01      	ldr	r3, [pc, #4]	@ (8003a10 <__errno+0x8>)
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000018 	.word	0x20000018

08003a14 <__libc_init_array>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	4d0d      	ldr	r5, [pc, #52]	@ (8003a4c <__libc_init_array+0x38>)
 8003a18:	4c0d      	ldr	r4, [pc, #52]	@ (8003a50 <__libc_init_array+0x3c>)
 8003a1a:	1b64      	subs	r4, r4, r5
 8003a1c:	10a4      	asrs	r4, r4, #2
 8003a1e:	2600      	movs	r6, #0
 8003a20:	42a6      	cmp	r6, r4
 8003a22:	d109      	bne.n	8003a38 <__libc_init_array+0x24>
 8003a24:	4d0b      	ldr	r5, [pc, #44]	@ (8003a54 <__libc_init_array+0x40>)
 8003a26:	4c0c      	ldr	r4, [pc, #48]	@ (8003a58 <__libc_init_array+0x44>)
 8003a28:	f000 fe48 	bl	80046bc <_init>
 8003a2c:	1b64      	subs	r4, r4, r5
 8003a2e:	10a4      	asrs	r4, r4, #2
 8003a30:	2600      	movs	r6, #0
 8003a32:	42a6      	cmp	r6, r4
 8003a34:	d105      	bne.n	8003a42 <__libc_init_array+0x2e>
 8003a36:	bd70      	pop	{r4, r5, r6, pc}
 8003a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3c:	4798      	blx	r3
 8003a3e:	3601      	adds	r6, #1
 8003a40:	e7ee      	b.n	8003a20 <__libc_init_array+0xc>
 8003a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a46:	4798      	blx	r3
 8003a48:	3601      	adds	r6, #1
 8003a4a:	e7f2      	b.n	8003a32 <__libc_init_array+0x1e>
 8003a4c:	080047cc 	.word	0x080047cc
 8003a50:	080047cc 	.word	0x080047cc
 8003a54:	080047cc 	.word	0x080047cc
 8003a58:	080047d0 	.word	0x080047d0

08003a5c <__retarget_lock_init_recursive>:
 8003a5c:	4770      	bx	lr

08003a5e <__retarget_lock_acquire_recursive>:
 8003a5e:	4770      	bx	lr

08003a60 <__retarget_lock_release_recursive>:
 8003a60:	4770      	bx	lr

08003a62 <memcpy>:
 8003a62:	440a      	add	r2, r1
 8003a64:	4291      	cmp	r1, r2
 8003a66:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a6a:	d100      	bne.n	8003a6e <memcpy+0xc>
 8003a6c:	4770      	bx	lr
 8003a6e:	b510      	push	{r4, lr}
 8003a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a78:	4291      	cmp	r1, r2
 8003a7a:	d1f9      	bne.n	8003a70 <memcpy+0xe>
 8003a7c:	bd10      	pop	{r4, pc}
	...

08003a80 <__assert_func>:
 8003a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a82:	4614      	mov	r4, r2
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b09      	ldr	r3, [pc, #36]	@ (8003aac <__assert_func+0x2c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4605      	mov	r5, r0
 8003a8c:	68d8      	ldr	r0, [r3, #12]
 8003a8e:	b954      	cbnz	r4, 8003aa6 <__assert_func+0x26>
 8003a90:	4b07      	ldr	r3, [pc, #28]	@ (8003ab0 <__assert_func+0x30>)
 8003a92:	461c      	mov	r4, r3
 8003a94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003a98:	9100      	str	r1, [sp, #0]
 8003a9a:	462b      	mov	r3, r5
 8003a9c:	4905      	ldr	r1, [pc, #20]	@ (8003ab4 <__assert_func+0x34>)
 8003a9e:	f000 f9b9 	bl	8003e14 <fiprintf>
 8003aa2:	f000 f9d9 	bl	8003e58 <abort>
 8003aa6:	4b04      	ldr	r3, [pc, #16]	@ (8003ab8 <__assert_func+0x38>)
 8003aa8:	e7f4      	b.n	8003a94 <__assert_func+0x14>
 8003aaa:	bf00      	nop
 8003aac:	20000018 	.word	0x20000018
 8003ab0:	0800478e 	.word	0x0800478e
 8003ab4:	08004760 	.word	0x08004760
 8003ab8:	08004753 	.word	0x08004753

08003abc <_free_r>:
 8003abc:	b538      	push	{r3, r4, r5, lr}
 8003abe:	4605      	mov	r5, r0
 8003ac0:	2900      	cmp	r1, #0
 8003ac2:	d041      	beq.n	8003b48 <_free_r+0x8c>
 8003ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ac8:	1f0c      	subs	r4, r1, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	bfb8      	it	lt
 8003ace:	18e4      	addlt	r4, r4, r3
 8003ad0:	f000 f8e8 	bl	8003ca4 <__malloc_lock>
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b4c <_free_r+0x90>)
 8003ad6:	6813      	ldr	r3, [r2, #0]
 8003ad8:	b933      	cbnz	r3, 8003ae8 <_free_r+0x2c>
 8003ada:	6063      	str	r3, [r4, #4]
 8003adc:	6014      	str	r4, [r2, #0]
 8003ade:	4628      	mov	r0, r5
 8003ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ae4:	f000 b8e4 	b.w	8003cb0 <__malloc_unlock>
 8003ae8:	42a3      	cmp	r3, r4
 8003aea:	d908      	bls.n	8003afe <_free_r+0x42>
 8003aec:	6820      	ldr	r0, [r4, #0]
 8003aee:	1821      	adds	r1, r4, r0
 8003af0:	428b      	cmp	r3, r1
 8003af2:	bf01      	itttt	eq
 8003af4:	6819      	ldreq	r1, [r3, #0]
 8003af6:	685b      	ldreq	r3, [r3, #4]
 8003af8:	1809      	addeq	r1, r1, r0
 8003afa:	6021      	streq	r1, [r4, #0]
 8003afc:	e7ed      	b.n	8003ada <_free_r+0x1e>
 8003afe:	461a      	mov	r2, r3
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	b10b      	cbz	r3, 8003b08 <_free_r+0x4c>
 8003b04:	42a3      	cmp	r3, r4
 8003b06:	d9fa      	bls.n	8003afe <_free_r+0x42>
 8003b08:	6811      	ldr	r1, [r2, #0]
 8003b0a:	1850      	adds	r0, r2, r1
 8003b0c:	42a0      	cmp	r0, r4
 8003b0e:	d10b      	bne.n	8003b28 <_free_r+0x6c>
 8003b10:	6820      	ldr	r0, [r4, #0]
 8003b12:	4401      	add	r1, r0
 8003b14:	1850      	adds	r0, r2, r1
 8003b16:	4283      	cmp	r3, r0
 8003b18:	6011      	str	r1, [r2, #0]
 8003b1a:	d1e0      	bne.n	8003ade <_free_r+0x22>
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	6053      	str	r3, [r2, #4]
 8003b22:	4408      	add	r0, r1
 8003b24:	6010      	str	r0, [r2, #0]
 8003b26:	e7da      	b.n	8003ade <_free_r+0x22>
 8003b28:	d902      	bls.n	8003b30 <_free_r+0x74>
 8003b2a:	230c      	movs	r3, #12
 8003b2c:	602b      	str	r3, [r5, #0]
 8003b2e:	e7d6      	b.n	8003ade <_free_r+0x22>
 8003b30:	6820      	ldr	r0, [r4, #0]
 8003b32:	1821      	adds	r1, r4, r0
 8003b34:	428b      	cmp	r3, r1
 8003b36:	bf04      	itt	eq
 8003b38:	6819      	ldreq	r1, [r3, #0]
 8003b3a:	685b      	ldreq	r3, [r3, #4]
 8003b3c:	6063      	str	r3, [r4, #4]
 8003b3e:	bf04      	itt	eq
 8003b40:	1809      	addeq	r1, r1, r0
 8003b42:	6021      	streq	r1, [r4, #0]
 8003b44:	6054      	str	r4, [r2, #4]
 8003b46:	e7ca      	b.n	8003ade <_free_r+0x22>
 8003b48:	bd38      	pop	{r3, r4, r5, pc}
 8003b4a:	bf00      	nop
 8003b4c:	2000022c 	.word	0x2000022c

08003b50 <malloc>:
 8003b50:	4b02      	ldr	r3, [pc, #8]	@ (8003b5c <malloc+0xc>)
 8003b52:	4601      	mov	r1, r0
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	f000 b825 	b.w	8003ba4 <_malloc_r>
 8003b5a:	bf00      	nop
 8003b5c:	20000018 	.word	0x20000018

08003b60 <sbrk_aligned>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	4e0f      	ldr	r6, [pc, #60]	@ (8003ba0 <sbrk_aligned+0x40>)
 8003b64:	460c      	mov	r4, r1
 8003b66:	6831      	ldr	r1, [r6, #0]
 8003b68:	4605      	mov	r5, r0
 8003b6a:	b911      	cbnz	r1, 8003b72 <sbrk_aligned+0x12>
 8003b6c:	f000 f964 	bl	8003e38 <_sbrk_r>
 8003b70:	6030      	str	r0, [r6, #0]
 8003b72:	4621      	mov	r1, r4
 8003b74:	4628      	mov	r0, r5
 8003b76:	f000 f95f 	bl	8003e38 <_sbrk_r>
 8003b7a:	1c43      	adds	r3, r0, #1
 8003b7c:	d103      	bne.n	8003b86 <sbrk_aligned+0x26>
 8003b7e:	f04f 34ff 	mov.w	r4, #4294967295
 8003b82:	4620      	mov	r0, r4
 8003b84:	bd70      	pop	{r4, r5, r6, pc}
 8003b86:	1cc4      	adds	r4, r0, #3
 8003b88:	f024 0403 	bic.w	r4, r4, #3
 8003b8c:	42a0      	cmp	r0, r4
 8003b8e:	d0f8      	beq.n	8003b82 <sbrk_aligned+0x22>
 8003b90:	1a21      	subs	r1, r4, r0
 8003b92:	4628      	mov	r0, r5
 8003b94:	f000 f950 	bl	8003e38 <_sbrk_r>
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d1f2      	bne.n	8003b82 <sbrk_aligned+0x22>
 8003b9c:	e7ef      	b.n	8003b7e <sbrk_aligned+0x1e>
 8003b9e:	bf00      	nop
 8003ba0:	20000228 	.word	0x20000228

08003ba4 <_malloc_r>:
 8003ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ba8:	1ccd      	adds	r5, r1, #3
 8003baa:	f025 0503 	bic.w	r5, r5, #3
 8003bae:	3508      	adds	r5, #8
 8003bb0:	2d0c      	cmp	r5, #12
 8003bb2:	bf38      	it	cc
 8003bb4:	250c      	movcc	r5, #12
 8003bb6:	2d00      	cmp	r5, #0
 8003bb8:	4606      	mov	r6, r0
 8003bba:	db01      	blt.n	8003bc0 <_malloc_r+0x1c>
 8003bbc:	42a9      	cmp	r1, r5
 8003bbe:	d904      	bls.n	8003bca <_malloc_r+0x26>
 8003bc0:	230c      	movs	r3, #12
 8003bc2:	6033      	str	r3, [r6, #0]
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ca0 <_malloc_r+0xfc>
 8003bce:	f000 f869 	bl	8003ca4 <__malloc_lock>
 8003bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8003bd6:	461c      	mov	r4, r3
 8003bd8:	bb44      	cbnz	r4, 8003c2c <_malloc_r+0x88>
 8003bda:	4629      	mov	r1, r5
 8003bdc:	4630      	mov	r0, r6
 8003bde:	f7ff ffbf 	bl	8003b60 <sbrk_aligned>
 8003be2:	1c43      	adds	r3, r0, #1
 8003be4:	4604      	mov	r4, r0
 8003be6:	d158      	bne.n	8003c9a <_malloc_r+0xf6>
 8003be8:	f8d8 4000 	ldr.w	r4, [r8]
 8003bec:	4627      	mov	r7, r4
 8003bee:	2f00      	cmp	r7, #0
 8003bf0:	d143      	bne.n	8003c7a <_malloc_r+0xd6>
 8003bf2:	2c00      	cmp	r4, #0
 8003bf4:	d04b      	beq.n	8003c8e <_malloc_r+0xea>
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	4639      	mov	r1, r7
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	eb04 0903 	add.w	r9, r4, r3
 8003c00:	f000 f91a 	bl	8003e38 <_sbrk_r>
 8003c04:	4581      	cmp	r9, r0
 8003c06:	d142      	bne.n	8003c8e <_malloc_r+0xea>
 8003c08:	6821      	ldr	r1, [r4, #0]
 8003c0a:	1a6d      	subs	r5, r5, r1
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f7ff ffa6 	bl	8003b60 <sbrk_aligned>
 8003c14:	3001      	adds	r0, #1
 8003c16:	d03a      	beq.n	8003c8e <_malloc_r+0xea>
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	442b      	add	r3, r5
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	bb62      	cbnz	r2, 8003c80 <_malloc_r+0xdc>
 8003c26:	f8c8 7000 	str.w	r7, [r8]
 8003c2a:	e00f      	b.n	8003c4c <_malloc_r+0xa8>
 8003c2c:	6822      	ldr	r2, [r4, #0]
 8003c2e:	1b52      	subs	r2, r2, r5
 8003c30:	d420      	bmi.n	8003c74 <_malloc_r+0xd0>
 8003c32:	2a0b      	cmp	r2, #11
 8003c34:	d917      	bls.n	8003c66 <_malloc_r+0xc2>
 8003c36:	1961      	adds	r1, r4, r5
 8003c38:	42a3      	cmp	r3, r4
 8003c3a:	6025      	str	r5, [r4, #0]
 8003c3c:	bf18      	it	ne
 8003c3e:	6059      	strne	r1, [r3, #4]
 8003c40:	6863      	ldr	r3, [r4, #4]
 8003c42:	bf08      	it	eq
 8003c44:	f8c8 1000 	streq.w	r1, [r8]
 8003c48:	5162      	str	r2, [r4, r5]
 8003c4a:	604b      	str	r3, [r1, #4]
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	f000 f82f 	bl	8003cb0 <__malloc_unlock>
 8003c52:	f104 000b 	add.w	r0, r4, #11
 8003c56:	1d23      	adds	r3, r4, #4
 8003c58:	f020 0007 	bic.w	r0, r0, #7
 8003c5c:	1ac2      	subs	r2, r0, r3
 8003c5e:	bf1c      	itt	ne
 8003c60:	1a1b      	subne	r3, r3, r0
 8003c62:	50a3      	strne	r3, [r4, r2]
 8003c64:	e7af      	b.n	8003bc6 <_malloc_r+0x22>
 8003c66:	6862      	ldr	r2, [r4, #4]
 8003c68:	42a3      	cmp	r3, r4
 8003c6a:	bf0c      	ite	eq
 8003c6c:	f8c8 2000 	streq.w	r2, [r8]
 8003c70:	605a      	strne	r2, [r3, #4]
 8003c72:	e7eb      	b.n	8003c4c <_malloc_r+0xa8>
 8003c74:	4623      	mov	r3, r4
 8003c76:	6864      	ldr	r4, [r4, #4]
 8003c78:	e7ae      	b.n	8003bd8 <_malloc_r+0x34>
 8003c7a:	463c      	mov	r4, r7
 8003c7c:	687f      	ldr	r7, [r7, #4]
 8003c7e:	e7b6      	b.n	8003bee <_malloc_r+0x4a>
 8003c80:	461a      	mov	r2, r3
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	42a3      	cmp	r3, r4
 8003c86:	d1fb      	bne.n	8003c80 <_malloc_r+0xdc>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	6053      	str	r3, [r2, #4]
 8003c8c:	e7de      	b.n	8003c4c <_malloc_r+0xa8>
 8003c8e:	230c      	movs	r3, #12
 8003c90:	6033      	str	r3, [r6, #0]
 8003c92:	4630      	mov	r0, r6
 8003c94:	f000 f80c 	bl	8003cb0 <__malloc_unlock>
 8003c98:	e794      	b.n	8003bc4 <_malloc_r+0x20>
 8003c9a:	6005      	str	r5, [r0, #0]
 8003c9c:	e7d6      	b.n	8003c4c <_malloc_r+0xa8>
 8003c9e:	bf00      	nop
 8003ca0:	2000022c 	.word	0x2000022c

08003ca4 <__malloc_lock>:
 8003ca4:	4801      	ldr	r0, [pc, #4]	@ (8003cac <__malloc_lock+0x8>)
 8003ca6:	f7ff beda 	b.w	8003a5e <__retarget_lock_acquire_recursive>
 8003caa:	bf00      	nop
 8003cac:	20000224 	.word	0x20000224

08003cb0 <__malloc_unlock>:
 8003cb0:	4801      	ldr	r0, [pc, #4]	@ (8003cb8 <__malloc_unlock+0x8>)
 8003cb2:	f7ff bed5 	b.w	8003a60 <__retarget_lock_release_recursive>
 8003cb6:	bf00      	nop
 8003cb8:	20000224 	.word	0x20000224

08003cbc <__sflush_r>:
 8003cbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc4:	0716      	lsls	r6, r2, #28
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	460c      	mov	r4, r1
 8003cca:	d454      	bmi.n	8003d76 <__sflush_r+0xba>
 8003ccc:	684b      	ldr	r3, [r1, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	dc02      	bgt.n	8003cd8 <__sflush_r+0x1c>
 8003cd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	dd48      	ble.n	8003d6a <__sflush_r+0xae>
 8003cd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003cda:	2e00      	cmp	r6, #0
 8003cdc:	d045      	beq.n	8003d6a <__sflush_r+0xae>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003ce4:	682f      	ldr	r7, [r5, #0]
 8003ce6:	6a21      	ldr	r1, [r4, #32]
 8003ce8:	602b      	str	r3, [r5, #0]
 8003cea:	d030      	beq.n	8003d4e <__sflush_r+0x92>
 8003cec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	0759      	lsls	r1, r3, #29
 8003cf2:	d505      	bpl.n	8003d00 <__sflush_r+0x44>
 8003cf4:	6863      	ldr	r3, [r4, #4]
 8003cf6:	1ad2      	subs	r2, r2, r3
 8003cf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003cfa:	b10b      	cbz	r3, 8003d00 <__sflush_r+0x44>
 8003cfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003cfe:	1ad2      	subs	r2, r2, r3
 8003d00:	2300      	movs	r3, #0
 8003d02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d04:	6a21      	ldr	r1, [r4, #32]
 8003d06:	4628      	mov	r0, r5
 8003d08:	47b0      	blx	r6
 8003d0a:	1c43      	adds	r3, r0, #1
 8003d0c:	89a3      	ldrh	r3, [r4, #12]
 8003d0e:	d106      	bne.n	8003d1e <__sflush_r+0x62>
 8003d10:	6829      	ldr	r1, [r5, #0]
 8003d12:	291d      	cmp	r1, #29
 8003d14:	d82b      	bhi.n	8003d6e <__sflush_r+0xb2>
 8003d16:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc0 <__sflush_r+0x104>)
 8003d18:	410a      	asrs	r2, r1
 8003d1a:	07d6      	lsls	r6, r2, #31
 8003d1c:	d427      	bmi.n	8003d6e <__sflush_r+0xb2>
 8003d1e:	2200      	movs	r2, #0
 8003d20:	6062      	str	r2, [r4, #4]
 8003d22:	04d9      	lsls	r1, r3, #19
 8003d24:	6922      	ldr	r2, [r4, #16]
 8003d26:	6022      	str	r2, [r4, #0]
 8003d28:	d504      	bpl.n	8003d34 <__sflush_r+0x78>
 8003d2a:	1c42      	adds	r2, r0, #1
 8003d2c:	d101      	bne.n	8003d32 <__sflush_r+0x76>
 8003d2e:	682b      	ldr	r3, [r5, #0]
 8003d30:	b903      	cbnz	r3, 8003d34 <__sflush_r+0x78>
 8003d32:	6560      	str	r0, [r4, #84]	@ 0x54
 8003d34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d36:	602f      	str	r7, [r5, #0]
 8003d38:	b1b9      	cbz	r1, 8003d6a <__sflush_r+0xae>
 8003d3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d3e:	4299      	cmp	r1, r3
 8003d40:	d002      	beq.n	8003d48 <__sflush_r+0x8c>
 8003d42:	4628      	mov	r0, r5
 8003d44:	f7ff feba 	bl	8003abc <_free_r>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d4c:	e00d      	b.n	8003d6a <__sflush_r+0xae>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	4628      	mov	r0, r5
 8003d52:	47b0      	blx	r6
 8003d54:	4602      	mov	r2, r0
 8003d56:	1c50      	adds	r0, r2, #1
 8003d58:	d1c9      	bne.n	8003cee <__sflush_r+0x32>
 8003d5a:	682b      	ldr	r3, [r5, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0c6      	beq.n	8003cee <__sflush_r+0x32>
 8003d60:	2b1d      	cmp	r3, #29
 8003d62:	d001      	beq.n	8003d68 <__sflush_r+0xac>
 8003d64:	2b16      	cmp	r3, #22
 8003d66:	d11e      	bne.n	8003da6 <__sflush_r+0xea>
 8003d68:	602f      	str	r7, [r5, #0]
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	e022      	b.n	8003db4 <__sflush_r+0xf8>
 8003d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d72:	b21b      	sxth	r3, r3
 8003d74:	e01b      	b.n	8003dae <__sflush_r+0xf2>
 8003d76:	690f      	ldr	r7, [r1, #16]
 8003d78:	2f00      	cmp	r7, #0
 8003d7a:	d0f6      	beq.n	8003d6a <__sflush_r+0xae>
 8003d7c:	0793      	lsls	r3, r2, #30
 8003d7e:	680e      	ldr	r6, [r1, #0]
 8003d80:	bf08      	it	eq
 8003d82:	694b      	ldreq	r3, [r1, #20]
 8003d84:	600f      	str	r7, [r1, #0]
 8003d86:	bf18      	it	ne
 8003d88:	2300      	movne	r3, #0
 8003d8a:	eba6 0807 	sub.w	r8, r6, r7
 8003d8e:	608b      	str	r3, [r1, #8]
 8003d90:	f1b8 0f00 	cmp.w	r8, #0
 8003d94:	dde9      	ble.n	8003d6a <__sflush_r+0xae>
 8003d96:	6a21      	ldr	r1, [r4, #32]
 8003d98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003d9a:	4643      	mov	r3, r8
 8003d9c:	463a      	mov	r2, r7
 8003d9e:	4628      	mov	r0, r5
 8003da0:	47b0      	blx	r6
 8003da2:	2800      	cmp	r0, #0
 8003da4:	dc08      	bgt.n	8003db8 <__sflush_r+0xfc>
 8003da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dae:	81a3      	strh	r3, [r4, #12]
 8003db0:	f04f 30ff 	mov.w	r0, #4294967295
 8003db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003db8:	4407      	add	r7, r0
 8003dba:	eba8 0800 	sub.w	r8, r8, r0
 8003dbe:	e7e7      	b.n	8003d90 <__sflush_r+0xd4>
 8003dc0:	dfbffffe 	.word	0xdfbffffe

08003dc4 <_fflush_r>:
 8003dc4:	b538      	push	{r3, r4, r5, lr}
 8003dc6:	690b      	ldr	r3, [r1, #16]
 8003dc8:	4605      	mov	r5, r0
 8003dca:	460c      	mov	r4, r1
 8003dcc:	b913      	cbnz	r3, 8003dd4 <_fflush_r+0x10>
 8003dce:	2500      	movs	r5, #0
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	bd38      	pop	{r3, r4, r5, pc}
 8003dd4:	b118      	cbz	r0, 8003dde <_fflush_r+0x1a>
 8003dd6:	6a03      	ldr	r3, [r0, #32]
 8003dd8:	b90b      	cbnz	r3, 8003dde <_fflush_r+0x1a>
 8003dda:	f7ff fd4d 	bl	8003878 <__sinit>
 8003dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f3      	beq.n	8003dce <_fflush_r+0xa>
 8003de6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003de8:	07d0      	lsls	r0, r2, #31
 8003dea:	d404      	bmi.n	8003df6 <_fflush_r+0x32>
 8003dec:	0599      	lsls	r1, r3, #22
 8003dee:	d402      	bmi.n	8003df6 <_fflush_r+0x32>
 8003df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003df2:	f7ff fe34 	bl	8003a5e <__retarget_lock_acquire_recursive>
 8003df6:	4628      	mov	r0, r5
 8003df8:	4621      	mov	r1, r4
 8003dfa:	f7ff ff5f 	bl	8003cbc <__sflush_r>
 8003dfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e00:	07da      	lsls	r2, r3, #31
 8003e02:	4605      	mov	r5, r0
 8003e04:	d4e4      	bmi.n	8003dd0 <_fflush_r+0xc>
 8003e06:	89a3      	ldrh	r3, [r4, #12]
 8003e08:	059b      	lsls	r3, r3, #22
 8003e0a:	d4e1      	bmi.n	8003dd0 <_fflush_r+0xc>
 8003e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e0e:	f7ff fe27 	bl	8003a60 <__retarget_lock_release_recursive>
 8003e12:	e7dd      	b.n	8003dd0 <_fflush_r+0xc>

08003e14 <fiprintf>:
 8003e14:	b40e      	push	{r1, r2, r3}
 8003e16:	b503      	push	{r0, r1, lr}
 8003e18:	4601      	mov	r1, r0
 8003e1a:	ab03      	add	r3, sp, #12
 8003e1c:	4805      	ldr	r0, [pc, #20]	@ (8003e34 <fiprintf+0x20>)
 8003e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e22:	6800      	ldr	r0, [r0, #0]
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	f000 f847 	bl	8003eb8 <_vfiprintf_r>
 8003e2a:	b002      	add	sp, #8
 8003e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e30:	b003      	add	sp, #12
 8003e32:	4770      	bx	lr
 8003e34:	20000018 	.word	0x20000018

08003e38 <_sbrk_r>:
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	4d06      	ldr	r5, [pc, #24]	@ (8003e54 <_sbrk_r+0x1c>)
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	4604      	mov	r4, r0
 8003e40:	4608      	mov	r0, r1
 8003e42:	602b      	str	r3, [r5, #0]
 8003e44:	f7fe f9f8 	bl	8002238 <_sbrk>
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	d102      	bne.n	8003e52 <_sbrk_r+0x1a>
 8003e4c:	682b      	ldr	r3, [r5, #0]
 8003e4e:	b103      	cbz	r3, 8003e52 <_sbrk_r+0x1a>
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	bd38      	pop	{r3, r4, r5, pc}
 8003e54:	20000220 	.word	0x20000220

08003e58 <abort>:
 8003e58:	b508      	push	{r3, lr}
 8003e5a:	2006      	movs	r0, #6
 8003e5c:	f000 fb8e 	bl	800457c <raise>
 8003e60:	2001      	movs	r0, #1
 8003e62:	f7fe f970 	bl	8002146 <_exit>

08003e66 <__sfputc_r>:
 8003e66:	6893      	ldr	r3, [r2, #8]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	b410      	push	{r4}
 8003e6e:	6093      	str	r3, [r2, #8]
 8003e70:	da08      	bge.n	8003e84 <__sfputc_r+0x1e>
 8003e72:	6994      	ldr	r4, [r2, #24]
 8003e74:	42a3      	cmp	r3, r4
 8003e76:	db01      	blt.n	8003e7c <__sfputc_r+0x16>
 8003e78:	290a      	cmp	r1, #10
 8003e7a:	d103      	bne.n	8003e84 <__sfputc_r+0x1e>
 8003e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e80:	f000 bac0 	b.w	8004404 <__swbuf_r>
 8003e84:	6813      	ldr	r3, [r2, #0]
 8003e86:	1c58      	adds	r0, r3, #1
 8003e88:	6010      	str	r0, [r2, #0]
 8003e8a:	7019      	strb	r1, [r3, #0]
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <__sfputs_r>:
 8003e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e96:	4606      	mov	r6, r0
 8003e98:	460f      	mov	r7, r1
 8003e9a:	4614      	mov	r4, r2
 8003e9c:	18d5      	adds	r5, r2, r3
 8003e9e:	42ac      	cmp	r4, r5
 8003ea0:	d101      	bne.n	8003ea6 <__sfputs_r+0x12>
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	e007      	b.n	8003eb6 <__sfputs_r+0x22>
 8003ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eaa:	463a      	mov	r2, r7
 8003eac:	4630      	mov	r0, r6
 8003eae:	f7ff ffda 	bl	8003e66 <__sfputc_r>
 8003eb2:	1c43      	adds	r3, r0, #1
 8003eb4:	d1f3      	bne.n	8003e9e <__sfputs_r+0xa>
 8003eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003eb8 <_vfiprintf_r>:
 8003eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ebc:	460d      	mov	r5, r1
 8003ebe:	b09d      	sub	sp, #116	@ 0x74
 8003ec0:	4614      	mov	r4, r2
 8003ec2:	4698      	mov	r8, r3
 8003ec4:	4606      	mov	r6, r0
 8003ec6:	b118      	cbz	r0, 8003ed0 <_vfiprintf_r+0x18>
 8003ec8:	6a03      	ldr	r3, [r0, #32]
 8003eca:	b90b      	cbnz	r3, 8003ed0 <_vfiprintf_r+0x18>
 8003ecc:	f7ff fcd4 	bl	8003878 <__sinit>
 8003ed0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ed2:	07d9      	lsls	r1, r3, #31
 8003ed4:	d405      	bmi.n	8003ee2 <_vfiprintf_r+0x2a>
 8003ed6:	89ab      	ldrh	r3, [r5, #12]
 8003ed8:	059a      	lsls	r2, r3, #22
 8003eda:	d402      	bmi.n	8003ee2 <_vfiprintf_r+0x2a>
 8003edc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ede:	f7ff fdbe 	bl	8003a5e <__retarget_lock_acquire_recursive>
 8003ee2:	89ab      	ldrh	r3, [r5, #12]
 8003ee4:	071b      	lsls	r3, r3, #28
 8003ee6:	d501      	bpl.n	8003eec <_vfiprintf_r+0x34>
 8003ee8:	692b      	ldr	r3, [r5, #16]
 8003eea:	b99b      	cbnz	r3, 8003f14 <_vfiprintf_r+0x5c>
 8003eec:	4629      	mov	r1, r5
 8003eee:	4630      	mov	r0, r6
 8003ef0:	f000 fac6 	bl	8004480 <__swsetup_r>
 8003ef4:	b170      	cbz	r0, 8003f14 <_vfiprintf_r+0x5c>
 8003ef6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ef8:	07dc      	lsls	r4, r3, #31
 8003efa:	d504      	bpl.n	8003f06 <_vfiprintf_r+0x4e>
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295
 8003f00:	b01d      	add	sp, #116	@ 0x74
 8003f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f06:	89ab      	ldrh	r3, [r5, #12]
 8003f08:	0598      	lsls	r0, r3, #22
 8003f0a:	d4f7      	bmi.n	8003efc <_vfiprintf_r+0x44>
 8003f0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f0e:	f7ff fda7 	bl	8003a60 <__retarget_lock_release_recursive>
 8003f12:	e7f3      	b.n	8003efc <_vfiprintf_r+0x44>
 8003f14:	2300      	movs	r3, #0
 8003f16:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f18:	2320      	movs	r3, #32
 8003f1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f22:	2330      	movs	r3, #48	@ 0x30
 8003f24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80040d4 <_vfiprintf_r+0x21c>
 8003f28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f2c:	f04f 0901 	mov.w	r9, #1
 8003f30:	4623      	mov	r3, r4
 8003f32:	469a      	mov	sl, r3
 8003f34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f38:	b10a      	cbz	r2, 8003f3e <_vfiprintf_r+0x86>
 8003f3a:	2a25      	cmp	r2, #37	@ 0x25
 8003f3c:	d1f9      	bne.n	8003f32 <_vfiprintf_r+0x7a>
 8003f3e:	ebba 0b04 	subs.w	fp, sl, r4
 8003f42:	d00b      	beq.n	8003f5c <_vfiprintf_r+0xa4>
 8003f44:	465b      	mov	r3, fp
 8003f46:	4622      	mov	r2, r4
 8003f48:	4629      	mov	r1, r5
 8003f4a:	4630      	mov	r0, r6
 8003f4c:	f7ff ffa2 	bl	8003e94 <__sfputs_r>
 8003f50:	3001      	adds	r0, #1
 8003f52:	f000 80a7 	beq.w	80040a4 <_vfiprintf_r+0x1ec>
 8003f56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f58:	445a      	add	r2, fp
 8003f5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 809f 	beq.w	80040a4 <_vfiprintf_r+0x1ec>
 8003f66:	2300      	movs	r3, #0
 8003f68:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f70:	f10a 0a01 	add.w	sl, sl, #1
 8003f74:	9304      	str	r3, [sp, #16]
 8003f76:	9307      	str	r3, [sp, #28]
 8003f78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f7e:	4654      	mov	r4, sl
 8003f80:	2205      	movs	r2, #5
 8003f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f86:	4853      	ldr	r0, [pc, #332]	@ (80040d4 <_vfiprintf_r+0x21c>)
 8003f88:	f7fc f92a 	bl	80001e0 <memchr>
 8003f8c:	9a04      	ldr	r2, [sp, #16]
 8003f8e:	b9d8      	cbnz	r0, 8003fc8 <_vfiprintf_r+0x110>
 8003f90:	06d1      	lsls	r1, r2, #27
 8003f92:	bf44      	itt	mi
 8003f94:	2320      	movmi	r3, #32
 8003f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f9a:	0713      	lsls	r3, r2, #28
 8003f9c:	bf44      	itt	mi
 8003f9e:	232b      	movmi	r3, #43	@ 0x2b
 8003fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8003fa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003faa:	d015      	beq.n	8003fd8 <_vfiprintf_r+0x120>
 8003fac:	9a07      	ldr	r2, [sp, #28]
 8003fae:	4654      	mov	r4, sl
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f04f 0c0a 	mov.w	ip, #10
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fbc:	3b30      	subs	r3, #48	@ 0x30
 8003fbe:	2b09      	cmp	r3, #9
 8003fc0:	d94b      	bls.n	800405a <_vfiprintf_r+0x1a2>
 8003fc2:	b1b0      	cbz	r0, 8003ff2 <_vfiprintf_r+0x13a>
 8003fc4:	9207      	str	r2, [sp, #28]
 8003fc6:	e014      	b.n	8003ff2 <_vfiprintf_r+0x13a>
 8003fc8:	eba0 0308 	sub.w	r3, r0, r8
 8003fcc:	fa09 f303 	lsl.w	r3, r9, r3
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	9304      	str	r3, [sp, #16]
 8003fd4:	46a2      	mov	sl, r4
 8003fd6:	e7d2      	b.n	8003f7e <_vfiprintf_r+0xc6>
 8003fd8:	9b03      	ldr	r3, [sp, #12]
 8003fda:	1d19      	adds	r1, r3, #4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	9103      	str	r1, [sp, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bfbb      	ittet	lt
 8003fe4:	425b      	neglt	r3, r3
 8003fe6:	f042 0202 	orrlt.w	r2, r2, #2
 8003fea:	9307      	strge	r3, [sp, #28]
 8003fec:	9307      	strlt	r3, [sp, #28]
 8003fee:	bfb8      	it	lt
 8003ff0:	9204      	strlt	r2, [sp, #16]
 8003ff2:	7823      	ldrb	r3, [r4, #0]
 8003ff4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ff6:	d10a      	bne.n	800400e <_vfiprintf_r+0x156>
 8003ff8:	7863      	ldrb	r3, [r4, #1]
 8003ffa:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ffc:	d132      	bne.n	8004064 <_vfiprintf_r+0x1ac>
 8003ffe:	9b03      	ldr	r3, [sp, #12]
 8004000:	1d1a      	adds	r2, r3, #4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	9203      	str	r2, [sp, #12]
 8004006:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800400a:	3402      	adds	r4, #2
 800400c:	9305      	str	r3, [sp, #20]
 800400e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80040e4 <_vfiprintf_r+0x22c>
 8004012:	7821      	ldrb	r1, [r4, #0]
 8004014:	2203      	movs	r2, #3
 8004016:	4650      	mov	r0, sl
 8004018:	f7fc f8e2 	bl	80001e0 <memchr>
 800401c:	b138      	cbz	r0, 800402e <_vfiprintf_r+0x176>
 800401e:	9b04      	ldr	r3, [sp, #16]
 8004020:	eba0 000a 	sub.w	r0, r0, sl
 8004024:	2240      	movs	r2, #64	@ 0x40
 8004026:	4082      	lsls	r2, r0
 8004028:	4313      	orrs	r3, r2
 800402a:	3401      	adds	r4, #1
 800402c:	9304      	str	r3, [sp, #16]
 800402e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004032:	4829      	ldr	r0, [pc, #164]	@ (80040d8 <_vfiprintf_r+0x220>)
 8004034:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004038:	2206      	movs	r2, #6
 800403a:	f7fc f8d1 	bl	80001e0 <memchr>
 800403e:	2800      	cmp	r0, #0
 8004040:	d03f      	beq.n	80040c2 <_vfiprintf_r+0x20a>
 8004042:	4b26      	ldr	r3, [pc, #152]	@ (80040dc <_vfiprintf_r+0x224>)
 8004044:	bb1b      	cbnz	r3, 800408e <_vfiprintf_r+0x1d6>
 8004046:	9b03      	ldr	r3, [sp, #12]
 8004048:	3307      	adds	r3, #7
 800404a:	f023 0307 	bic.w	r3, r3, #7
 800404e:	3308      	adds	r3, #8
 8004050:	9303      	str	r3, [sp, #12]
 8004052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004054:	443b      	add	r3, r7
 8004056:	9309      	str	r3, [sp, #36]	@ 0x24
 8004058:	e76a      	b.n	8003f30 <_vfiprintf_r+0x78>
 800405a:	fb0c 3202 	mla	r2, ip, r2, r3
 800405e:	460c      	mov	r4, r1
 8004060:	2001      	movs	r0, #1
 8004062:	e7a8      	b.n	8003fb6 <_vfiprintf_r+0xfe>
 8004064:	2300      	movs	r3, #0
 8004066:	3401      	adds	r4, #1
 8004068:	9305      	str	r3, [sp, #20]
 800406a:	4619      	mov	r1, r3
 800406c:	f04f 0c0a 	mov.w	ip, #10
 8004070:	4620      	mov	r0, r4
 8004072:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004076:	3a30      	subs	r2, #48	@ 0x30
 8004078:	2a09      	cmp	r2, #9
 800407a:	d903      	bls.n	8004084 <_vfiprintf_r+0x1cc>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0c6      	beq.n	800400e <_vfiprintf_r+0x156>
 8004080:	9105      	str	r1, [sp, #20]
 8004082:	e7c4      	b.n	800400e <_vfiprintf_r+0x156>
 8004084:	fb0c 2101 	mla	r1, ip, r1, r2
 8004088:	4604      	mov	r4, r0
 800408a:	2301      	movs	r3, #1
 800408c:	e7f0      	b.n	8004070 <_vfiprintf_r+0x1b8>
 800408e:	ab03      	add	r3, sp, #12
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	462a      	mov	r2, r5
 8004094:	4b12      	ldr	r3, [pc, #72]	@ (80040e0 <_vfiprintf_r+0x228>)
 8004096:	a904      	add	r1, sp, #16
 8004098:	4630      	mov	r0, r6
 800409a:	f3af 8000 	nop.w
 800409e:	4607      	mov	r7, r0
 80040a0:	1c78      	adds	r0, r7, #1
 80040a2:	d1d6      	bne.n	8004052 <_vfiprintf_r+0x19a>
 80040a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040a6:	07d9      	lsls	r1, r3, #31
 80040a8:	d405      	bmi.n	80040b6 <_vfiprintf_r+0x1fe>
 80040aa:	89ab      	ldrh	r3, [r5, #12]
 80040ac:	059a      	lsls	r2, r3, #22
 80040ae:	d402      	bmi.n	80040b6 <_vfiprintf_r+0x1fe>
 80040b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040b2:	f7ff fcd5 	bl	8003a60 <__retarget_lock_release_recursive>
 80040b6:	89ab      	ldrh	r3, [r5, #12]
 80040b8:	065b      	lsls	r3, r3, #25
 80040ba:	f53f af1f 	bmi.w	8003efc <_vfiprintf_r+0x44>
 80040be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040c0:	e71e      	b.n	8003f00 <_vfiprintf_r+0x48>
 80040c2:	ab03      	add	r3, sp, #12
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	462a      	mov	r2, r5
 80040c8:	4b05      	ldr	r3, [pc, #20]	@ (80040e0 <_vfiprintf_r+0x228>)
 80040ca:	a904      	add	r1, sp, #16
 80040cc:	4630      	mov	r0, r6
 80040ce:	f000 f879 	bl	80041c4 <_printf_i>
 80040d2:	e7e4      	b.n	800409e <_vfiprintf_r+0x1e6>
 80040d4:	0800478f 	.word	0x0800478f
 80040d8:	08004799 	.word	0x08004799
 80040dc:	00000000 	.word	0x00000000
 80040e0:	08003e95 	.word	0x08003e95
 80040e4:	08004795 	.word	0x08004795

080040e8 <_printf_common>:
 80040e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040ec:	4616      	mov	r6, r2
 80040ee:	4698      	mov	r8, r3
 80040f0:	688a      	ldr	r2, [r1, #8]
 80040f2:	690b      	ldr	r3, [r1, #16]
 80040f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040f8:	4293      	cmp	r3, r2
 80040fa:	bfb8      	it	lt
 80040fc:	4613      	movlt	r3, r2
 80040fe:	6033      	str	r3, [r6, #0]
 8004100:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004104:	4607      	mov	r7, r0
 8004106:	460c      	mov	r4, r1
 8004108:	b10a      	cbz	r2, 800410e <_printf_common+0x26>
 800410a:	3301      	adds	r3, #1
 800410c:	6033      	str	r3, [r6, #0]
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	0699      	lsls	r1, r3, #26
 8004112:	bf42      	ittt	mi
 8004114:	6833      	ldrmi	r3, [r6, #0]
 8004116:	3302      	addmi	r3, #2
 8004118:	6033      	strmi	r3, [r6, #0]
 800411a:	6825      	ldr	r5, [r4, #0]
 800411c:	f015 0506 	ands.w	r5, r5, #6
 8004120:	d106      	bne.n	8004130 <_printf_common+0x48>
 8004122:	f104 0a19 	add.w	sl, r4, #25
 8004126:	68e3      	ldr	r3, [r4, #12]
 8004128:	6832      	ldr	r2, [r6, #0]
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	42ab      	cmp	r3, r5
 800412e:	dc26      	bgt.n	800417e <_printf_common+0x96>
 8004130:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004134:	6822      	ldr	r2, [r4, #0]
 8004136:	3b00      	subs	r3, #0
 8004138:	bf18      	it	ne
 800413a:	2301      	movne	r3, #1
 800413c:	0692      	lsls	r2, r2, #26
 800413e:	d42b      	bmi.n	8004198 <_printf_common+0xb0>
 8004140:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004144:	4641      	mov	r1, r8
 8004146:	4638      	mov	r0, r7
 8004148:	47c8      	blx	r9
 800414a:	3001      	adds	r0, #1
 800414c:	d01e      	beq.n	800418c <_printf_common+0xa4>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	6922      	ldr	r2, [r4, #16]
 8004152:	f003 0306 	and.w	r3, r3, #6
 8004156:	2b04      	cmp	r3, #4
 8004158:	bf02      	ittt	eq
 800415a:	68e5      	ldreq	r5, [r4, #12]
 800415c:	6833      	ldreq	r3, [r6, #0]
 800415e:	1aed      	subeq	r5, r5, r3
 8004160:	68a3      	ldr	r3, [r4, #8]
 8004162:	bf0c      	ite	eq
 8004164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004168:	2500      	movne	r5, #0
 800416a:	4293      	cmp	r3, r2
 800416c:	bfc4      	itt	gt
 800416e:	1a9b      	subgt	r3, r3, r2
 8004170:	18ed      	addgt	r5, r5, r3
 8004172:	2600      	movs	r6, #0
 8004174:	341a      	adds	r4, #26
 8004176:	42b5      	cmp	r5, r6
 8004178:	d11a      	bne.n	80041b0 <_printf_common+0xc8>
 800417a:	2000      	movs	r0, #0
 800417c:	e008      	b.n	8004190 <_printf_common+0xa8>
 800417e:	2301      	movs	r3, #1
 8004180:	4652      	mov	r2, sl
 8004182:	4641      	mov	r1, r8
 8004184:	4638      	mov	r0, r7
 8004186:	47c8      	blx	r9
 8004188:	3001      	adds	r0, #1
 800418a:	d103      	bne.n	8004194 <_printf_common+0xac>
 800418c:	f04f 30ff 	mov.w	r0, #4294967295
 8004190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004194:	3501      	adds	r5, #1
 8004196:	e7c6      	b.n	8004126 <_printf_common+0x3e>
 8004198:	18e1      	adds	r1, r4, r3
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	2030      	movs	r0, #48	@ 0x30
 800419e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041a2:	4422      	add	r2, r4
 80041a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041ac:	3302      	adds	r3, #2
 80041ae:	e7c7      	b.n	8004140 <_printf_common+0x58>
 80041b0:	2301      	movs	r3, #1
 80041b2:	4622      	mov	r2, r4
 80041b4:	4641      	mov	r1, r8
 80041b6:	4638      	mov	r0, r7
 80041b8:	47c8      	blx	r9
 80041ba:	3001      	adds	r0, #1
 80041bc:	d0e6      	beq.n	800418c <_printf_common+0xa4>
 80041be:	3601      	adds	r6, #1
 80041c0:	e7d9      	b.n	8004176 <_printf_common+0x8e>
	...

080041c4 <_printf_i>:
 80041c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c8:	7e0f      	ldrb	r7, [r1, #24]
 80041ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041cc:	2f78      	cmp	r7, #120	@ 0x78
 80041ce:	4691      	mov	r9, r2
 80041d0:	4680      	mov	r8, r0
 80041d2:	460c      	mov	r4, r1
 80041d4:	469a      	mov	sl, r3
 80041d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041da:	d807      	bhi.n	80041ec <_printf_i+0x28>
 80041dc:	2f62      	cmp	r7, #98	@ 0x62
 80041de:	d80a      	bhi.n	80041f6 <_printf_i+0x32>
 80041e0:	2f00      	cmp	r7, #0
 80041e2:	f000 80d2 	beq.w	800438a <_printf_i+0x1c6>
 80041e6:	2f58      	cmp	r7, #88	@ 0x58
 80041e8:	f000 80b9 	beq.w	800435e <_printf_i+0x19a>
 80041ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041f4:	e03a      	b.n	800426c <_printf_i+0xa8>
 80041f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041fa:	2b15      	cmp	r3, #21
 80041fc:	d8f6      	bhi.n	80041ec <_printf_i+0x28>
 80041fe:	a101      	add	r1, pc, #4	@ (adr r1, 8004204 <_printf_i+0x40>)
 8004200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004204:	0800425d 	.word	0x0800425d
 8004208:	08004271 	.word	0x08004271
 800420c:	080041ed 	.word	0x080041ed
 8004210:	080041ed 	.word	0x080041ed
 8004214:	080041ed 	.word	0x080041ed
 8004218:	080041ed 	.word	0x080041ed
 800421c:	08004271 	.word	0x08004271
 8004220:	080041ed 	.word	0x080041ed
 8004224:	080041ed 	.word	0x080041ed
 8004228:	080041ed 	.word	0x080041ed
 800422c:	080041ed 	.word	0x080041ed
 8004230:	08004371 	.word	0x08004371
 8004234:	0800429b 	.word	0x0800429b
 8004238:	0800432b 	.word	0x0800432b
 800423c:	080041ed 	.word	0x080041ed
 8004240:	080041ed 	.word	0x080041ed
 8004244:	08004393 	.word	0x08004393
 8004248:	080041ed 	.word	0x080041ed
 800424c:	0800429b 	.word	0x0800429b
 8004250:	080041ed 	.word	0x080041ed
 8004254:	080041ed 	.word	0x080041ed
 8004258:	08004333 	.word	0x08004333
 800425c:	6833      	ldr	r3, [r6, #0]
 800425e:	1d1a      	adds	r2, r3, #4
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6032      	str	r2, [r6, #0]
 8004264:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004268:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800426c:	2301      	movs	r3, #1
 800426e:	e09d      	b.n	80043ac <_printf_i+0x1e8>
 8004270:	6833      	ldr	r3, [r6, #0]
 8004272:	6820      	ldr	r0, [r4, #0]
 8004274:	1d19      	adds	r1, r3, #4
 8004276:	6031      	str	r1, [r6, #0]
 8004278:	0606      	lsls	r6, r0, #24
 800427a:	d501      	bpl.n	8004280 <_printf_i+0xbc>
 800427c:	681d      	ldr	r5, [r3, #0]
 800427e:	e003      	b.n	8004288 <_printf_i+0xc4>
 8004280:	0645      	lsls	r5, r0, #25
 8004282:	d5fb      	bpl.n	800427c <_printf_i+0xb8>
 8004284:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004288:	2d00      	cmp	r5, #0
 800428a:	da03      	bge.n	8004294 <_printf_i+0xd0>
 800428c:	232d      	movs	r3, #45	@ 0x2d
 800428e:	426d      	negs	r5, r5
 8004290:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004294:	4859      	ldr	r0, [pc, #356]	@ (80043fc <_printf_i+0x238>)
 8004296:	230a      	movs	r3, #10
 8004298:	e011      	b.n	80042be <_printf_i+0xfa>
 800429a:	6821      	ldr	r1, [r4, #0]
 800429c:	6833      	ldr	r3, [r6, #0]
 800429e:	0608      	lsls	r0, r1, #24
 80042a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80042a4:	d402      	bmi.n	80042ac <_printf_i+0xe8>
 80042a6:	0649      	lsls	r1, r1, #25
 80042a8:	bf48      	it	mi
 80042aa:	b2ad      	uxthmi	r5, r5
 80042ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80042ae:	4853      	ldr	r0, [pc, #332]	@ (80043fc <_printf_i+0x238>)
 80042b0:	6033      	str	r3, [r6, #0]
 80042b2:	bf14      	ite	ne
 80042b4:	230a      	movne	r3, #10
 80042b6:	2308      	moveq	r3, #8
 80042b8:	2100      	movs	r1, #0
 80042ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042be:	6866      	ldr	r6, [r4, #4]
 80042c0:	60a6      	str	r6, [r4, #8]
 80042c2:	2e00      	cmp	r6, #0
 80042c4:	bfa2      	ittt	ge
 80042c6:	6821      	ldrge	r1, [r4, #0]
 80042c8:	f021 0104 	bicge.w	r1, r1, #4
 80042cc:	6021      	strge	r1, [r4, #0]
 80042ce:	b90d      	cbnz	r5, 80042d4 <_printf_i+0x110>
 80042d0:	2e00      	cmp	r6, #0
 80042d2:	d04b      	beq.n	800436c <_printf_i+0x1a8>
 80042d4:	4616      	mov	r6, r2
 80042d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80042da:	fb03 5711 	mls	r7, r3, r1, r5
 80042de:	5dc7      	ldrb	r7, [r0, r7]
 80042e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042e4:	462f      	mov	r7, r5
 80042e6:	42bb      	cmp	r3, r7
 80042e8:	460d      	mov	r5, r1
 80042ea:	d9f4      	bls.n	80042d6 <_printf_i+0x112>
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d10b      	bne.n	8004308 <_printf_i+0x144>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	07df      	lsls	r7, r3, #31
 80042f4:	d508      	bpl.n	8004308 <_printf_i+0x144>
 80042f6:	6923      	ldr	r3, [r4, #16]
 80042f8:	6861      	ldr	r1, [r4, #4]
 80042fa:	4299      	cmp	r1, r3
 80042fc:	bfde      	ittt	le
 80042fe:	2330      	movle	r3, #48	@ 0x30
 8004300:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004304:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004308:	1b92      	subs	r2, r2, r6
 800430a:	6122      	str	r2, [r4, #16]
 800430c:	f8cd a000 	str.w	sl, [sp]
 8004310:	464b      	mov	r3, r9
 8004312:	aa03      	add	r2, sp, #12
 8004314:	4621      	mov	r1, r4
 8004316:	4640      	mov	r0, r8
 8004318:	f7ff fee6 	bl	80040e8 <_printf_common>
 800431c:	3001      	adds	r0, #1
 800431e:	d14a      	bne.n	80043b6 <_printf_i+0x1f2>
 8004320:	f04f 30ff 	mov.w	r0, #4294967295
 8004324:	b004      	add	sp, #16
 8004326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	f043 0320 	orr.w	r3, r3, #32
 8004330:	6023      	str	r3, [r4, #0]
 8004332:	4833      	ldr	r0, [pc, #204]	@ (8004400 <_printf_i+0x23c>)
 8004334:	2778      	movs	r7, #120	@ 0x78
 8004336:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	6831      	ldr	r1, [r6, #0]
 800433e:	061f      	lsls	r7, r3, #24
 8004340:	f851 5b04 	ldr.w	r5, [r1], #4
 8004344:	d402      	bmi.n	800434c <_printf_i+0x188>
 8004346:	065f      	lsls	r7, r3, #25
 8004348:	bf48      	it	mi
 800434a:	b2ad      	uxthmi	r5, r5
 800434c:	6031      	str	r1, [r6, #0]
 800434e:	07d9      	lsls	r1, r3, #31
 8004350:	bf44      	itt	mi
 8004352:	f043 0320 	orrmi.w	r3, r3, #32
 8004356:	6023      	strmi	r3, [r4, #0]
 8004358:	b11d      	cbz	r5, 8004362 <_printf_i+0x19e>
 800435a:	2310      	movs	r3, #16
 800435c:	e7ac      	b.n	80042b8 <_printf_i+0xf4>
 800435e:	4827      	ldr	r0, [pc, #156]	@ (80043fc <_printf_i+0x238>)
 8004360:	e7e9      	b.n	8004336 <_printf_i+0x172>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	f023 0320 	bic.w	r3, r3, #32
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	e7f6      	b.n	800435a <_printf_i+0x196>
 800436c:	4616      	mov	r6, r2
 800436e:	e7bd      	b.n	80042ec <_printf_i+0x128>
 8004370:	6833      	ldr	r3, [r6, #0]
 8004372:	6825      	ldr	r5, [r4, #0]
 8004374:	6961      	ldr	r1, [r4, #20]
 8004376:	1d18      	adds	r0, r3, #4
 8004378:	6030      	str	r0, [r6, #0]
 800437a:	062e      	lsls	r6, r5, #24
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	d501      	bpl.n	8004384 <_printf_i+0x1c0>
 8004380:	6019      	str	r1, [r3, #0]
 8004382:	e002      	b.n	800438a <_printf_i+0x1c6>
 8004384:	0668      	lsls	r0, r5, #25
 8004386:	d5fb      	bpl.n	8004380 <_printf_i+0x1bc>
 8004388:	8019      	strh	r1, [r3, #0]
 800438a:	2300      	movs	r3, #0
 800438c:	6123      	str	r3, [r4, #16]
 800438e:	4616      	mov	r6, r2
 8004390:	e7bc      	b.n	800430c <_printf_i+0x148>
 8004392:	6833      	ldr	r3, [r6, #0]
 8004394:	1d1a      	adds	r2, r3, #4
 8004396:	6032      	str	r2, [r6, #0]
 8004398:	681e      	ldr	r6, [r3, #0]
 800439a:	6862      	ldr	r2, [r4, #4]
 800439c:	2100      	movs	r1, #0
 800439e:	4630      	mov	r0, r6
 80043a0:	f7fb ff1e 	bl	80001e0 <memchr>
 80043a4:	b108      	cbz	r0, 80043aa <_printf_i+0x1e6>
 80043a6:	1b80      	subs	r0, r0, r6
 80043a8:	6060      	str	r0, [r4, #4]
 80043aa:	6863      	ldr	r3, [r4, #4]
 80043ac:	6123      	str	r3, [r4, #16]
 80043ae:	2300      	movs	r3, #0
 80043b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043b4:	e7aa      	b.n	800430c <_printf_i+0x148>
 80043b6:	6923      	ldr	r3, [r4, #16]
 80043b8:	4632      	mov	r2, r6
 80043ba:	4649      	mov	r1, r9
 80043bc:	4640      	mov	r0, r8
 80043be:	47d0      	blx	sl
 80043c0:	3001      	adds	r0, #1
 80043c2:	d0ad      	beq.n	8004320 <_printf_i+0x15c>
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	079b      	lsls	r3, r3, #30
 80043c8:	d413      	bmi.n	80043f2 <_printf_i+0x22e>
 80043ca:	68e0      	ldr	r0, [r4, #12]
 80043cc:	9b03      	ldr	r3, [sp, #12]
 80043ce:	4298      	cmp	r0, r3
 80043d0:	bfb8      	it	lt
 80043d2:	4618      	movlt	r0, r3
 80043d4:	e7a6      	b.n	8004324 <_printf_i+0x160>
 80043d6:	2301      	movs	r3, #1
 80043d8:	4632      	mov	r2, r6
 80043da:	4649      	mov	r1, r9
 80043dc:	4640      	mov	r0, r8
 80043de:	47d0      	blx	sl
 80043e0:	3001      	adds	r0, #1
 80043e2:	d09d      	beq.n	8004320 <_printf_i+0x15c>
 80043e4:	3501      	adds	r5, #1
 80043e6:	68e3      	ldr	r3, [r4, #12]
 80043e8:	9903      	ldr	r1, [sp, #12]
 80043ea:	1a5b      	subs	r3, r3, r1
 80043ec:	42ab      	cmp	r3, r5
 80043ee:	dcf2      	bgt.n	80043d6 <_printf_i+0x212>
 80043f0:	e7eb      	b.n	80043ca <_printf_i+0x206>
 80043f2:	2500      	movs	r5, #0
 80043f4:	f104 0619 	add.w	r6, r4, #25
 80043f8:	e7f5      	b.n	80043e6 <_printf_i+0x222>
 80043fa:	bf00      	nop
 80043fc:	080047a0 	.word	0x080047a0
 8004400:	080047b1 	.word	0x080047b1

08004404 <__swbuf_r>:
 8004404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004406:	460e      	mov	r6, r1
 8004408:	4614      	mov	r4, r2
 800440a:	4605      	mov	r5, r0
 800440c:	b118      	cbz	r0, 8004416 <__swbuf_r+0x12>
 800440e:	6a03      	ldr	r3, [r0, #32]
 8004410:	b90b      	cbnz	r3, 8004416 <__swbuf_r+0x12>
 8004412:	f7ff fa31 	bl	8003878 <__sinit>
 8004416:	69a3      	ldr	r3, [r4, #24]
 8004418:	60a3      	str	r3, [r4, #8]
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	071a      	lsls	r2, r3, #28
 800441e:	d501      	bpl.n	8004424 <__swbuf_r+0x20>
 8004420:	6923      	ldr	r3, [r4, #16]
 8004422:	b943      	cbnz	r3, 8004436 <__swbuf_r+0x32>
 8004424:	4621      	mov	r1, r4
 8004426:	4628      	mov	r0, r5
 8004428:	f000 f82a 	bl	8004480 <__swsetup_r>
 800442c:	b118      	cbz	r0, 8004436 <__swbuf_r+0x32>
 800442e:	f04f 37ff 	mov.w	r7, #4294967295
 8004432:	4638      	mov	r0, r7
 8004434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	6922      	ldr	r2, [r4, #16]
 800443a:	1a98      	subs	r0, r3, r2
 800443c:	6963      	ldr	r3, [r4, #20]
 800443e:	b2f6      	uxtb	r6, r6
 8004440:	4283      	cmp	r3, r0
 8004442:	4637      	mov	r7, r6
 8004444:	dc05      	bgt.n	8004452 <__swbuf_r+0x4e>
 8004446:	4621      	mov	r1, r4
 8004448:	4628      	mov	r0, r5
 800444a:	f7ff fcbb 	bl	8003dc4 <_fflush_r>
 800444e:	2800      	cmp	r0, #0
 8004450:	d1ed      	bne.n	800442e <__swbuf_r+0x2a>
 8004452:	68a3      	ldr	r3, [r4, #8]
 8004454:	3b01      	subs	r3, #1
 8004456:	60a3      	str	r3, [r4, #8]
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	6022      	str	r2, [r4, #0]
 800445e:	701e      	strb	r6, [r3, #0]
 8004460:	6962      	ldr	r2, [r4, #20]
 8004462:	1c43      	adds	r3, r0, #1
 8004464:	429a      	cmp	r2, r3
 8004466:	d004      	beq.n	8004472 <__swbuf_r+0x6e>
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	07db      	lsls	r3, r3, #31
 800446c:	d5e1      	bpl.n	8004432 <__swbuf_r+0x2e>
 800446e:	2e0a      	cmp	r6, #10
 8004470:	d1df      	bne.n	8004432 <__swbuf_r+0x2e>
 8004472:	4621      	mov	r1, r4
 8004474:	4628      	mov	r0, r5
 8004476:	f7ff fca5 	bl	8003dc4 <_fflush_r>
 800447a:	2800      	cmp	r0, #0
 800447c:	d0d9      	beq.n	8004432 <__swbuf_r+0x2e>
 800447e:	e7d6      	b.n	800442e <__swbuf_r+0x2a>

08004480 <__swsetup_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4b29      	ldr	r3, [pc, #164]	@ (8004528 <__swsetup_r+0xa8>)
 8004484:	4605      	mov	r5, r0
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	460c      	mov	r4, r1
 800448a:	b118      	cbz	r0, 8004494 <__swsetup_r+0x14>
 800448c:	6a03      	ldr	r3, [r0, #32]
 800448e:	b90b      	cbnz	r3, 8004494 <__swsetup_r+0x14>
 8004490:	f7ff f9f2 	bl	8003878 <__sinit>
 8004494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004498:	0719      	lsls	r1, r3, #28
 800449a:	d422      	bmi.n	80044e2 <__swsetup_r+0x62>
 800449c:	06da      	lsls	r2, r3, #27
 800449e:	d407      	bmi.n	80044b0 <__swsetup_r+0x30>
 80044a0:	2209      	movs	r2, #9
 80044a2:	602a      	str	r2, [r5, #0]
 80044a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044a8:	81a3      	strh	r3, [r4, #12]
 80044aa:	f04f 30ff 	mov.w	r0, #4294967295
 80044ae:	e033      	b.n	8004518 <__swsetup_r+0x98>
 80044b0:	0758      	lsls	r0, r3, #29
 80044b2:	d512      	bpl.n	80044da <__swsetup_r+0x5a>
 80044b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044b6:	b141      	cbz	r1, 80044ca <__swsetup_r+0x4a>
 80044b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044bc:	4299      	cmp	r1, r3
 80044be:	d002      	beq.n	80044c6 <__swsetup_r+0x46>
 80044c0:	4628      	mov	r0, r5
 80044c2:	f7ff fafb 	bl	8003abc <_free_r>
 80044c6:	2300      	movs	r3, #0
 80044c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80044d0:	81a3      	strh	r3, [r4, #12]
 80044d2:	2300      	movs	r3, #0
 80044d4:	6063      	str	r3, [r4, #4]
 80044d6:	6923      	ldr	r3, [r4, #16]
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	f043 0308 	orr.w	r3, r3, #8
 80044e0:	81a3      	strh	r3, [r4, #12]
 80044e2:	6923      	ldr	r3, [r4, #16]
 80044e4:	b94b      	cbnz	r3, 80044fa <__swsetup_r+0x7a>
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80044ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f0:	d003      	beq.n	80044fa <__swsetup_r+0x7a>
 80044f2:	4621      	mov	r1, r4
 80044f4:	4628      	mov	r0, r5
 80044f6:	f000 f883 	bl	8004600 <__smakebuf_r>
 80044fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044fe:	f013 0201 	ands.w	r2, r3, #1
 8004502:	d00a      	beq.n	800451a <__swsetup_r+0x9a>
 8004504:	2200      	movs	r2, #0
 8004506:	60a2      	str	r2, [r4, #8]
 8004508:	6962      	ldr	r2, [r4, #20]
 800450a:	4252      	negs	r2, r2
 800450c:	61a2      	str	r2, [r4, #24]
 800450e:	6922      	ldr	r2, [r4, #16]
 8004510:	b942      	cbnz	r2, 8004524 <__swsetup_r+0xa4>
 8004512:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004516:	d1c5      	bne.n	80044a4 <__swsetup_r+0x24>
 8004518:	bd38      	pop	{r3, r4, r5, pc}
 800451a:	0799      	lsls	r1, r3, #30
 800451c:	bf58      	it	pl
 800451e:	6962      	ldrpl	r2, [r4, #20]
 8004520:	60a2      	str	r2, [r4, #8]
 8004522:	e7f4      	b.n	800450e <__swsetup_r+0x8e>
 8004524:	2000      	movs	r0, #0
 8004526:	e7f7      	b.n	8004518 <__swsetup_r+0x98>
 8004528:	20000018 	.word	0x20000018

0800452c <_raise_r>:
 800452c:	291f      	cmp	r1, #31
 800452e:	b538      	push	{r3, r4, r5, lr}
 8004530:	4605      	mov	r5, r0
 8004532:	460c      	mov	r4, r1
 8004534:	d904      	bls.n	8004540 <_raise_r+0x14>
 8004536:	2316      	movs	r3, #22
 8004538:	6003      	str	r3, [r0, #0]
 800453a:	f04f 30ff 	mov.w	r0, #4294967295
 800453e:	bd38      	pop	{r3, r4, r5, pc}
 8004540:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004542:	b112      	cbz	r2, 800454a <_raise_r+0x1e>
 8004544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004548:	b94b      	cbnz	r3, 800455e <_raise_r+0x32>
 800454a:	4628      	mov	r0, r5
 800454c:	f000 f830 	bl	80045b0 <_getpid_r>
 8004550:	4622      	mov	r2, r4
 8004552:	4601      	mov	r1, r0
 8004554:	4628      	mov	r0, r5
 8004556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800455a:	f000 b817 	b.w	800458c <_kill_r>
 800455e:	2b01      	cmp	r3, #1
 8004560:	d00a      	beq.n	8004578 <_raise_r+0x4c>
 8004562:	1c59      	adds	r1, r3, #1
 8004564:	d103      	bne.n	800456e <_raise_r+0x42>
 8004566:	2316      	movs	r3, #22
 8004568:	6003      	str	r3, [r0, #0]
 800456a:	2001      	movs	r0, #1
 800456c:	e7e7      	b.n	800453e <_raise_r+0x12>
 800456e:	2100      	movs	r1, #0
 8004570:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004574:	4620      	mov	r0, r4
 8004576:	4798      	blx	r3
 8004578:	2000      	movs	r0, #0
 800457a:	e7e0      	b.n	800453e <_raise_r+0x12>

0800457c <raise>:
 800457c:	4b02      	ldr	r3, [pc, #8]	@ (8004588 <raise+0xc>)
 800457e:	4601      	mov	r1, r0
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	f7ff bfd3 	b.w	800452c <_raise_r>
 8004586:	bf00      	nop
 8004588:	20000018 	.word	0x20000018

0800458c <_kill_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4d07      	ldr	r5, [pc, #28]	@ (80045ac <_kill_r+0x20>)
 8004590:	2300      	movs	r3, #0
 8004592:	4604      	mov	r4, r0
 8004594:	4608      	mov	r0, r1
 8004596:	4611      	mov	r1, r2
 8004598:	602b      	str	r3, [r5, #0]
 800459a:	f7fd fdc4 	bl	8002126 <_kill>
 800459e:	1c43      	adds	r3, r0, #1
 80045a0:	d102      	bne.n	80045a8 <_kill_r+0x1c>
 80045a2:	682b      	ldr	r3, [r5, #0]
 80045a4:	b103      	cbz	r3, 80045a8 <_kill_r+0x1c>
 80045a6:	6023      	str	r3, [r4, #0]
 80045a8:	bd38      	pop	{r3, r4, r5, pc}
 80045aa:	bf00      	nop
 80045ac:	20000220 	.word	0x20000220

080045b0 <_getpid_r>:
 80045b0:	f7fd bdb1 	b.w	8002116 <_getpid>

080045b4 <__swhatbuf_r>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	460c      	mov	r4, r1
 80045b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045bc:	2900      	cmp	r1, #0
 80045be:	b096      	sub	sp, #88	@ 0x58
 80045c0:	4615      	mov	r5, r2
 80045c2:	461e      	mov	r6, r3
 80045c4:	da0d      	bge.n	80045e2 <__swhatbuf_r+0x2e>
 80045c6:	89a3      	ldrh	r3, [r4, #12]
 80045c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80045cc:	f04f 0100 	mov.w	r1, #0
 80045d0:	bf14      	ite	ne
 80045d2:	2340      	movne	r3, #64	@ 0x40
 80045d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80045d8:	2000      	movs	r0, #0
 80045da:	6031      	str	r1, [r6, #0]
 80045dc:	602b      	str	r3, [r5, #0]
 80045de:	b016      	add	sp, #88	@ 0x58
 80045e0:	bd70      	pop	{r4, r5, r6, pc}
 80045e2:	466a      	mov	r2, sp
 80045e4:	f000 f848 	bl	8004678 <_fstat_r>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	dbec      	blt.n	80045c6 <__swhatbuf_r+0x12>
 80045ec:	9901      	ldr	r1, [sp, #4]
 80045ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80045f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80045f6:	4259      	negs	r1, r3
 80045f8:	4159      	adcs	r1, r3
 80045fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045fe:	e7eb      	b.n	80045d8 <__swhatbuf_r+0x24>

08004600 <__smakebuf_r>:
 8004600:	898b      	ldrh	r3, [r1, #12]
 8004602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004604:	079d      	lsls	r5, r3, #30
 8004606:	4606      	mov	r6, r0
 8004608:	460c      	mov	r4, r1
 800460a:	d507      	bpl.n	800461c <__smakebuf_r+0x1c>
 800460c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	6123      	str	r3, [r4, #16]
 8004614:	2301      	movs	r3, #1
 8004616:	6163      	str	r3, [r4, #20]
 8004618:	b003      	add	sp, #12
 800461a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800461c:	ab01      	add	r3, sp, #4
 800461e:	466a      	mov	r2, sp
 8004620:	f7ff ffc8 	bl	80045b4 <__swhatbuf_r>
 8004624:	9f00      	ldr	r7, [sp, #0]
 8004626:	4605      	mov	r5, r0
 8004628:	4639      	mov	r1, r7
 800462a:	4630      	mov	r0, r6
 800462c:	f7ff faba 	bl	8003ba4 <_malloc_r>
 8004630:	b948      	cbnz	r0, 8004646 <__smakebuf_r+0x46>
 8004632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004636:	059a      	lsls	r2, r3, #22
 8004638:	d4ee      	bmi.n	8004618 <__smakebuf_r+0x18>
 800463a:	f023 0303 	bic.w	r3, r3, #3
 800463e:	f043 0302 	orr.w	r3, r3, #2
 8004642:	81a3      	strh	r3, [r4, #12]
 8004644:	e7e2      	b.n	800460c <__smakebuf_r+0xc>
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	6020      	str	r0, [r4, #0]
 800464a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800464e:	81a3      	strh	r3, [r4, #12]
 8004650:	9b01      	ldr	r3, [sp, #4]
 8004652:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004656:	b15b      	cbz	r3, 8004670 <__smakebuf_r+0x70>
 8004658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800465c:	4630      	mov	r0, r6
 800465e:	f000 f81d 	bl	800469c <_isatty_r>
 8004662:	b128      	cbz	r0, 8004670 <__smakebuf_r+0x70>
 8004664:	89a3      	ldrh	r3, [r4, #12]
 8004666:	f023 0303 	bic.w	r3, r3, #3
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	81a3      	strh	r3, [r4, #12]
 8004670:	89a3      	ldrh	r3, [r4, #12]
 8004672:	431d      	orrs	r5, r3
 8004674:	81a5      	strh	r5, [r4, #12]
 8004676:	e7cf      	b.n	8004618 <__smakebuf_r+0x18>

08004678 <_fstat_r>:
 8004678:	b538      	push	{r3, r4, r5, lr}
 800467a:	4d07      	ldr	r5, [pc, #28]	@ (8004698 <_fstat_r+0x20>)
 800467c:	2300      	movs	r3, #0
 800467e:	4604      	mov	r4, r0
 8004680:	4608      	mov	r0, r1
 8004682:	4611      	mov	r1, r2
 8004684:	602b      	str	r3, [r5, #0]
 8004686:	f7fd fdae 	bl	80021e6 <_fstat>
 800468a:	1c43      	adds	r3, r0, #1
 800468c:	d102      	bne.n	8004694 <_fstat_r+0x1c>
 800468e:	682b      	ldr	r3, [r5, #0]
 8004690:	b103      	cbz	r3, 8004694 <_fstat_r+0x1c>
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	bd38      	pop	{r3, r4, r5, pc}
 8004696:	bf00      	nop
 8004698:	20000220 	.word	0x20000220

0800469c <_isatty_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	4d06      	ldr	r5, [pc, #24]	@ (80046b8 <_isatty_r+0x1c>)
 80046a0:	2300      	movs	r3, #0
 80046a2:	4604      	mov	r4, r0
 80046a4:	4608      	mov	r0, r1
 80046a6:	602b      	str	r3, [r5, #0]
 80046a8:	f7fd fdad 	bl	8002206 <_isatty>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d102      	bne.n	80046b6 <_isatty_r+0x1a>
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	b103      	cbz	r3, 80046b6 <_isatty_r+0x1a>
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
 80046b8:	20000220 	.word	0x20000220

080046bc <_init>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr

080046c8 <_fini>:
 80046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ca:	bf00      	nop
 80046cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ce:	bc08      	pop	{r3}
 80046d0:	469e      	mov	lr, r3
 80046d2:	4770      	bx	lr
